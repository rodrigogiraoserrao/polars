Search.setIndex({"alltitles": {"ABS": [[1338, "abs"]], "ACOS": [[1341, "acos"]], "ACOSD": [[1341, "acosd"]], "ARRAY_AGG": [[1334, "array-agg"]], "ARRAY_CONTAINS": [[1334, "array-contains"]], "ARRAY_GET": [[1334, "array-get"]], "ARRAY_LENGTH": [[1334, "array-length"]], "ARRAY_LOWER": [[1334, "array-lower"]], "ARRAY_MEAN": [[1334, "array-mean"]], "ARRAY_REVERSE": [[1334, "array-reverse"]], "ARRAY_SUM": [[1334, "array-sum"]], "ARRAY_TO_STRING": [[1334, "array-to-string"]], "ARRAY_UNIQUE": [[1334, "array-unique"]], "ARRAY_UPPER": [[1334, "array-upper"]], "ASIN": [[1341, "asin"]], "ASIND": [[1341, "asind"]], "ATAN": [[1341, "atan"]], "ATAN2": [[1341, "atan2"]], "ATAN2D": [[1341, "atan2d"]], "ATAND": [[1341, "atand"]], "AVG": [[1333, "avg"]], "Aggregate": [[1333, null]], "Aggregation": [[175, null], [327, null], [822, null], [929, null]], "Aliases": [[1333, null], [1333, null], [1338, null], [1338, null], [1339, null], [1339, null]], "Array": [[800, null], [1308, null], [1334, null]], "Asserts": [[1347, "asserts"]], "Attributes": [[315, null], [917, null], [1309, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[821, "avro"]], "BIT_AND": [[1335, "bit-and"]], "BIT_COUNT": [[1335, "bit-count"]], "BIT_LENGTH": [[1339, "bit-length"]], "BIT_OR": [[1335, "bit-or"]], "BIT_XOR": [[1335, "bit-xor"]], "Binary": [[801, null], [814, "binary"], [1310, null]], "Boolean": [[802, null], [1311, null]], "CAST": [[1342, "cast"]], "CBRT": [[1338, "cbrt"]], "CEIL": [[1338, "ceil"]], "COALESCE": [[1336, "coalesce"]], "CONCAT": [[1339, "concat"]], "CONCAT_WS": [[1339, "concat-ws"]], "COS": [[1341, "cos"]], "COSD": [[1341, "cosd"]], "COT": [[1341, "cot"]], "COTD": [[1341, "cotd"]], "COUNT": [[1333, "count"]], "CREATE TABLE": [[1346, "create-table"]], "CSV": [[821, "csv"]], "Categories": [[803, null], [1312, null]], "Clipboard": [[821, "clipboard"]], "Cloud Credentials": [[821, "cloud-credentials"]], "Columns / names": [[805, null]], "Comparison": [[814, "comparison"], [1320, "comparison"]], "Computation": [[316, null], [806, null], [1313, null]], "Conditional": [[1336, null]], "Config": [[174, null]], "Config load, save, state": [[174, "config-load-save-state"]], "Config options": [[174, "config-options"]], "Conjunction": [[814, "conjunction"]], "Conversion": [[819, "conversion"]], "DATE": [[1339, "date"]], "DATE_PART": [[1340, "date-part"]], "DEGREES": [[1341, "degrees"]], "DISTINCT": [[1332, "distinct"]], "DIV": [[1338, "div"]], "DROP TABLES": [[1346, "drop-tables"]], "Data types": [[325, null]], "DataFrame": [[320, null]], "DataType": [[325, "datatype"]], "Database": [[821, "database"]], "Delta Lake": [[821, "delta-lake"]], "Descriptive": [[317, null], [918, null], [1314, null]], "Documentation": [[1344, null], [1344, null], [1344, null]], "ENDS_WITH": [[1339, "ends-with"]], "EXCEPT": [[1345, "except"]], "EXP": [[1338, "exp"]], "EXPLAIN": [[1346, "explain"]], "EXTRACT": [[1340, "extract"]], "Errors": [[326, "errors"]], "Examples": [[1, "examples"], [928, "examples"], [1347, "examples"]], "Excel / ODS": [[821, "excel-ods"]], "Exceptions": [[326, null]], "Export": [[318, null], [1315, null]], "Expression SQL": [[1344, "expression-sql"]], "Expressions": [[808, null]], "Extending the API": [[1, null]], "FIRST": [[1333, "first"]], "FLOOR": [[1338, "floor"]], "FROM": [[1332, "from"]], "Feather / IPC": [[821, "feather-ipc"]], "Frame SQL": [[1344, "frame-sql"]], "Functions": [[807, null], [819, null], [928, "functions"]], "GPUEngine": [[919, null]], "GREATEST": [[1336, "greatest"]], "GROUP BY": [[1332, "group-by"]], "Global SQL": [[1344, "global-sql"]], "GroupBy": [[319, null], [920, null]], "HAVING": [[1332, "having"]], "IF": [[1336, "if"]], "IFNULL": [[1336, "ifnull"]], "INITCAP": [[1339, "initcap"]], "INTERSECT": [[1345, "intersect"]], "Iceberg": [[821, "iceberg"]], "Importing": [[928, "importing"]], "InProcessQuery": [[921, null]], "Index": [[0, null]], "Input/output": [[821, null]], "Introduction": [[1344, "introduction"]], "JOIN": [[1332, "join"]], "JSON": [[821, "json"]], "LAST": [[1333, "last"]], "LEAST": [[1336, "least"]], "LEFT": [[1339, "left"]], "LENGTH": [[1339, "length"]], "LIMIT": [[1332, "limit"]], "LN": [[1338, "ln"]], "LOG": [[1338, "log"]], "LOG10": [[1338, "log10"]], "LOG1P": [[1338, "log1p"]], "LOG2": [[1338, "log2"]], "LOWER": [[1339, "lower"]], "LTRIM": [[1339, "ltrim"]], "LazyFrame": [[922, null]], "List": [[809, null], [1317, null]], "MAX": [[1333, "max"]], "MEDIAN": [[1333, "median"]], "MIN": [[1333, "min"]], "MOD": [[1338, "mod"]], "Manipulation/selection": [[322, null], [812, null], [924, null], [1319, null]], "Math": [[1338, null]], "Meta": [[810, null]], "Metadata": [[925, null]], "Methods": [[1344, "methods"]], "Miscellaneous": [[321, null], [811, null], [819, "miscellaneous"], [923, null], [1318, null]], "Multiple Config instances": [[174, "multiple-config-instances"]], "NULLIF": [[1336, "nullif"]], "Name": [[813, null]], "Nested": [[325, "nested"]], "Numeric": [[325, "numeric"], [814, "numeric"], [1320, "numeric"]], "OCTET_LENGTH": [[1339, "octet-length"]], "OFFSET": [[1332, "offset"]], "ORDER BY": [[1332, "order-by"]], "Operators": [[814, null], [1320, null]], "Other": [[325, "other"]], "PI": [[1338, "pi"]], "POW": [[1338, "pow"]], "Panic": [[326, "panic"]], "Parallelization": [[819, "parallelization"]], "Parametric testing": [[1347, "parametric-testing"]], "Parquet": [[821, "parquet"]], "Plot": [[323, null], [1321, null]], "Plugins": [[926, null]], "Polars strategies": [[1347, "polars-strategies"]], "Profiles": [[1347, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[821, "pyarrow-datasets"]], "Python API": [[1344, null]], "Python API reference": [[820, null]], "QUANTILE_CONT": [[1333, "quantile-cont"]], "QUANTILE_DISC": [[1333, "quantile-disc"]], "Querying": [[1344, "querying"]], "RADIANS": [[1341, "radians"]], "REGEXP_LIKE": [[1339, "regexp-like"]], "REPLACE": [[1339, "replace"]], "REVERSE": [[1339, "reverse"]], "RIGHT": [[1339, "right"]], "ROUND": [[1338, "round"]], "RTRIM": [[1339, "rtrim"]], "Random": [[819, "random"]], "SELECT": [[1332, "select"]], "SHOW TABLES": [[1346, "show-tables"]], "SIGN": [[1338, "sign"]], "SIN": [[1341, "sin"]], "SIND": [[1341, "sind"]], "SQL Clauses": [[1332, null]], "SQL Functions": [[1337, null]], "SQL Interface": [[1343, null]], "SQLContext": [[1344, "sqlcontext"]], "SQRT": [[1338, "sqrt"]], "STARTS_WITH": [[1339, "starts-with"]], "STDDEV": [[1333, "stddev"]], "STRFTIME": [[1340, "strftime"]], "STRPOS": [[1339, "strpos"]], "STRPTIME": [[1339, "strptime"]], "SUBSTR": [[1339, "substr"]], "SUM": [[1333, "sum"]], "Schema": [[927, null]], "Selectors": [[928, null]], "Serialization": [[321, "serialization"], [923, "serialization"]], "Series": [[1316, null]], "Set Operations": [[1345, null]], "Set operations": [[928, "set-operations"]], "Strategy helpers": [[1347, "strategy-helpers"]], "String": [[325, "string"], [815, null], [1322, null], [1339, null]], "StringCache": [[819, "stringcache"]], "Struct": [[816, null], [1323, null]], "Style": [[324, null]], "TAN": [[1341, "tan"]], "TAND": [[1341, "tand"]], "TIMESTAMP": [[1339, "timestamp"]], "TRUNCATE": [[1346, "truncate"]], "TRY_CAST": [[1342, "try-cast"]], "Table Operations": [[1346, null]], "Temporal": [[325, "temporal"], [817, null], [1324, null], [1335, null], [1340, null]], "Testing": [[1347, null]], "Trigonometry": [[1341, null]], "Types": [[1342, null]], "UNION": [[1345, "union"]], "UNION ALL": [[1345, "union-all"]], "UNION BY NAME": [[1345, "union-by-name"]], "UNNEST": [[1334, "unnest"], [1346, "unnest"]], "UPPER": [[1339, "upper"]], "Use as a context manager": [[174, "use-as-a-context-manager"]], "Use as a decorator": [[174, "use-as-a-decorator"]], "VARIANCE": [[1333, "variance"]], "WHERE": [[1332, "where"]], "Warnings": [[326, "warnings"]], "Window": [[818, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderAzure": [[33, null]], "polars.CredentialProviderGCP": [[34, null]], "polars.DataFrame.__array__": [[176, null]], "polars.DataFrame.__arrow_c_stream__": [[177, null]], "polars.DataFrame.__dataframe__": [[178, null]], "polars.DataFrame.__getitem__": [[179, null]], "polars.DataFrame.approx_n_unique": [[180, null]], "polars.DataFrame.bottom_k": [[181, null]], "polars.DataFrame.cast": [[182, null]], "polars.DataFrame.clear": [[183, null]], "polars.DataFrame.clone": [[184, null]], "polars.DataFrame.collect_schema": [[185, null]], "polars.DataFrame.columns": [[186, null]], "polars.DataFrame.corr": [[187, null]], "polars.DataFrame.count": [[188, null]], "polars.DataFrame.describe": [[189, null]], "polars.DataFrame.deserialize": [[190, null]], "polars.DataFrame.drop": [[191, null]], "polars.DataFrame.drop_in_place": [[192, null]], "polars.DataFrame.drop_nans": [[193, null]], "polars.DataFrame.drop_nulls": [[194, null]], "polars.DataFrame.dtypes": [[195, null]], "polars.DataFrame.equals": [[196, null]], "polars.DataFrame.estimated_size": [[197, null]], "polars.DataFrame.explode": [[198, null]], "polars.DataFrame.extend": [[199, null]], "polars.DataFrame.fill_nan": [[200, null]], "polars.DataFrame.fill_null": [[201, null]], "polars.DataFrame.filter": [[202, null]], "polars.DataFrame.flags": [[203, null]], "polars.DataFrame.fold": [[204, null]], "polars.DataFrame.gather_every": [[205, null]], "polars.DataFrame.get_column": [[206, null]], "polars.DataFrame.get_column_index": [[207, null]], "polars.DataFrame.get_columns": [[208, null]], "polars.DataFrame.glimpse": [[209, null]], "polars.DataFrame.group_by": [[210, null]], "polars.DataFrame.group_by_dynamic": [[211, null]], "polars.DataFrame.hash_rows": [[212, null]], "polars.DataFrame.head": [[213, null]], "polars.DataFrame.height": [[214, null]], "polars.DataFrame.hstack": [[215, null]], "polars.DataFrame.insert_column": [[216, null]], "polars.DataFrame.interpolate": [[217, null]], "polars.DataFrame.is_duplicated": [[218, null]], "polars.DataFrame.is_empty": [[219, null]], "polars.DataFrame.is_unique": [[220, null]], "polars.DataFrame.item": [[221, null]], "polars.DataFrame.iter_columns": [[222, null]], "polars.DataFrame.iter_rows": [[223, null]], "polars.DataFrame.iter_slices": [[224, null]], "polars.DataFrame.join": [[225, null]], "polars.DataFrame.join_asof": [[226, null]], "polars.DataFrame.join_where": [[227, null]], "polars.DataFrame.lazy": [[228, null]], "polars.DataFrame.limit": [[229, null]], "polars.DataFrame.map_rows": [[230, null]], "polars.DataFrame.max": [[231, null]], "polars.DataFrame.max_horizontal": [[232, null]], "polars.DataFrame.mean": [[233, null]], "polars.DataFrame.mean_horizontal": [[234, null]], "polars.DataFrame.median": [[235, null]], "polars.DataFrame.melt": [[236, null]], "polars.DataFrame.merge_sorted": [[237, null]], "polars.DataFrame.min": [[238, null]], "polars.DataFrame.min_horizontal": [[239, null]], "polars.DataFrame.n_chunks": [[240, null]], "polars.DataFrame.n_unique": [[241, null]], "polars.DataFrame.null_count": [[242, null]], "polars.DataFrame.partition_by": [[243, null]], "polars.DataFrame.pipe": [[244, null]], "polars.DataFrame.pivot": [[245, null]], "polars.DataFrame.product": [[246, null]], "polars.DataFrame.quantile": [[247, null]], "polars.DataFrame.rechunk": [[248, null]], "polars.DataFrame.rename": [[249, null]], "polars.DataFrame.replace_column": [[250, null]], "polars.DataFrame.reverse": [[251, null]], "polars.DataFrame.rolling": [[252, null]], "polars.DataFrame.row": [[253, null]], "polars.DataFrame.rows": [[254, null]], "polars.DataFrame.rows_by_key": [[255, null]], "polars.DataFrame.sample": [[256, null]], "polars.DataFrame.schema": [[257, null]], "polars.DataFrame.select": [[258, null]], "polars.DataFrame.select_seq": [[259, null]], "polars.DataFrame.serialize": [[260, null]], "polars.DataFrame.set_sorted": [[261, null]], "polars.DataFrame.shape": [[262, null]], "polars.DataFrame.shift": [[263, null]], "polars.DataFrame.shrink_to_fit": [[264, null]], "polars.DataFrame.slice": [[265, null]], "polars.DataFrame.sort": [[266, null]], "polars.DataFrame.sql": [[267, null]], "polars.DataFrame.std": [[268, null]], "polars.DataFrame.sum": [[269, null]], "polars.DataFrame.sum_horizontal": [[270, null]], "polars.DataFrame.tail": [[271, null]], "polars.DataFrame.to_arrow": [[272, null]], "polars.DataFrame.to_dict": [[273, null]], "polars.DataFrame.to_dicts": [[274, null]], "polars.DataFrame.to_dummies": [[275, null]], "polars.DataFrame.to_init_repr": [[276, null]], "polars.DataFrame.to_jax": [[277, null]], "polars.DataFrame.to_numpy": [[278, null]], "polars.DataFrame.to_pandas": [[279, null]], "polars.DataFrame.to_series": [[280, null]], "polars.DataFrame.to_struct": [[281, null]], "polars.DataFrame.to_torch": [[282, null]], "polars.DataFrame.top_k": [[283, null]], "polars.DataFrame.transpose": [[284, null]], "polars.DataFrame.unique": [[285, null]], "polars.DataFrame.unnest": [[286, null]], "polars.DataFrame.unpivot": [[287, null]], "polars.DataFrame.unstack": [[288, null]], "polars.DataFrame.update": [[289, null]], "polars.DataFrame.upsample": [[290, null]], "polars.DataFrame.var": [[291, null]], "polars.DataFrame.vstack": [[292, null]], "polars.DataFrame.width": [[293, null]], "polars.DataFrame.with_columns": [[294, null]], "polars.DataFrame.with_columns_seq": [[295, null]], "polars.DataFrame.with_row_count": [[296, null]], "polars.DataFrame.with_row_index": [[297, null]], "polars.DataFrame.write_avro": [[35, null]], "polars.DataFrame.write_clipboard": [[36, null]], "polars.DataFrame.write_csv": [[37, null]], "polars.DataFrame.write_database": [[38, null]], "polars.DataFrame.write_delta": [[39, null]], "polars.DataFrame.write_excel": [[40, null]], "polars.DataFrame.write_ipc": [[41, null]], "polars.DataFrame.write_ipc_stream": [[42, null]], "polars.DataFrame.write_json": [[43, null]], "polars.DataFrame.write_ndjson": [[44, null]], "polars.DataFrame.write_parquet": [[45, null]], "polars.Expr.abs": [[328, null]], "polars.Expr.add": [[329, null]], "polars.Expr.agg_groups": [[330, null]], "polars.Expr.alias": [[331, null]], "polars.Expr.all": [[332, null]], "polars.Expr.and_": [[333, null]], "polars.Expr.any": [[334, null]], "polars.Expr.append": [[335, null]], "polars.Expr.approx_n_unique": [[336, null]], "polars.Expr.arccos": [[337, null]], "polars.Expr.arccosh": [[338, null]], "polars.Expr.arcsin": [[339, null]], "polars.Expr.arcsinh": [[340, null]], "polars.Expr.arctan": [[341, null]], "polars.Expr.arctanh": [[342, null]], "polars.Expr.arg_max": [[343, null]], "polars.Expr.arg_min": [[344, null]], "polars.Expr.arg_sort": [[345, null]], "polars.Expr.arg_true": [[346, null]], "polars.Expr.arg_unique": [[347, null]], "polars.Expr.arr.all": [[348, null]], "polars.Expr.arr.any": [[349, null]], "polars.Expr.arr.arg_max": [[350, null]], "polars.Expr.arr.arg_min": [[351, null]], "polars.Expr.arr.contains": [[352, null]], "polars.Expr.arr.count_matches": [[353, null]], "polars.Expr.arr.explode": [[354, null]], "polars.Expr.arr.first": [[355, null]], "polars.Expr.arr.get": [[356, null]], "polars.Expr.arr.join": [[357, null]], "polars.Expr.arr.last": [[358, null]], "polars.Expr.arr.max": [[359, null]], "polars.Expr.arr.median": [[360, null]], "polars.Expr.arr.min": [[361, null]], "polars.Expr.arr.n_unique": [[362, null]], "polars.Expr.arr.reverse": [[363, null]], "polars.Expr.arr.shift": [[364, null]], "polars.Expr.arr.sort": [[365, null]], "polars.Expr.arr.std": [[366, null]], "polars.Expr.arr.sum": [[367, null]], "polars.Expr.arr.to_list": [[368, null]], "polars.Expr.arr.to_struct": [[369, null]], "polars.Expr.arr.unique": [[370, null]], "polars.Expr.arr.var": [[371, null]], "polars.Expr.backward_fill": [[372, null]], "polars.Expr.bin.contains": [[373, null]], "polars.Expr.bin.decode": [[374, null]], "polars.Expr.bin.encode": [[375, null]], "polars.Expr.bin.ends_with": [[376, null]], "polars.Expr.bin.reinterpret": [[377, null]], "polars.Expr.bin.size": [[378, null]], "polars.Expr.bin.starts_with": [[379, null]], "polars.Expr.bitwise_and": [[380, null]], "polars.Expr.bitwise_count_ones": [[381, null]], "polars.Expr.bitwise_count_zeros": [[382, null]], "polars.Expr.bitwise_leading_ones": [[383, null]], "polars.Expr.bitwise_leading_zeros": [[384, null]], "polars.Expr.bitwise_or": [[385, null]], "polars.Expr.bitwise_trailing_ones": [[386, null]], "polars.Expr.bitwise_trailing_zeros": [[387, null]], "polars.Expr.bitwise_xor": [[388, null]], "polars.Expr.bottom_k": [[389, null]], "polars.Expr.bottom_k_by": [[390, null]], "polars.Expr.cast": [[391, null]], "polars.Expr.cat.ends_with": [[392, null]], "polars.Expr.cat.get_categories": [[393, null]], "polars.Expr.cat.len_bytes": [[394, null]], "polars.Expr.cat.len_chars": [[395, null]], "polars.Expr.cat.starts_with": [[396, null]], "polars.Expr.cbrt": [[397, null]], "polars.Expr.ceil": [[398, null]], "polars.Expr.clip": [[399, null]], "polars.Expr.cos": [[400, null]], "polars.Expr.cosh": [[401, null]], "polars.Expr.cot": [[402, null]], "polars.Expr.count": [[403, null]], "polars.Expr.cum_count": [[404, null]], "polars.Expr.cum_max": [[405, null]], "polars.Expr.cum_min": [[406, null]], "polars.Expr.cum_prod": [[407, null]], "polars.Expr.cum_sum": [[408, null]], "polars.Expr.cumulative_eval": [[409, null]], "polars.Expr.cut": [[410, null]], "polars.Expr.degrees": [[411, null]], "polars.Expr.deserialize": [[412, null]], "polars.Expr.diff": [[413, null]], "polars.Expr.dot": [[414, null]], "polars.Expr.drop_nans": [[415, null]], "polars.Expr.drop_nulls": [[416, null]], "polars.Expr.dt.add_business_days": [[417, null]], "polars.Expr.dt.base_utc_offset": [[418, null]], "polars.Expr.dt.cast_time_unit": [[419, null]], "polars.Expr.dt.century": [[420, null]], "polars.Expr.dt.combine": [[421, null]], "polars.Expr.dt.convert_time_zone": [[422, null]], "polars.Expr.dt.date": [[423, null]], "polars.Expr.dt.datetime": [[424, null]], "polars.Expr.dt.day": [[425, null]], "polars.Expr.dt.dst_offset": [[426, null]], "polars.Expr.dt.epoch": [[427, null]], "polars.Expr.dt.hour": [[428, null]], "polars.Expr.dt.is_leap_year": [[429, null]], "polars.Expr.dt.iso_year": [[430, null]], "polars.Expr.dt.microsecond": [[431, null]], "polars.Expr.dt.millennium": [[432, null]], "polars.Expr.dt.millisecond": [[433, null]], "polars.Expr.dt.minute": [[434, null]], "polars.Expr.dt.month": [[435, null]], "polars.Expr.dt.month_end": [[436, null]], "polars.Expr.dt.month_start": [[437, null]], "polars.Expr.dt.nanosecond": [[438, null]], "polars.Expr.dt.offset_by": [[439, null]], "polars.Expr.dt.ordinal_day": [[440, null]], "polars.Expr.dt.quarter": [[441, null]], "polars.Expr.dt.replace": [[442, null]], "polars.Expr.dt.replace_time_zone": [[443, null]], "polars.Expr.dt.round": [[444, null]], "polars.Expr.dt.second": [[445, null]], "polars.Expr.dt.strftime": [[446, null]], "polars.Expr.dt.time": [[447, null]], "polars.Expr.dt.timestamp": [[448, null]], "polars.Expr.dt.to_string": [[449, null]], "polars.Expr.dt.total_days": [[450, null]], "polars.Expr.dt.total_hours": [[451, null]], "polars.Expr.dt.total_microseconds": [[452, null]], "polars.Expr.dt.total_milliseconds": [[453, null]], "polars.Expr.dt.total_minutes": [[454, null]], "polars.Expr.dt.total_nanoseconds": [[455, null]], "polars.Expr.dt.total_seconds": [[456, null]], "polars.Expr.dt.truncate": [[457, null]], "polars.Expr.dt.week": [[458, null]], "polars.Expr.dt.weekday": [[459, null]], "polars.Expr.dt.with_time_unit": [[460, null]], "polars.Expr.dt.year": [[461, null]], "polars.Expr.entropy": [[462, null]], "polars.Expr.eq": [[463, null]], "polars.Expr.eq_missing": [[464, null]], "polars.Expr.ewm_mean": [[465, null]], "polars.Expr.ewm_mean_by": [[466, null]], "polars.Expr.ewm_std": [[467, null]], "polars.Expr.ewm_var": [[468, null]], "polars.Expr.exclude": [[469, null]], "polars.Expr.exp": [[470, null]], "polars.Expr.explode": [[471, null]], "polars.Expr.extend_constant": [[472, null]], "polars.Expr.fill_nan": [[473, null]], "polars.Expr.fill_null": [[474, null]], "polars.Expr.filter": [[475, null]], "polars.Expr.first": [[476, null]], "polars.Expr.flatten": [[477, null]], "polars.Expr.floor": [[478, null]], "polars.Expr.floordiv": [[479, null]], "polars.Expr.forward_fill": [[480, null]], "polars.Expr.from_json": [[481, null]], "polars.Expr.gather": [[482, null]], "polars.Expr.gather_every": [[483, null]], "polars.Expr.ge": [[484, null]], "polars.Expr.get": [[485, null]], "polars.Expr.gt": [[486, null]], "polars.Expr.has_nulls": [[487, null]], "polars.Expr.hash": [[488, null]], "polars.Expr.head": [[489, null]], "polars.Expr.hist": [[490, null]], "polars.Expr.implode": [[491, null]], "polars.Expr.index_of": [[492, null]], "polars.Expr.inspect": [[493, null]], "polars.Expr.interpolate": [[494, null]], "polars.Expr.interpolate_by": [[495, null]], "polars.Expr.is_between": [[496, null]], "polars.Expr.is_duplicated": [[497, null]], "polars.Expr.is_finite": [[498, null]], "polars.Expr.is_first_distinct": [[499, null]], "polars.Expr.is_in": [[500, null]], "polars.Expr.is_infinite": [[501, null]], "polars.Expr.is_last_distinct": [[502, null]], "polars.Expr.is_nan": [[503, null]], "polars.Expr.is_not_nan": [[504, null]], "polars.Expr.is_not_null": [[505, null]], "polars.Expr.is_null": [[506, null]], "polars.Expr.is_unique": [[507, null]], "polars.Expr.kurtosis": [[508, null]], "polars.Expr.last": [[509, null]], "polars.Expr.le": [[510, null]], "polars.Expr.len": [[511, null]], "polars.Expr.limit": [[512, null]], "polars.Expr.list.all": [[513, null]], "polars.Expr.list.any": [[514, null]], "polars.Expr.list.arg_max": [[515, null]], "polars.Expr.list.arg_min": [[516, null]], "polars.Expr.list.concat": [[517, null]], "polars.Expr.list.contains": [[518, null]], "polars.Expr.list.count_matches": [[519, null]], "polars.Expr.list.diff": [[520, null]], "polars.Expr.list.drop_nulls": [[521, null]], "polars.Expr.list.eval": [[522, null]], "polars.Expr.list.explode": [[523, null]], "polars.Expr.list.first": [[524, null]], "polars.Expr.list.gather": [[525, null]], "polars.Expr.list.gather_every": [[526, null]], "polars.Expr.list.get": [[527, null]], "polars.Expr.list.head": [[528, null]], "polars.Expr.list.join": [[529, null]], "polars.Expr.list.last": [[530, null]], "polars.Expr.list.len": [[531, null]], "polars.Expr.list.max": [[532, null]], "polars.Expr.list.mean": [[533, null]], "polars.Expr.list.median": [[534, null]], "polars.Expr.list.min": [[535, null]], "polars.Expr.list.n_unique": [[536, null]], "polars.Expr.list.reverse": [[537, null]], "polars.Expr.list.sample": [[538, null]], "polars.Expr.list.set_difference": [[539, null]], "polars.Expr.list.set_intersection": [[540, null]], "polars.Expr.list.set_symmetric_difference": [[541, null]], "polars.Expr.list.set_union": [[542, null]], "polars.Expr.list.shift": [[543, null]], "polars.Expr.list.slice": [[544, null]], "polars.Expr.list.sort": [[545, null]], "polars.Expr.list.std": [[546, null]], "polars.Expr.list.sum": [[547, null]], "polars.Expr.list.tail": [[548, null]], "polars.Expr.list.to_array": [[549, null]], "polars.Expr.list.to_struct": [[550, null]], "polars.Expr.list.unique": [[551, null]], "polars.Expr.list.var": [[552, null]], "polars.Expr.log": [[553, null]], "polars.Expr.log10": [[554, null]], "polars.Expr.log1p": [[555, null]], "polars.Expr.lower_bound": [[556, null]], "polars.Expr.lt": [[557, null]], "polars.Expr.map_batches": [[558, null]], "polars.Expr.map_elements": [[559, null]], "polars.Expr.max": [[560, null]], "polars.Expr.mean": [[561, null]], "polars.Expr.median": [[562, null]], "polars.Expr.meta.eq": [[563, null]], "polars.Expr.meta.has_multiple_outputs": [[564, null]], "polars.Expr.meta.is_column": [[565, null]], "polars.Expr.meta.is_column_selection": [[566, null]], "polars.Expr.meta.is_literal": [[567, null]], "polars.Expr.meta.is_regex_projection": [[568, null]], "polars.Expr.meta.ne": [[569, null]], "polars.Expr.meta.output_name": [[570, null]], "polars.Expr.meta.pop": [[571, null]], "polars.Expr.meta.root_names": [[572, null]], "polars.Expr.meta.serialize": [[573, null]], "polars.Expr.meta.show_graph": [[574, null]], "polars.Expr.meta.tree_format": [[575, null]], "polars.Expr.meta.undo_aliases": [[576, null]], "polars.Expr.meta.write_json": [[577, null]], "polars.Expr.min": [[578, null]], "polars.Expr.mod": [[579, null]], "polars.Expr.mode": [[580, null]], "polars.Expr.mul": [[581, null]], "polars.Expr.n_unique": [[582, null]], "polars.Expr.name.keep": [[583, null]], "polars.Expr.name.map": [[584, null]], "polars.Expr.name.map_fields": [[585, null]], "polars.Expr.name.prefix": [[586, null]], "polars.Expr.name.prefix_fields": [[587, null]], "polars.Expr.name.suffix": [[588, null]], "polars.Expr.name.suffix_fields": [[589, null]], "polars.Expr.name.to_lowercase": [[590, null]], "polars.Expr.name.to_uppercase": [[591, null]], "polars.Expr.nan_max": [[592, null]], "polars.Expr.nan_min": [[593, null]], "polars.Expr.ne": [[594, null]], "polars.Expr.ne_missing": [[595, null]], "polars.Expr.neg": [[596, null]], "polars.Expr.not_": [[597, null]], "polars.Expr.null_count": [[598, null]], "polars.Expr.or_": [[599, null]], "polars.Expr.over": [[600, null]], "polars.Expr.pct_change": [[601, null]], "polars.Expr.peak_max": [[602, null]], "polars.Expr.peak_min": [[603, null]], "polars.Expr.pipe": [[604, null]], "polars.Expr.pow": [[605, null]], "polars.Expr.product": [[606, null]], "polars.Expr.qcut": [[607, null]], "polars.Expr.quantile": [[608, null]], "polars.Expr.radians": [[609, null]], "polars.Expr.rank": [[610, null]], "polars.Expr.rechunk": [[611, null]], "polars.Expr.reinterpret": [[612, null]], "polars.Expr.repeat_by": [[613, null]], "polars.Expr.replace": [[614, null]], "polars.Expr.replace_strict": [[615, null]], "polars.Expr.reshape": [[616, null]], "polars.Expr.reverse": [[617, null]], "polars.Expr.rle": [[618, null]], "polars.Expr.rle_id": [[619, null]], "polars.Expr.rolling": [[620, null]], "polars.Expr.rolling_map": [[621, null]], "polars.Expr.rolling_max": [[622, null]], "polars.Expr.rolling_max_by": [[623, null]], "polars.Expr.rolling_mean": [[624, null]], "polars.Expr.rolling_mean_by": [[625, null]], "polars.Expr.rolling_median": [[626, null]], "polars.Expr.rolling_median_by": [[627, null]], "polars.Expr.rolling_min": [[628, null]], "polars.Expr.rolling_min_by": [[629, null]], "polars.Expr.rolling_quantile": [[630, null]], "polars.Expr.rolling_quantile_by": [[631, null]], "polars.Expr.rolling_skew": [[632, null]], "polars.Expr.rolling_std": [[633, null]], "polars.Expr.rolling_std_by": [[634, null]], "polars.Expr.rolling_sum": [[635, null]], "polars.Expr.rolling_sum_by": [[636, null]], "polars.Expr.rolling_var": [[637, null]], "polars.Expr.rolling_var_by": [[638, null]], "polars.Expr.round": [[639, null]], "polars.Expr.round_sig_figs": [[640, null]], "polars.Expr.sample": [[641, null]], "polars.Expr.search_sorted": [[642, null]], "polars.Expr.set_sorted": [[643, null]], "polars.Expr.shift": [[644, null]], "polars.Expr.shrink_dtype": [[645, null]], "polars.Expr.shuffle": [[646, null]], "polars.Expr.sign": [[647, null]], "polars.Expr.sin": [[648, null]], "polars.Expr.sinh": [[649, null]], "polars.Expr.skew": [[650, null]], "polars.Expr.slice": [[651, null]], "polars.Expr.sort": [[652, null]], "polars.Expr.sort_by": [[653, null]], "polars.Expr.sqrt": [[654, null]], "polars.Expr.std": [[655, null]], "polars.Expr.str.concat": [[656, null]], "polars.Expr.str.contains": [[657, null]], "polars.Expr.str.contains_any": [[658, null]], "polars.Expr.str.count_matches": [[659, null]], "polars.Expr.str.decode": [[660, null]], "polars.Expr.str.encode": [[661, null]], "polars.Expr.str.ends_with": [[662, null]], "polars.Expr.str.escape_regex": [[663, null]], "polars.Expr.str.explode": [[664, null]], "polars.Expr.str.extract": [[665, null]], "polars.Expr.str.extract_all": [[666, null]], "polars.Expr.str.extract_groups": [[667, null]], "polars.Expr.str.extract_many": [[668, null]], "polars.Expr.str.find": [[669, null]], "polars.Expr.str.find_many": [[670, null]], "polars.Expr.str.head": [[671, null]], "polars.Expr.str.join": [[672, null]], "polars.Expr.str.json_decode": [[673, null]], "polars.Expr.str.json_path_match": [[674, null]], "polars.Expr.str.len_bytes": [[675, null]], "polars.Expr.str.len_chars": [[676, null]], "polars.Expr.str.pad_end": [[677, null]], "polars.Expr.str.pad_start": [[678, null]], "polars.Expr.str.replace": [[679, null]], "polars.Expr.str.replace_all": [[680, null]], "polars.Expr.str.replace_many": [[681, null]], "polars.Expr.str.reverse": [[682, null]], "polars.Expr.str.slice": [[683, null]], "polars.Expr.str.split": [[684, null]], "polars.Expr.str.split_exact": [[685, null]], "polars.Expr.str.splitn": [[686, null]], "polars.Expr.str.starts_with": [[687, null]], "polars.Expr.str.strip_chars": [[688, null]], "polars.Expr.str.strip_chars_end": [[689, null]], "polars.Expr.str.strip_chars_start": [[690, null]], "polars.Expr.str.strip_prefix": [[691, null]], "polars.Expr.str.strip_suffix": [[692, null]], "polars.Expr.str.strptime": [[693, null]], "polars.Expr.str.tail": [[694, null]], "polars.Expr.str.to_date": [[695, null]], "polars.Expr.str.to_datetime": [[696, null]], "polars.Expr.str.to_decimal": [[697, null]], "polars.Expr.str.to_integer": [[698, null]], "polars.Expr.str.to_lowercase": [[699, null]], "polars.Expr.str.to_time": [[700, null]], "polars.Expr.str.to_titlecase": [[701, null]], "polars.Expr.str.to_uppercase": [[702, null]], "polars.Expr.str.zfill": [[703, null]], "polars.Expr.struct.field": [[704, null]], "polars.Expr.struct.json_encode": [[705, null]], "polars.Expr.struct.rename_fields": [[706, null]], "polars.Expr.struct.unnest": [[707, null]], "polars.Expr.struct.with_fields": [[708, null]], "polars.Expr.sub": [[709, null]], "polars.Expr.sum": [[710, null]], "polars.Expr.tail": [[711, null]], "polars.Expr.tan": [[712, null]], "polars.Expr.tanh": [[713, null]], "polars.Expr.to_physical": [[714, null]], "polars.Expr.top_k": [[715, null]], "polars.Expr.top_k_by": [[716, null]], "polars.Expr.truediv": [[717, null]], "polars.Expr.unique": [[718, null]], "polars.Expr.unique_counts": [[719, null]], "polars.Expr.upper_bound": [[720, null]], "polars.Expr.value_counts": [[721, null]], "polars.Expr.var": [[722, null]], "polars.Expr.where": [[723, null]], "polars.Expr.xor": [[724, null]], "polars.LazyFrame.approx_n_unique": [[823, null]], "polars.LazyFrame.bottom_k": [[824, null]], "polars.LazyFrame.cache": [[825, null]], "polars.LazyFrame.cast": [[826, null]], "polars.LazyFrame.clear": [[827, null]], "polars.LazyFrame.clone": [[828, null]], "polars.LazyFrame.collect": [[829, null]], "polars.LazyFrame.collect_async": [[830, null]], "polars.LazyFrame.collect_schema": [[831, null]], "polars.LazyFrame.columns": [[832, null]], "polars.LazyFrame.count": [[833, null]], "polars.LazyFrame.describe": [[834, null]], "polars.LazyFrame.deserialize": [[835, null]], "polars.LazyFrame.drop": [[836, null]], "polars.LazyFrame.drop_nans": [[837, null]], "polars.LazyFrame.drop_nulls": [[838, null]], "polars.LazyFrame.dtypes": [[839, null]], "polars.LazyFrame.explain": [[840, null]], "polars.LazyFrame.explode": [[841, null]], "polars.LazyFrame.fill_nan": [[842, null]], "polars.LazyFrame.fill_null": [[843, null]], "polars.LazyFrame.filter": [[844, null]], "polars.LazyFrame.first": [[845, null]], "polars.LazyFrame.gather_every": [[846, null]], "polars.LazyFrame.group_by": [[847, null]], "polars.LazyFrame.group_by_dynamic": [[848, null]], "polars.LazyFrame.head": [[849, null]], "polars.LazyFrame.inspect": [[850, null]], "polars.LazyFrame.interpolate": [[851, null]], "polars.LazyFrame.join": [[852, null]], "polars.LazyFrame.join_asof": [[853, null]], "polars.LazyFrame.join_where": [[854, null]], "polars.LazyFrame.last": [[855, null]], "polars.LazyFrame.lazy": [[856, null]], "polars.LazyFrame.limit": [[857, null]], "polars.LazyFrame.map_batches": [[858, null]], "polars.LazyFrame.max": [[859, null]], "polars.LazyFrame.mean": [[860, null]], "polars.LazyFrame.median": [[861, null]], "polars.LazyFrame.melt": [[862, null]], "polars.LazyFrame.merge_sorted": [[863, null]], "polars.LazyFrame.min": [[864, null]], "polars.LazyFrame.null_count": [[865, null]], "polars.LazyFrame.pipe": [[866, null]], "polars.LazyFrame.profile": [[867, null]], "polars.LazyFrame.quantile": [[868, null]], "polars.LazyFrame.rename": [[869, null]], "polars.LazyFrame.reverse": [[870, null]], "polars.LazyFrame.rolling": [[871, null]], "polars.LazyFrame.schema": [[872, null]], "polars.LazyFrame.select": [[873, null]], "polars.LazyFrame.select_seq": [[874, null]], "polars.LazyFrame.serialize": [[875, null]], "polars.LazyFrame.set_sorted": [[876, null]], "polars.LazyFrame.shift": [[877, null]], "polars.LazyFrame.show_graph": [[878, null]], "polars.LazyFrame.sink_csv": [[46, null]], "polars.LazyFrame.sink_ipc": [[47, null]], "polars.LazyFrame.sink_ndjson": [[48, null]], "polars.LazyFrame.sink_parquet": [[49, null]], "polars.LazyFrame.slice": [[879, null]], "polars.LazyFrame.sort": [[880, null]], "polars.LazyFrame.sql": [[881, null]], "polars.LazyFrame.std": [[882, null]], "polars.LazyFrame.sum": [[883, null]], "polars.LazyFrame.tail": [[884, null]], "polars.LazyFrame.top_k": [[885, null]], "polars.LazyFrame.unique": [[886, null]], "polars.LazyFrame.unnest": [[887, null]], "polars.LazyFrame.unpivot": [[888, null]], "polars.LazyFrame.update": [[889, null]], "polars.LazyFrame.var": [[890, null]], "polars.LazyFrame.width": [[891, null]], "polars.LazyFrame.with_columns": [[892, null]], "polars.LazyFrame.with_columns_seq": [[893, null]], "polars.LazyFrame.with_context": [[894, null]], "polars.LazyFrame.with_row_count": [[895, null]], "polars.LazyFrame.with_row_index": [[896, null]], "polars.SQLContext.execute": [[1325, null]], "polars.SQLContext.execute_global": [[1326, null]], "polars.SQLContext.register": [[1327, null]], "polars.SQLContext.register_globals": [[1328, null]], "polars.SQLContext.register_many": [[1329, null]], "polars.SQLContext.tables": [[1330, null]], "polars.SQLContext.unregister": [[1331, null]], "polars.Series.__array__": [[930, null]], "polars.Series.__arrow_c_stream__": [[931, null]], "polars.Series.__getitem__": [[932, null]], "polars.Series.abs": [[933, null]], "polars.Series.alias": [[934, null]], "polars.Series.all": [[935, null]], "polars.Series.any": [[936, null]], "polars.Series.append": [[937, null]], "polars.Series.approx_n_unique": [[938, null]], "polars.Series.arccos": [[939, null]], "polars.Series.arccosh": [[940, null]], "polars.Series.arcsin": [[941, null]], "polars.Series.arcsinh": [[942, null]], "polars.Series.arctan": [[943, null]], "polars.Series.arctanh": [[944, null]], "polars.Series.arg_max": [[945, null]], "polars.Series.arg_min": [[946, null]], "polars.Series.arg_sort": [[947, null]], "polars.Series.arg_true": [[948, null]], "polars.Series.arg_unique": [[949, null]], "polars.Series.arr.all": [[950, null]], "polars.Series.arr.any": [[951, null]], "polars.Series.arr.arg_max": [[952, null]], "polars.Series.arr.arg_min": [[953, null]], "polars.Series.arr.contains": [[954, null]], "polars.Series.arr.count_matches": [[955, null]], "polars.Series.arr.explode": [[956, null]], "polars.Series.arr.first": [[957, null]], "polars.Series.arr.get": [[958, null]], "polars.Series.arr.join": [[959, null]], "polars.Series.arr.last": [[960, null]], "polars.Series.arr.max": [[961, null]], "polars.Series.arr.median": [[962, null]], "polars.Series.arr.min": [[963, null]], "polars.Series.arr.n_unique": [[964, null]], "polars.Series.arr.reverse": [[965, null]], "polars.Series.arr.shift": [[966, null]], "polars.Series.arr.sort": [[967, null]], "polars.Series.arr.std": [[968, null]], "polars.Series.arr.sum": [[969, null]], "polars.Series.arr.to_list": [[970, null]], "polars.Series.arr.to_struct": [[971, null]], "polars.Series.arr.unique": [[972, null]], "polars.Series.arr.var": [[973, null]], "polars.Series.bin.contains": [[974, null]], "polars.Series.bin.decode": [[975, null]], "polars.Series.bin.encode": [[976, null]], "polars.Series.bin.ends_with": [[977, null]], "polars.Series.bin.reinterpret": [[978, null]], "polars.Series.bin.size": [[979, null]], "polars.Series.bin.starts_with": [[980, null]], "polars.Series.bitwise_and": [[981, null]], "polars.Series.bitwise_count_ones": [[982, null]], "polars.Series.bitwise_count_zeros": [[983, null]], "polars.Series.bitwise_leading_ones": [[984, null]], "polars.Series.bitwise_leading_zeros": [[985, null]], "polars.Series.bitwise_or": [[986, null]], "polars.Series.bitwise_trailing_ones": [[987, null]], "polars.Series.bitwise_trailing_zeros": [[988, null]], "polars.Series.bitwise_xor": [[989, null]], "polars.Series.bottom_k": [[990, null]], "polars.Series.cast": [[991, null]], "polars.Series.cat.ends_with": [[992, null]], "polars.Series.cat.get_categories": [[993, null]], "polars.Series.cat.is_local": [[994, null]], "polars.Series.cat.len_bytes": [[995, null]], "polars.Series.cat.len_chars": [[996, null]], "polars.Series.cat.starts_with": [[997, null]], "polars.Series.cat.to_local": [[998, null]], "polars.Series.cat.uses_lexical_ordering": [[999, null]], "polars.Series.cbrt": [[1000, null]], "polars.Series.ceil": [[1001, null]], "polars.Series.chunk_lengths": [[1002, null]], "polars.Series.clear": [[1003, null]], "polars.Series.clip": [[1004, null]], "polars.Series.clone": [[1005, null]], "polars.Series.cos": [[1006, null]], "polars.Series.cosh": [[1007, null]], "polars.Series.cot": [[1008, null]], "polars.Series.count": [[1009, null]], "polars.Series.cum_count": [[1010, null]], "polars.Series.cum_max": [[1011, null]], "polars.Series.cum_min": [[1012, null]], "polars.Series.cum_prod": [[1013, null]], "polars.Series.cum_sum": [[1014, null]], "polars.Series.cumulative_eval": [[1015, null]], "polars.Series.cut": [[1016, null]], "polars.Series.describe": [[1017, null]], "polars.Series.diff": [[1018, null]], "polars.Series.dot": [[1019, null]], "polars.Series.drop_nans": [[1020, null]], "polars.Series.drop_nulls": [[1021, null]], "polars.Series.dt.add_business_days": [[1022, null]], "polars.Series.dt.base_utc_offset": [[1023, null]], "polars.Series.dt.cast_time_unit": [[1024, null]], "polars.Series.dt.century": [[1025, null]], "polars.Series.dt.combine": [[1026, null]], "polars.Series.dt.convert_time_zone": [[1027, null]], "polars.Series.dt.date": [[1028, null]], "polars.Series.dt.datetime": [[1029, null]], "polars.Series.dt.day": [[1030, null]], "polars.Series.dt.dst_offset": [[1031, null]], "polars.Series.dt.epoch": [[1032, null]], "polars.Series.dt.hour": [[1033, null]], "polars.Series.dt.is_leap_year": [[1034, null]], "polars.Series.dt.iso_year": [[1035, null]], "polars.Series.dt.max": [[1036, null]], "polars.Series.dt.mean": [[1037, null]], "polars.Series.dt.median": [[1038, null]], "polars.Series.dt.microsecond": [[1039, null]], "polars.Series.dt.millennium": [[1040, null]], "polars.Series.dt.millisecond": [[1041, null]], "polars.Series.dt.min": [[1042, null]], "polars.Series.dt.minute": [[1043, null]], "polars.Series.dt.month": [[1044, null]], "polars.Series.dt.month_end": [[1045, null]], "polars.Series.dt.month_start": [[1046, null]], "polars.Series.dt.nanosecond": [[1047, null]], "polars.Series.dt.offset_by": [[1048, null]], "polars.Series.dt.ordinal_day": [[1049, null]], "polars.Series.dt.quarter": [[1050, null]], "polars.Series.dt.replace": [[1051, null]], "polars.Series.dt.replace_time_zone": [[1052, null]], "polars.Series.dt.round": [[1053, null]], "polars.Series.dt.second": [[1054, null]], "polars.Series.dt.strftime": [[1055, null]], "polars.Series.dt.time": [[1056, null]], "polars.Series.dt.timestamp": [[1057, null]], "polars.Series.dt.to_string": [[1058, null]], "polars.Series.dt.total_days": [[1059, null]], "polars.Series.dt.total_hours": [[1060, null]], "polars.Series.dt.total_microseconds": [[1061, null]], "polars.Series.dt.total_milliseconds": [[1062, null]], "polars.Series.dt.total_minutes": [[1063, null]], "polars.Series.dt.total_nanoseconds": [[1064, null]], "polars.Series.dt.total_seconds": [[1065, null]], "polars.Series.dt.truncate": [[1066, null]], "polars.Series.dt.week": [[1067, null]], "polars.Series.dt.weekday": [[1068, null]], "polars.Series.dt.with_time_unit": [[1069, null]], "polars.Series.dt.year": [[1070, null]], "polars.Series.dtype": [[1071, null]], "polars.Series.entropy": [[1072, null]], "polars.Series.eq": [[1073, null]], "polars.Series.eq_missing": [[1074, null]], "polars.Series.equals": [[1075, null]], "polars.Series.estimated_size": [[1076, null]], "polars.Series.ewm_mean": [[1077, null]], "polars.Series.ewm_mean_by": [[1078, null]], "polars.Series.ewm_std": [[1079, null]], "polars.Series.ewm_var": [[1080, null]], "polars.Series.exp": [[1081, null]], "polars.Series.explode": [[1082, null]], "polars.Series.extend": [[1083, null]], "polars.Series.extend_constant": [[1084, null]], "polars.Series.fill_nan": [[1085, null]], "polars.Series.fill_null": [[1086, null]], "polars.Series.filter": [[1087, null]], "polars.Series.first": [[1088, null]], "polars.Series.flags": [[1089, null]], "polars.Series.floor": [[1090, null]], "polars.Series.gather": [[1091, null]], "polars.Series.gather_every": [[1092, null]], "polars.Series.ge": [[1093, null]], "polars.Series.get_chunks": [[1094, null]], "polars.Series.gt": [[1095, null]], "polars.Series.has_nulls": [[1096, null]], "polars.Series.has_validity": [[1097, null]], "polars.Series.hash": [[1098, null]], "polars.Series.head": [[1099, null]], "polars.Series.hist": [[1100, null]], "polars.Series.implode": [[1101, null]], "polars.Series.index_of": [[1102, null]], "polars.Series.interpolate": [[1103, null]], "polars.Series.interpolate_by": [[1104, null]], "polars.Series.is_between": [[1105, null]], "polars.Series.is_duplicated": [[1106, null]], "polars.Series.is_empty": [[1107, null]], "polars.Series.is_finite": [[1108, null]], "polars.Series.is_first_distinct": [[1109, null]], "polars.Series.is_in": [[1110, null]], "polars.Series.is_infinite": [[1111, null]], "polars.Series.is_last_distinct": [[1112, null]], "polars.Series.is_nan": [[1113, null]], "polars.Series.is_not_nan": [[1114, null]], "polars.Series.is_not_null": [[1115, null]], "polars.Series.is_null": [[1116, null]], "polars.Series.is_sorted": [[1117, null]], "polars.Series.is_unique": [[1118, null]], "polars.Series.item": [[1119, null]], "polars.Series.kurtosis": [[1120, null]], "polars.Series.last": [[1121, null]], "polars.Series.le": [[1122, null]], "polars.Series.len": [[1123, null]], "polars.Series.limit": [[1124, null]], "polars.Series.list.all": [[1125, null]], "polars.Series.list.any": [[1126, null]], "polars.Series.list.arg_max": [[1127, null]], "polars.Series.list.arg_min": [[1128, null]], "polars.Series.list.concat": [[1129, null]], "polars.Series.list.contains": [[1130, null]], "polars.Series.list.count_matches": [[1131, null]], "polars.Series.list.diff": [[1132, null]], "polars.Series.list.drop_nulls": [[1133, null]], "polars.Series.list.eval": [[1134, null]], "polars.Series.list.explode": [[1135, null]], "polars.Series.list.first": [[1136, null]], "polars.Series.list.gather": [[1137, null]], "polars.Series.list.gather_every": [[1138, null]], "polars.Series.list.get": [[1139, null]], "polars.Series.list.head": [[1140, null]], "polars.Series.list.join": [[1141, null]], "polars.Series.list.last": [[1142, null]], "polars.Series.list.len": [[1143, null]], "polars.Series.list.max": [[1144, null]], "polars.Series.list.mean": [[1145, null]], "polars.Series.list.median": [[1146, null]], "polars.Series.list.min": [[1147, null]], "polars.Series.list.n_unique": [[1148, null]], "polars.Series.list.reverse": [[1149, null]], "polars.Series.list.sample": [[1150, null]], "polars.Series.list.set_difference": [[1151, null]], "polars.Series.list.set_intersection": [[1152, null]], "polars.Series.list.set_symmetric_difference": [[1153, null]], "polars.Series.list.set_union": [[1154, null]], "polars.Series.list.shift": [[1155, null]], "polars.Series.list.slice": [[1156, null]], "polars.Series.list.sort": [[1157, null]], "polars.Series.list.std": [[1158, null]], "polars.Series.list.sum": [[1159, null]], "polars.Series.list.tail": [[1160, null]], "polars.Series.list.to_array": [[1161, null]], "polars.Series.list.to_struct": [[1162, null]], "polars.Series.list.unique": [[1163, null]], "polars.Series.list.var": [[1164, null]], "polars.Series.log": [[1165, null]], "polars.Series.log10": [[1166, null]], "polars.Series.log1p": [[1167, null]], "polars.Series.lower_bound": [[1168, null]], "polars.Series.lt": [[1169, null]], "polars.Series.map_elements": [[1170, null]], "polars.Series.max": [[1171, null]], "polars.Series.mean": [[1172, null]], "polars.Series.median": [[1173, null]], "polars.Series.min": [[1174, null]], "polars.Series.mode": [[1175, null]], "polars.Series.n_chunks": [[1176, null]], "polars.Series.n_unique": [[1177, null]], "polars.Series.name": [[1178, null]], "polars.Series.nan_max": [[1179, null]], "polars.Series.nan_min": [[1180, null]], "polars.Series.ne": [[1181, null]], "polars.Series.ne_missing": [[1182, null]], "polars.Series.new_from_index": [[1183, null]], "polars.Series.not_": [[1184, null]], "polars.Series.null_count": [[1185, null]], "polars.Series.pct_change": [[1186, null]], "polars.Series.peak_max": [[1187, null]], "polars.Series.peak_min": [[1188, null]], "polars.Series.pow": [[1189, null]], "polars.Series.product": [[1190, null]], "polars.Series.qcut": [[1191, null]], "polars.Series.quantile": [[1192, null]], "polars.Series.rank": [[1193, null]], "polars.Series.rechunk": [[1194, null]], "polars.Series.reinterpret": [[1195, null]], "polars.Series.rename": [[1196, null]], "polars.Series.replace": [[1197, null]], "polars.Series.replace_strict": [[1198, null]], "polars.Series.reshape": [[1199, null]], "polars.Series.reverse": [[1200, null]], "polars.Series.rle": [[1201, null]], "polars.Series.rle_id": [[1202, null]], "polars.Series.rolling_map": [[1203, null]], "polars.Series.rolling_max": [[1204, null]], "polars.Series.rolling_mean": [[1205, null]], "polars.Series.rolling_median": [[1206, null]], "polars.Series.rolling_min": [[1207, null]], "polars.Series.rolling_quantile": [[1208, null]], "polars.Series.rolling_skew": [[1209, null]], "polars.Series.rolling_std": [[1210, null]], "polars.Series.rolling_sum": [[1211, null]], "polars.Series.rolling_var": [[1212, null]], "polars.Series.round": [[1213, null]], "polars.Series.round_sig_figs": [[1214, null]], "polars.Series.sample": [[1215, null]], "polars.Series.scatter": [[1216, null]], "polars.Series.search_sorted": [[1217, null]], "polars.Series.set": [[1218, null]], "polars.Series.set_sorted": [[1219, null]], "polars.Series.shape": [[1220, null]], "polars.Series.shift": [[1221, null]], "polars.Series.shrink_dtype": [[1222, null]], "polars.Series.shrink_to_fit": [[1223, null]], "polars.Series.shuffle": [[1224, null]], "polars.Series.sign": [[1225, null]], "polars.Series.sin": [[1226, null]], "polars.Series.sinh": [[1227, null]], "polars.Series.skew": [[1228, null]], "polars.Series.slice": [[1229, null]], "polars.Series.sort": [[1230, null]], "polars.Series.sqrt": [[1231, null]], "polars.Series.std": [[1232, null]], "polars.Series.str.concat": [[1233, null]], "polars.Series.str.contains": [[1234, null]], "polars.Series.str.contains_any": [[1235, null]], "polars.Series.str.count_matches": [[1236, null]], "polars.Series.str.decode": [[1237, null]], "polars.Series.str.encode": [[1238, null]], "polars.Series.str.ends_with": [[1239, null]], "polars.Series.str.escape_regex": [[1240, null]], "polars.Series.str.explode": [[1241, null]], "polars.Series.str.extract": [[1242, null]], "polars.Series.str.extract_all": [[1243, null]], "polars.Series.str.extract_groups": [[1244, null]], "polars.Series.str.extract_many": [[1245, null]], "polars.Series.str.find": [[1246, null]], "polars.Series.str.find_many": [[1247, null]], "polars.Series.str.head": [[1248, null]], "polars.Series.str.join": [[1249, null]], "polars.Series.str.json_decode": [[1250, null]], "polars.Series.str.json_path_match": [[1251, null]], "polars.Series.str.len_bytes": [[1252, null]], "polars.Series.str.len_chars": [[1253, null]], "polars.Series.str.pad_end": [[1254, null]], "polars.Series.str.pad_start": [[1255, null]], "polars.Series.str.replace": [[1256, null]], "polars.Series.str.replace_all": [[1257, null]], "polars.Series.str.replace_many": [[1258, null]], "polars.Series.str.reverse": [[1259, null]], "polars.Series.str.slice": [[1260, null]], "polars.Series.str.split": [[1261, null]], "polars.Series.str.split_exact": [[1262, null]], "polars.Series.str.splitn": [[1263, null]], "polars.Series.str.starts_with": [[1264, null]], "polars.Series.str.strip_chars": [[1265, null]], "polars.Series.str.strip_chars_end": [[1266, null]], "polars.Series.str.strip_chars_start": [[1267, null]], "polars.Series.str.strip_prefix": [[1268, null]], "polars.Series.str.strip_suffix": [[1269, null]], "polars.Series.str.strptime": [[1270, null]], "polars.Series.str.tail": [[1271, null]], "polars.Series.str.to_date": [[1272, null]], "polars.Series.str.to_datetime": [[1273, null]], "polars.Series.str.to_decimal": [[1274, null]], "polars.Series.str.to_integer": [[1275, null]], "polars.Series.str.to_lowercase": [[1276, null]], "polars.Series.str.to_time": [[1277, null]], "polars.Series.str.to_titlecase": [[1278, null]], "polars.Series.str.to_uppercase": [[1279, null]], "polars.Series.str.zfill": [[1280, null]], "polars.Series.struct.field": [[1281, null]], "polars.Series.struct.fields": [[1282, null]], "polars.Series.struct.json_encode": [[1283, null]], "polars.Series.struct.rename_fields": [[1284, null]], "polars.Series.struct.schema": [[1285, null]], "polars.Series.struct.unnest": [[1286, null]], "polars.Series.sum": [[1287, null]], "polars.Series.tail": [[1288, null]], "polars.Series.tan": [[1289, null]], "polars.Series.tanh": [[1290, null]], "polars.Series.to_arrow": [[1291, null]], "polars.Series.to_dummies": [[1292, null]], "polars.Series.to_frame": [[1293, null]], "polars.Series.to_init_repr": [[1294, null]], "polars.Series.to_jax": [[1295, null]], "polars.Series.to_list": [[1296, null]], "polars.Series.to_numpy": [[1297, null]], "polars.Series.to_pandas": [[1298, null]], "polars.Series.to_physical": [[1299, null]], "polars.Series.to_torch": [[1300, null]], "polars.Series.top_k": [[1301, null]], "polars.Series.unique": [[1302, null]], "polars.Series.unique_counts": [[1303, null]], "polars.Series.upper_bound": [[1304, null]], "polars.Series.value_counts": [[1305, null]], "polars.Series.var": [[1306, null]], "polars.Series.zip_with": [[1307, null]], "polars.StringCache": [[50, null]], "polars.align_frames": [[51, null]], "polars.all": [[725, null]], "polars.all_horizontal": [[726, null]], "polars.any": [[727, null]], "polars.any_horizontal": [[728, null]], "polars.api.register_dataframe_namespace": [[52, null]], "polars.api.register_expr_namespace": [[53, null]], "polars.api.register_lazyframe_namespace": [[54, null]], "polars.api.register_series_namespace": [[55, null]], "polars.approx_n_unique": [[729, null]], "polars.arange": [[730, null]], "polars.arctan2": [[731, null]], "polars.arctan2d": [[732, null]], "polars.arg_sort_by": [[733, null]], "polars.arg_where": [[734, null]], "polars.build_info": [[56, null]], "polars.business_day_count": [[735, null]], "polars.coalesce": [[736, null]], "polars.col": [[804, null]], "polars.collect_all": [[57, null]], "polars.collect_all_async": [[58, null]], "polars.concat": [[59, null]], "polars.concat_arr": [[737, null]], "polars.concat_list": [[738, null]], "polars.concat_str": [[739, null]], "polars.corr": [[740, null]], "polars.count": [[741, null]], "polars.cov": [[742, null]], "polars.cum_count": [[743, null]], "polars.cum_fold": [[744, null]], "polars.cum_reduce": [[745, null]], "polars.cum_sum": [[746, null]], "polars.cum_sum_horizontal": [[747, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[298, null]], "polars.dataframe.group_by.GroupBy.agg": [[299, null]], "polars.dataframe.group_by.GroupBy.all": [[300, null]], "polars.dataframe.group_by.GroupBy.count": [[301, null]], "polars.dataframe.group_by.GroupBy.first": [[302, null]], "polars.dataframe.group_by.GroupBy.head": [[303, null]], "polars.dataframe.group_by.GroupBy.last": [[304, null]], "polars.dataframe.group_by.GroupBy.len": [[305, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[306, null]], "polars.dataframe.group_by.GroupBy.max": [[307, null]], "polars.dataframe.group_by.GroupBy.mean": [[308, null]], "polars.dataframe.group_by.GroupBy.median": [[309, null]], "polars.dataframe.group_by.GroupBy.min": [[310, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[311, null]], "polars.dataframe.group_by.GroupBy.quantile": [[312, null]], "polars.dataframe.group_by.GroupBy.sum": [[313, null]], "polars.dataframe.group_by.GroupBy.tail": [[314, null]], "polars.datatypes.Array": [[60, null]], "polars.datatypes.Binary": [[61, null]], "polars.datatypes.Boolean": [[62, null]], "polars.datatypes.Categorical": [[63, null]], "polars.datatypes.DataType": [[64, null]], "polars.datatypes.Date": [[65, null]], "polars.datatypes.Datetime": [[66, null]], "polars.datatypes.Decimal": [[67, null]], "polars.datatypes.Duration": [[68, null]], "polars.datatypes.Enum": [[69, null]], "polars.datatypes.Float32": [[70, null]], "polars.datatypes.Float64": [[71, null]], "polars.datatypes.Int128": [[72, null]], "polars.datatypes.Int16": [[73, null]], "polars.datatypes.Int32": [[74, null]], "polars.datatypes.Int64": [[75, null]], "polars.datatypes.Int8": [[76, null]], "polars.datatypes.List": [[77, null]], "polars.datatypes.Null": [[78, null]], "polars.datatypes.Object": [[79, null]], "polars.datatypes.String": [[80, null]], "polars.datatypes.Struct": [[81, null]], "polars.datatypes.Time": [[82, null]], "polars.datatypes.UInt16": [[83, null]], "polars.datatypes.UInt32": [[84, null]], "polars.datatypes.UInt64": [[85, null]], "polars.datatypes.UInt8": [[86, null]], "polars.datatypes.Unknown": [[87, null]], "polars.datatypes.Utf8": [[88, null]], "polars.date": [[748, null]], "polars.date_range": [[749, null]], "polars.date_ranges": [[750, null]], "polars.datetime": [[751, null]], "polars.datetime_range": [[752, null]], "polars.datetime_ranges": [[753, null]], "polars.disable_string_cache": [[89, null]], "polars.duration": [[754, null]], "polars.element": [[755, null]], "polars.enable_string_cache": [[90, null]], "polars.escape_regex": [[91, null]], "polars.exceptions.CategoricalRemappingWarning": [[92, null]], "polars.exceptions.ChronoFormatWarning": [[93, null]], "polars.exceptions.ColumnNotFoundError": [[94, null]], "polars.exceptions.ComputeError": [[95, null]], "polars.exceptions.CustomUFuncWarning": [[96, null]], "polars.exceptions.DataOrientationWarning": [[97, null]], "polars.exceptions.DuplicateError": [[98, null]], "polars.exceptions.InvalidOperationError": [[99, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[100, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[101, null]], "polars.exceptions.NoDataError": [[102, null]], "polars.exceptions.NoRowsReturnedError": [[103, null]], "polars.exceptions.OutOfBoundsError": [[104, null]], "polars.exceptions.PanicException": [[105, null]], "polars.exceptions.ParameterCollisionError": [[106, null]], "polars.exceptions.PerformanceWarning": [[107, null]], "polars.exceptions.PolarsError": [[108, null]], "polars.exceptions.PolarsInefficientMapWarning": [[109, null]], "polars.exceptions.PolarsWarning": [[110, null]], "polars.exceptions.RowsError": [[111, null]], "polars.exceptions.SQLInterfaceError": [[112, null]], "polars.exceptions.SQLSyntaxError": [[113, null]], "polars.exceptions.SchemaError": [[114, null]], "polars.exceptions.SchemaFieldNotFoundError": [[115, null]], "polars.exceptions.ShapeError": [[116, null]], "polars.exceptions.StringCacheMismatchError": [[117, null]], "polars.exceptions.StructFieldNotFoundError": [[118, null]], "polars.exceptions.TooManyRowsReturnedError": [[119, null]], "polars.exceptions.UnstableWarning": [[120, null]], "polars.exceptions.UnsuitableSQLError": [[121, null]], "polars.exclude": [[756, null]], "polars.first": [[757, null]], "polars.fold": [[758, null]], "polars.format": [[759, null]], "polars.from_arrow": [[122, null]], "polars.from_dataframe": [[123, null]], "polars.from_dict": [[124, null]], "polars.from_dicts": [[125, null]], "polars.from_epoch": [[760, null]], "polars.from_numpy": [[126, null]], "polars.from_pandas": [[127, null]], "polars.from_records": [[128, null]], "polars.from_repr": [[129, null]], "polars.get_index_type": [[130, null]], "polars.groups": [[761, null]], "polars.head": [[762, null]], "polars.implode": [[763, null]], "polars.int_range": [[764, null]], "polars.int_ranges": [[765, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[131, null]], "polars.json_normalize": [[132, null]], "polars.last": [[766, null]], "polars.lazyframe.engine_config.GPUEngine": [[897, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[898, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[899, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[900, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[901, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[902, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[903, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[904, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[905, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[906, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[907, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[908, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[909, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[910, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[911, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[912, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[913, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[914, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[915, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[916, null]], "polars.len": [[767, null]], "polars.lit": [[768, null]], "polars.map_batches": [[769, null]], "polars.map_groups": [[770, null]], "polars.max": [[771, null]], "polars.max_horizontal": [[772, null]], "polars.mean": [[773, null]], "polars.mean_horizontal": [[774, null]], "polars.median": [[775, null]], "polars.min": [[776, null]], "polars.min_horizontal": [[777, null]], "polars.n_unique": [[778, null]], "polars.nth": [[779, null]], "polars.ones": [[780, null]], "polars.quantile": [[781, null]], "polars.read_avro": [[133, null]], "polars.read_clipboard": [[134, null]], "polars.read_csv": [[135, null]], "polars.read_csv_batched": [[136, null]], "polars.read_database": [[137, null]], "polars.read_database_uri": [[138, null]], "polars.read_delta": [[139, null]], "polars.read_excel": [[140, null]], "polars.read_ipc": [[141, null]], "polars.read_ipc_schema": [[142, null]], "polars.read_ipc_stream": [[143, null]], "polars.read_json": [[144, null]], "polars.read_ndjson": [[145, null]], "polars.read_ods": [[146, null]], "polars.read_parquet": [[147, null]], "polars.read_parquet_schema": [[148, null]], "polars.reduce": [[782, null]], "polars.repeat": [[783, null]], "polars.rolling_corr": [[784, null]], "polars.rolling_cov": [[785, null]], "polars.scan_csv": [[149, null]], "polars.scan_delta": [[150, null]], "polars.scan_iceberg": [[151, null]], "polars.scan_ipc": [[152, null]], "polars.scan_ndjson": [[153, null]], "polars.scan_parquet": [[154, null]], "polars.scan_pyarrow_dataset": [[155, null]], "polars.select": [[786, null]], "polars.set_random_seed": [[156, null]], "polars.show_versions": [[157, null]], "polars.sql": [[787, null]], "polars.sql_expr": [[788, null]], "polars.std": [[789, null]], "polars.struct": [[790, null]], "polars.sum": [[791, null]], "polars.sum_horizontal": [[792, null]], "polars.tail": [[793, null]], "polars.testing.assert_frame_equal": [[158, null]], "polars.testing.assert_frame_not_equal": [[159, null]], "polars.testing.assert_series_equal": [[160, null]], "polars.testing.assert_series_not_equal": [[161, null]], "polars.testing.parametric.column": [[162, null]], "polars.testing.parametric.columns": [[163, null]], "polars.testing.parametric.create_list_strategy": [[164, null]], "polars.testing.parametric.dataframes": [[165, null]], "polars.testing.parametric.dtypes": [[166, null]], "polars.testing.parametric.lists": [[167, null]], "polars.testing.parametric.load_profile": [[168, null]], "polars.testing.parametric.series": [[169, null]], "polars.testing.parametric.set_profile": [[170, null]], "polars.thread_pool_size": [[171, null]], "polars.threadpool_size": [[172, null]], "polars.time": [[794, null]], "polars.time_range": [[795, null]], "polars.time_ranges": [[796, null]], "polars.using_string_cache": [[173, null]], "polars.var": [[797, null]], "polars.when": [[798, null]], "polars.zeros": [[799, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[176, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[930, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[177, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[931, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[178, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1344, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1344, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[179, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[932, "polars.Series.__getitem__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[33, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[34, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[60, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[61, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[62, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[63, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[64, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[65, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[66, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[67, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[68, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[69, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[70, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[71, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[72, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[73, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[74, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[75, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[76, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[77, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[78, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[79, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[80, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[81, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[82, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[83, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[84, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[85, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[86, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[87, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[897, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1344, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[50, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[162, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[328, "polars.Expr.abs", false]], "abs() (polars.series method)": [[933, "polars.Series.abs", false]], "add() (polars.expr method)": [[329, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[417, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1022, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[898, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[330, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[331, "polars.Expr.alias", false]], "alias() (polars.series method)": [[934, "polars.Series.alias", false]], "align_frames() (in module polars)": [[51, "polars.align_frames", false]], "all() (in module polars)": [[725, "polars.all", false]], "all() (in module polars.selectors)": [[928, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[332, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[348, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[513, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[899, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[935, "polars.Series.all", false]], "all() (polars.series.arr method)": [[950, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1125, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[726, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[928, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[928, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[333, "polars.Expr.and_", false]], "any() (in module polars)": [[727, "polars.any", false]], "any() (polars.expr method)": [[334, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[349, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[514, "polars.Expr.list.any", false]], "any() (polars.series method)": [[936, "polars.Series.any", false]], "any() (polars.series.arr method)": [[951, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1126, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[728, "polars.any_horizontal", false]], "append() (polars.expr method)": [[335, "polars.Expr.append", false]], "append() (polars.series method)": [[937, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[729, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[180, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[336, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[823, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[938, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[730, "polars.arange", false]], "arccos() (polars.expr method)": [[337, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[939, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[338, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[940, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[339, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[941, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[340, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[942, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[341, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[943, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[731, "polars.arctan2", false]], "arctan2d() (in module polars)": [[732, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[342, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[944, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[343, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[350, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[515, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[945, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[952, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1127, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[344, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[351, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[516, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[946, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[953, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1128, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[345, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[947, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[733, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[346, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[948, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[347, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[949, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[734, "polars.arg_where", false]], "array (class in polars.datatypes)": [[60, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[158, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[159, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[160, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[161, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[372, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[418, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1023, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[61, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[928, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[380, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[981, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[381, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[982, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[382, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[983, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[383, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[984, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[384, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[985, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[385, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[986, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[386, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[987, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[387, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[988, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[388, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[989, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[62, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[928, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[181, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[389, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[824, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[990, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[390, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[56, "polars.build_info", false]], "business_day_count() (in module polars)": [[735, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[928, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[928, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[928, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[825, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[914, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[182, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[391, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[826, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[991, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[419, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1024, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[63, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[928, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[92, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[397, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1000, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[398, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1001, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[420, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1025, "polars.Series.dt.century", false]], "chronoformatwarning": [[93, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1002, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[183, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[827, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1003, "polars.Series.clear", false]], "clip() (polars.expr method)": [[399, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1004, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[184, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[828, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1005, "polars.Series.clone", false]], "coalesce() (in module polars)": [[736, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[829, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[57, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[58, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[830, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[185, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[831, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[162, "polars.testing.parametric.column", false]], "columnnotfounderror": [[94, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[186, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[832, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[421, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1026, "polars.Series.dt.combine", false]], "computeerror": [[95, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[59, "polars.concat", false]], "concat() (polars.expr.list method)": [[517, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[656, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1129, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1233, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[737, "polars.concat_arr", false]], "concat_list() (in module polars)": [[738, "polars.concat_list", false]], "concat_str() (in module polars)": [[739, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[928, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[352, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[373, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[518, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[657, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[954, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[974, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1130, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1234, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[658, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1235, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[422, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1027, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[740, "polars.corr", false]], "corr() (polars.dataframe method)": [[187, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[400, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1006, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[401, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1007, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[402, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1008, "polars.Series.cot", false]], "count() (in module polars)": [[741, "polars.count", false]], "count() (polars.dataframe method)": [[188, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[403, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[833, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[900, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1009, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[353, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[519, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[659, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[955, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1131, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1236, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[742, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[33, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[34, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[743, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[404, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1010, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[744, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[405, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1011, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[406, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1012, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[407, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1013, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[745, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[746, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[408, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1014, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[747, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[409, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1015, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[96, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[410, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1016, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[165, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[97, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[64, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[65, "polars.datatypes.Date", false]], "date() (in module polars)": [[748, "polars.date", false]], "date() (in module polars.selectors)": [[928, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[423, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1028, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[749, "polars.date_range", false]], "date_ranges() (in module polars)": [[750, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[66, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[751, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[928, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[424, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1029, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[752, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[753, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[425, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1030, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[67, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[928, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[374, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[660, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[975, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1237, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[411, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[189, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[834, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1017, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[190, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[412, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[835, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[413, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[520, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1018, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1132, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[928, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[89, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[414, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1019, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[191, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[836, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[192, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[193, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[415, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[837, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1020, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[194, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[416, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[521, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[838, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1021, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1133, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[426, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1031, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1071, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[195, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[839, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[166, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[98, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[68, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[754, "polars.duration", false]], "duration() (in module polars.selectors)": [[928, "polars.selectors.duration", false]], "element() (in module polars)": [[755, "polars.element", false]], "enable_string_cache() (in module polars)": [[90, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[375, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[661, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[976, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1238, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[928, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[376, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[392, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[662, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[977, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[992, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1239, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[462, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1072, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[69, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[427, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1032, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[463, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[563, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1073, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[464, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1074, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[196, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1075, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[91, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[663, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1240, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[197, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1076, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[522, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1134, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[465, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1077, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[466, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1078, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[467, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1079, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[468, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1080, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[756, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[928, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[469, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1325, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1326, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[470, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1081, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[928, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[840, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[198, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[471, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[354, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[523, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[664, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[841, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1082, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[956, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1135, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1241, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[199, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1083, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[472, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1084, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[665, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1242, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[666, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1243, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[667, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1244, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[668, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1245, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[915, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[916, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[704, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1281, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1282, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[200, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[473, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[842, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1085, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[201, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[474, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[843, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1086, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[202, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[475, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[844, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1087, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[669, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1246, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[670, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1247, "polars.Series.str.find_many", false]], "first() (in module polars)": [[757, "polars.first", false]], "first() (in module polars.selectors)": [[928, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[476, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[355, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[524, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[845, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[901, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1088, "polars.Series.first", false]], "first() (polars.series.arr method)": [[957, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1136, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[203, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1089, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[477, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[928, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[70, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[71, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[478, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1090, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[479, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[758, "polars.fold", false]], "fold() (polars.dataframe method)": [[204, "polars.DataFrame.fold", false]], "format() (in module polars)": [[759, "polars.format", false]], "forward_fill() (polars.expr method)": [[480, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[122, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[123, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[124, "polars.from_dict", false]], "from_dicts() (in module polars)": [[125, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[760, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[481, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[126, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[127, "polars.from_pandas", false]], "from_records() (in module polars)": [[128, "polars.from_records", false]], "from_repr() (in module polars)": [[129, "polars.from_repr", false]], "gather() (polars.expr method)": [[482, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[525, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1091, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1137, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[205, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[483, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[526, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[846, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1092, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1138, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[484, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1093, "polars.Series.ge", false]], "get() (polars.expr method)": [[485, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[356, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[527, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[958, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1139, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[393, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[993, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1094, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[206, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[207, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[208, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[130, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[209, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[897, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[210, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[847, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[211, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[848, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[761, "polars.groups", false]], "gt() (polars.expr method)": [[486, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1095, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[564, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[487, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1096, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1097, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[488, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1098, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[212, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[762, "polars.head", false]], "head() (polars.dataframe method)": [[213, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[489, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[528, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[671, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[849, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[902, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1099, "polars.Series.head", false]], "head() (polars.series.list method)": [[1140, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1248, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[214, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[490, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1100, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[428, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1033, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[215, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[763, "polars.implode", false]], "implode() (polars.expr method)": [[491, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1101, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[492, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1102, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[216, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[493, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[850, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[72, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[73, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[74, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[75, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[76, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[764, "polars.int_range", false]], "int_ranges() (in module polars)": [[765, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[928, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[217, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[494, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[851, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1103, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[495, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1104, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[99, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[496, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1105, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[565, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[566, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[218, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[497, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1106, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[219, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1107, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[498, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1108, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[499, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1109, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[500, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1110, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[501, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1111, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[502, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1112, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[429, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1034, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[567, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[994, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[503, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1113, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[504, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1114, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[505, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1115, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[506, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1116, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[568, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[928, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1117, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[220, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[507, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1118, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[430, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1035, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[221, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1119, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[222, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[223, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[224, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[225, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[357, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[529, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[672, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[852, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[959, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1141, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1249, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[226, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[853, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[227, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[854, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[673, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1250, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[705, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1283, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[132, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[674, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1251, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[583, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[508, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1120, "polars.Series.kurtosis", false]], "last() (in module polars)": [[766, "polars.last", false]], "last() (in module polars.selectors)": [[928, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[509, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[358, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[530, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[855, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[903, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1121, "polars.Series.last", false]], "last() (polars.series.arr method)": [[960, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1142, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[228, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[856, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[510, "polars.Expr.le", false]], "le() (polars.series method)": [[1122, "polars.Series.le", false]], "len() (in module polars)": [[767, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[511, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[531, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[904, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1123, "polars.Series.len", false]], "len() (polars.series.list method)": [[1143, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[394, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[675, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[995, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1252, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[395, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[676, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[996, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1253, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[229, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[512, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[857, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1124, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[77, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[768, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[553, "polars.Expr.log", false]], "log() (polars.series method)": [[1165, "polars.Series.log", false]], "log10() (polars.expr method)": [[554, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1166, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[555, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1167, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[556, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1168, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[557, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1169, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[584, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[769, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[558, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[858, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[559, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1170, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[585, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[770, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[905, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[230, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[100, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[928, "polars.selectors.matches", false]], "max() (in module polars)": [[771, "polars.max", false]], "max() (polars.dataframe method)": [[231, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[560, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[359, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[532, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[859, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[906, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1171, "polars.Series.max", false]], "max() (polars.series.arr method)": [[961, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1036, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1144, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[772, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[232, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[773, "polars.mean", false]], "mean() (polars.dataframe method)": [[233, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[308, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[561, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[533, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[860, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[907, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1172, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1037, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1145, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[774, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[234, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[775, "polars.median", false]], "median() (polars.dataframe method)": [[235, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[309, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[562, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[360, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[534, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[861, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[908, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1173, "polars.Series.median", false]], "median() (polars.series.arr method)": [[962, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1038, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1146, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[236, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[862, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[237, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[863, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[431, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1039, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[432, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1040, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[433, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1041, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[776, "polars.min", false]], "min() (polars.dataframe method)": [[238, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[310, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[578, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[361, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[535, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[864, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[909, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1174, "polars.Series.min", false]], "min() (polars.series.arr method)": [[963, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1042, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1147, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[777, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[239, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[434, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1043, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[579, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[580, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1175, "polars.Series.mode", false]], "module": [[926, "module-polars.plugins", false], [928, "module-polars.selectors", false]], "moduleupgraderequirederror": [[101, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[435, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1044, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[436, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1045, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[437, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1046, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[581, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[240, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1176, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[778, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[241, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[311, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[582, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[362, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[536, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[910, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1177, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[964, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1148, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1178, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[592, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1179, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[593, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1180, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[438, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1047, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[594, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[569, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1181, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[595, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1182, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[596, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1183, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[131, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[102, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[103, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[597, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1184, "polars.Series.not_", false]], "nth() (in module polars)": [[779, "polars.nth", false]], "null (class in polars.datatypes)": [[78, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[242, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[598, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[865, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1185, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[928, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[79, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[439, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1048, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[780, "polars.ones", false]], "or_() (polars.expr method)": [[599, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[440, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1049, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[104, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[570, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[600, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[677, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1254, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[678, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1255, "polars.Series.str.pad_start", false]], "panicexception": [[105, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[106, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[243, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[601, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1186, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[602, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1187, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[603, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1188, "polars.Series.peak_min", false]], "performancewarning": [[107, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[244, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[604, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[866, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[245, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[323, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1321, "polars.Series.plot", false]], "polars.plugins": [[926, "module-polars.plugins", false]], "polars.selectors": [[928, "module-polars.selectors", false]], "polarserror": [[108, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[109, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[110, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[571, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[605, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1189, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[586, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[587, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[246, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[606, "polars.Expr.product", false]], "product() (polars.series method)": [[1190, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[867, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[607, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1191, "polars.Series.qcut", false]], "quantile() (in module polars)": [[781, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[247, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[312, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[608, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[868, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[911, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1192, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[441, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1050, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[609, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[610, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1193, "polars.Series.rank", false]], "read_avro() (in module polars)": [[133, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[134, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[135, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[136, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[137, "polars.read_database", false]], "read_database_uri() (in module polars)": [[138, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[139, "polars.read_delta", false]], "read_excel() (in module polars)": [[140, "polars.read_excel", false]], "read_ipc() (in module polars)": [[141, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[142, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[143, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[144, "polars.read_json", false]], "read_ndjson() (in module polars)": [[145, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[146, "polars.read_ods", false]], "read_parquet() (in module polars)": [[147, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[148, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[248, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[611, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1194, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[782, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1327, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[52, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[53, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1328, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[54, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1329, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[926, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[55, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[612, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[377, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1195, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[978, "polars.Series.bin.reinterpret", false]], "rename() (polars.dataframe method)": [[249, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[869, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1196, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[706, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1284, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[783, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[613, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[614, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[442, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[679, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1197, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1051, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1256, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[680, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1257, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[250, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[681, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1258, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[615, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1198, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[443, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1052, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[616, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1199, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[251, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[617, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[363, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[537, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[682, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[870, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1200, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[965, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1149, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1259, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[618, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1201, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[619, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1202, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[252, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[620, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[871, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[784, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[785, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[621, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1203, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[622, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1204, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[623, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[624, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1205, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[625, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[626, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1206, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[627, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[628, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1207, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[629, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[630, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1208, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[631, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[632, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1209, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[633, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1210, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[634, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[635, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1211, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[636, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[637, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1212, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[638, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[572, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[639, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[444, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1213, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1053, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[640, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1214, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[253, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[254, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[255, "polars.DataFrame.rows_by_key", false]], "rowserror": [[111, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[256, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[641, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[538, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1215, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1150, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[149, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[150, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[151, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[152, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[153, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[154, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[155, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1216, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[257, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[872, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1285, "polars.Series.struct.schema", false]], "schemaerror": [[114, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[115, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[642, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1217, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[445, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1054, "polars.Series.dt.second", false]], "select() (in module polars)": [[786, "polars.select", false]], "select() (polars.dataframe method)": [[258, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[873, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[259, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[874, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[260, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[573, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[875, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[169, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1218, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[539, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1151, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[540, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1152, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[170, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[156, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[261, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[643, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[876, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1219, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[541, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1153, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[542, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1154, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[262, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1220, "polars.Series.shape", false]], "shapeerror": [[116, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[263, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[644, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[364, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[543, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[877, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1221, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[966, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1155, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[574, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[878, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[157, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[645, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1222, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[264, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1223, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[646, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1224, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[647, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1225, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[928, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[648, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1226, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[649, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1227, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[378, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[979, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[650, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1228, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[265, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[651, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[544, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[683, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[879, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1229, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1156, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1260, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[266, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[652, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[365, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[545, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[880, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1230, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[967, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1157, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[653, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[684, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1261, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[685, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1262, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[686, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1263, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[787, "polars.sql", false]], "sql() (polars.dataframe method)": [[267, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[881, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[788, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1344, "polars.SQLContext", false]], "sqlinterfaceerror": [[112, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[113, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[654, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1231, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[928, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[379, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[396, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[687, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[980, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[997, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1264, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[789, "polars.std", false]], "std() (polars.dataframe method)": [[268, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[655, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[366, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[546, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[882, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1232, "polars.Series.std", false]], "std() (polars.series.arr method)": [[968, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1158, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[446, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1055, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[80, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[928, "polars.selectors.string", false]], "stringcache (class in polars)": [[50, "polars.StringCache", false]], "stringcachemismatcherror": [[117, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[688, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1265, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[689, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1266, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[690, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1267, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[691, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1268, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[692, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1269, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[693, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1270, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[81, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[790, "polars.struct", false]], "structfieldnotfounderror": [[118, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[324, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[709, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[588, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[589, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[791, "polars.sum", false]], "sum() (polars.dataframe method)": [[269, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[313, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[710, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[367, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[547, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[883, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[912, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1287, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[969, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1159, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[792, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[270, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1330, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[793, "polars.tail", false]], "tail() (polars.dataframe method)": [[271, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[314, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[711, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[548, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[694, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[884, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[913, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1288, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1160, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1271, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[712, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1289, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[713, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1290, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[928, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[171, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[172, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[82, "polars.datatypes.Time", false]], "time() (in module polars)": [[794, "polars.time", false]], "time() (in module polars.selectors)": [[928, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[447, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1056, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[795, "polars.time_range", false]], "time_ranges() (in module polars)": [[796, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[448, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1057, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[549, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1161, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[272, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1291, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[695, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1272, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[696, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1273, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[697, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1274, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[273, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[274, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[275, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1292, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1293, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[276, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1294, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[698, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1275, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[277, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1295, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[368, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1296, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[970, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[998, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[590, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[699, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1276, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[278, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1297, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[279, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1298, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[714, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1299, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[280, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[449, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1058, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[281, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[369, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[550, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[971, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1162, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[700, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1277, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[701, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1278, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[282, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1300, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[591, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[702, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1279, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[119, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[283, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[715, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[885, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1301, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[716, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[450, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1059, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[451, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1060, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[452, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1061, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[453, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1062, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[454, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1063, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[455, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1064, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[456, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1065, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[284, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[575, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[717, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[457, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1066, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[83, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[84, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[85, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[86, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[576, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[285, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[718, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[370, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[551, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[886, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1302, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[972, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1163, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[719, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1303, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[87, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[286, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[707, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[887, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1286, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[287, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[888, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1331, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[928, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[120, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[288, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[121, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[289, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[889, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[720, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1304, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[290, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[999, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[173, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[88, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[721, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1305, "polars.Series.value_counts", false]], "var() (in module polars)": [[797, "polars.var", false]], "var() (polars.dataframe method)": [[291, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[722, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[371, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[552, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[890, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1306, "polars.Series.var", false]], "var() (polars.series.arr method)": [[973, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1164, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[292, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[458, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1067, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[459, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1068, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[798, "polars.when", false]], "where() (polars.expr method)": [[723, "polars.Expr.where", false]], "width (polars.dataframe property)": [[293, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[891, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[294, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[892, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[295, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[893, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[894, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[708, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[296, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[895, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[297, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[896, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[460, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1069, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[35, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[36, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[577, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[724, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[461, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1070, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[799, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[703, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1280, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1307, "polars.Series.zip_with", false]]}, "objects": {"polars": [[31, 1, 1, "", "CredentialProvider"], [32, 1, 1, "", "CredentialProviderAWS"], [33, 1, 1, "", "CredentialProviderAzure"], [34, 1, 1, "", "CredentialProviderGCP"], [1344, 1, 1, "", "SQLContext"], [50, 1, 1, "", "StringCache"], [51, 4, 1, "", "align_frames"], [725, 4, 1, "", "all"], [726, 4, 1, "", "all_horizontal"], [727, 4, 1, "", "any"], [728, 4, 1, "", "any_horizontal"], [729, 4, 1, "", "approx_n_unique"], [730, 4, 1, "", "arange"], [731, 4, 1, "", "arctan2"], [732, 4, 1, "", "arctan2d"], [733, 4, 1, "", "arg_sort_by"], [734, 4, 1, "", "arg_where"], [56, 4, 1, "", "build_info"], [735, 4, 1, "", "business_day_count"], [736, 4, 1, "", "coalesce"], [57, 4, 1, "", "collect_all"], [58, 4, 1, "", "collect_all_async"], [59, 4, 1, "", "concat"], [737, 4, 1, "", "concat_arr"], [738, 4, 1, "", "concat_list"], [739, 4, 1, "", "concat_str"], [740, 4, 1, "", "corr"], [741, 4, 1, "", "count"], [742, 4, 1, "", "cov"], [743, 4, 1, "", "cum_count"], [744, 4, 1, "", "cum_fold"], [745, 4, 1, "", "cum_reduce"], [746, 4, 1, "", "cum_sum"], [747, 4, 1, "", "cum_sum_horizontal"], [748, 4, 1, "", "date"], [749, 4, 1, "", "date_range"], [750, 4, 1, "", "date_ranges"], [751, 4, 1, "", "datetime"], [752, 4, 1, "", "datetime_range"], [753, 4, 1, "", "datetime_ranges"], [89, 4, 1, "", "disable_string_cache"], [754, 4, 1, "", "duration"], [755, 4, 1, "", "element"], [90, 4, 1, "", "enable_string_cache"], [91, 4, 1, "", "escape_regex"], [756, 4, 1, "", "exclude"], [757, 4, 1, "", "first"], [758, 4, 1, "", "fold"], [759, 4, 1, "", "format"], [122, 4, 1, "", "from_arrow"], [123, 4, 1, "", "from_dataframe"], [124, 4, 1, "", "from_dict"], [125, 4, 1, "", "from_dicts"], [760, 4, 1, "", "from_epoch"], [126, 4, 1, "", "from_numpy"], [127, 4, 1, "", "from_pandas"], [128, 4, 1, "", "from_records"], [129, 4, 1, "", "from_repr"], [130, 4, 1, "", "get_index_type"], [761, 4, 1, "", "groups"], [762, 4, 1, "", "head"], [763, 4, 1, "", "implode"], [764, 4, 1, "", "int_range"], [765, 4, 1, "", "int_ranges"], [132, 4, 1, "", "json_normalize"], [766, 4, 1, "", "last"], [767, 4, 1, "", "len"], [768, 4, 1, "", "lit"], [769, 4, 1, "", "map_batches"], [770, 4, 1, "", "map_groups"], [771, 4, 1, "", "max"], [772, 4, 1, "", "max_horizontal"], [773, 4, 1, "", "mean"], [774, 4, 1, "", "mean_horizontal"], [775, 4, 1, "", "median"], [776, 4, 1, "", "min"], [777, 4, 1, "", "min_horizontal"], [778, 4, 1, "", "n_unique"], [779, 4, 1, "", "nth"], [780, 4, 1, "", "ones"], [926, 6, 0, "-", "plugins"], [781, 4, 1, "", "quantile"], [133, 4, 1, "", "read_avro"], [134, 4, 1, "", "read_clipboard"], [135, 4, 1, "", "read_csv"], [136, 4, 1, "", "read_csv_batched"], [137, 4, 1, "", "read_database"], [138, 4, 1, "", "read_database_uri"], [139, 4, 1, "", "read_delta"], [140, 4, 1, "", "read_excel"], [141, 4, 1, "", "read_ipc"], [142, 4, 1, "", "read_ipc_schema"], [143, 4, 1, "", "read_ipc_stream"], [144, 4, 1, "", "read_json"], [145, 4, 1, "", "read_ndjson"], [146, 4, 1, "", "read_ods"], [147, 4, 1, "", "read_parquet"], [148, 4, 1, "", "read_parquet_schema"], [782, 4, 1, "", "reduce"], [783, 4, 1, "", "repeat"], [784, 4, 1, "", "rolling_corr"], [785, 4, 1, "", "rolling_cov"], [149, 4, 1, "", "scan_csv"], [150, 4, 1, "", "scan_delta"], [151, 4, 1, "", "scan_iceberg"], [152, 4, 1, "", "scan_ipc"], [153, 4, 1, "", "scan_ndjson"], [154, 4, 1, "", "scan_parquet"], [155, 4, 1, "", "scan_pyarrow_dataset"], [786, 4, 1, "", "select"], [928, 6, 0, "-", "selectors"], [156, 4, 1, "", "set_random_seed"], [157, 4, 1, "", "show_versions"], [787, 4, 1, "", "sql"], [788, 4, 1, "", "sql_expr"], [789, 4, 1, "", "std"], [790, 4, 1, "", "struct"], [791, 4, 1, "", "sum"], [792, 4, 1, "", "sum_horizontal"], [793, 4, 1, "", "tail"], [171, 4, 1, "", "thread_pool_size"], [172, 4, 1, "", "threadpool_size"], [794, 4, 1, "", "time"], [795, 4, 1, "", "time_range"], [796, 4, 1, "", "time_ranges"], [173, 4, 1, "", "using_string_cache"], [797, 4, 1, "", "var"], [798, 4, 1, "", "when"], [799, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.CredentialProvider": [[31, 0, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 0, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[33, 0, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[34, 0, 1, "", "__init__"]], "polars.DataFrame": [[176, 0, 1, "", "__array__"], [177, 0, 1, "", "__arrow_c_stream__"], [178, 0, 1, "", "__dataframe__"], [179, 0, 1, "", "__getitem__"], [180, 0, 1, "", "approx_n_unique"], [181, 0, 1, "", "bottom_k"], [182, 0, 1, "", "cast"], [183, 0, 1, "", "clear"], [184, 0, 1, "", "clone"], [185, 0, 1, "", "collect_schema"], [186, 2, 1, "", "columns"], [187, 0, 1, "", "corr"], [188, 0, 1, "", "count"], [189, 0, 1, "", "describe"], [190, 0, 1, "", "deserialize"], [191, 0, 1, "", "drop"], [192, 0, 1, "", "drop_in_place"], [193, 0, 1, "", "drop_nans"], [194, 0, 1, "", "drop_nulls"], [195, 2, 1, "", "dtypes"], [196, 0, 1, "", "equals"], [197, 0, 1, "", "estimated_size"], [198, 0, 1, "", "explode"], [199, 0, 1, "", "extend"], [200, 0, 1, "", "fill_nan"], [201, 0, 1, "", "fill_null"], [202, 0, 1, "", "filter"], [203, 2, 1, "", "flags"], [204, 0, 1, "", "fold"], [205, 0, 1, "", "gather_every"], [206, 0, 1, "", "get_column"], [207, 0, 1, "", "get_column_index"], [208, 0, 1, "", "get_columns"], [209, 0, 1, "", "glimpse"], [210, 0, 1, "", "group_by"], [211, 0, 1, "", "group_by_dynamic"], [212, 0, 1, "", "hash_rows"], [213, 0, 1, "", "head"], [214, 2, 1, "", "height"], [215, 0, 1, "", "hstack"], [216, 0, 1, "", "insert_column"], [217, 0, 1, "", "interpolate"], [218, 0, 1, "", "is_duplicated"], [219, 0, 1, "", "is_empty"], [220, 0, 1, "", "is_unique"], [221, 0, 1, "", "item"], [222, 0, 1, "", "iter_columns"], [223, 0, 1, "", "iter_rows"], [224, 0, 1, "", "iter_slices"], [225, 0, 1, "", "join"], [226, 0, 1, "", "join_asof"], [227, 0, 1, "", "join_where"], [228, 0, 1, "", "lazy"], [229, 0, 1, "", "limit"], [230, 0, 1, "", "map_rows"], [231, 0, 1, "", "max"], [232, 0, 1, "", "max_horizontal"], [233, 0, 1, "", "mean"], [234, 0, 1, "", "mean_horizontal"], [235, 0, 1, "", "median"], [236, 0, 1, "", "melt"], [237, 0, 1, "", "merge_sorted"], [238, 0, 1, "", "min"], [239, 0, 1, "", "min_horizontal"], [240, 0, 1, "", "n_chunks"], [241, 0, 1, "", "n_unique"], [242, 0, 1, "", "null_count"], [243, 0, 1, "", "partition_by"], [244, 0, 1, "", "pipe"], [245, 0, 1, "", "pivot"], [323, 2, 1, "", "plot"], [246, 0, 1, "", "product"], [247, 0, 1, "", "quantile"], [248, 0, 1, "", "rechunk"], [249, 0, 1, "", "rename"], [250, 0, 1, "", "replace_column"], [251, 0, 1, "", "reverse"], [252, 0, 1, "", "rolling"], [253, 0, 1, "", "row"], [254, 0, 1, "", "rows"], [255, 0, 1, "", "rows_by_key"], [256, 0, 1, "", "sample"], [257, 2, 1, "", "schema"], [258, 0, 1, "", "select"], [259, 0, 1, "", "select_seq"], [260, 0, 1, "", "serialize"], [261, 0, 1, "", "set_sorted"], [262, 2, 1, "", "shape"], [263, 0, 1, "", "shift"], [264, 0, 1, "", "shrink_to_fit"], [265, 0, 1, "", "slice"], [266, 0, 1, "", "sort"], [267, 0, 1, "", "sql"], [268, 0, 1, "", "std"], [324, 2, 1, "", "style"], [269, 0, 1, "", "sum"], [270, 0, 1, "", "sum_horizontal"], [271, 0, 1, "", "tail"], [272, 0, 1, "", "to_arrow"], [273, 0, 1, "", "to_dict"], [274, 0, 1, "", "to_dicts"], [275, 0, 1, "", "to_dummies"], [276, 0, 1, "", "to_init_repr"], [277, 0, 1, "", "to_jax"], [278, 0, 1, "", "to_numpy"], [279, 0, 1, "", "to_pandas"], [280, 0, 1, "", "to_series"], [281, 0, 1, "", "to_struct"], [282, 0, 1, "", "to_torch"], [283, 0, 1, "", "top_k"], [284, 0, 1, "", "transpose"], [285, 0, 1, "", "unique"], [286, 0, 1, "", "unnest"], [287, 0, 1, "", "unpivot"], [288, 0, 1, "", "unstack"], [289, 0, 1, "", "update"], [290, 0, 1, "", "upsample"], [291, 0, 1, "", "var"], [292, 0, 1, "", "vstack"], [293, 2, 1, "", "width"], [294, 0, 1, "", "with_columns"], [295, 0, 1, "", "with_columns_seq"], [296, 0, 1, "", "with_row_count"], [297, 0, 1, "", "with_row_index"], [35, 0, 1, "", "write_avro"], [36, 0, 1, "", "write_clipboard"], [37, 0, 1, "", "write_csv"], [38, 0, 1, "", "write_database"], [39, 0, 1, "", "write_delta"], [40, 0, 1, "", "write_excel"], [41, 0, 1, "", "write_ipc"], [42, 0, 1, "", "write_ipc_stream"], [43, 0, 1, "", "write_json"], [44, 0, 1, "", "write_ndjson"], [45, 0, 1, "", "write_parquet"]], "polars.Expr": [[328, 0, 1, "", "abs"], [329, 0, 1, "", "add"], [330, 0, 1, "", "agg_groups"], [331, 0, 1, "", "alias"], [332, 0, 1, "", "all"], [333, 0, 1, "", "and_"], [334, 0, 1, "", "any"], [335, 0, 1, "", "append"], [336, 0, 1, "", "approx_n_unique"], [337, 0, 1, "", "arccos"], [338, 0, 1, "", "arccosh"], [339, 0, 1, "", "arcsin"], [340, 0, 1, "", "arcsinh"], [341, 0, 1, "", "arctan"], [342, 0, 1, "", "arctanh"], [343, 0, 1, "", "arg_max"], [344, 0, 1, "", "arg_min"], [345, 0, 1, "", "arg_sort"], [346, 0, 1, "", "arg_true"], [347, 0, 1, "", "arg_unique"], [372, 0, 1, "", "backward_fill"], [380, 0, 1, "", "bitwise_and"], [381, 0, 1, "", "bitwise_count_ones"], [382, 0, 1, "", "bitwise_count_zeros"], [383, 0, 1, "", "bitwise_leading_ones"], [384, 0, 1, "", "bitwise_leading_zeros"], [385, 0, 1, "", "bitwise_or"], [386, 0, 1, "", "bitwise_trailing_ones"], [387, 0, 1, "", "bitwise_trailing_zeros"], [388, 0, 1, "", "bitwise_xor"], [389, 0, 1, "", "bottom_k"], [390, 0, 1, "", "bottom_k_by"], [391, 0, 1, "", "cast"], [397, 0, 1, "", "cbrt"], [398, 0, 1, "", "ceil"], [399, 0, 1, "", "clip"], [400, 0, 1, "", "cos"], [401, 0, 1, "", "cosh"], [402, 0, 1, "", "cot"], [403, 0, 1, "", "count"], [404, 0, 1, "", "cum_count"], [405, 0, 1, "", "cum_max"], [406, 0, 1, "", "cum_min"], [407, 0, 1, "", "cum_prod"], [408, 0, 1, "", "cum_sum"], [409, 0, 1, "", "cumulative_eval"], [410, 0, 1, "", "cut"], [411, 0, 1, "", "degrees"], [412, 0, 1, "", "deserialize"], [413, 0, 1, "", "diff"], [414, 0, 1, "", "dot"], [415, 0, 1, "", "drop_nans"], [416, 0, 1, "", "drop_nulls"], [462, 0, 1, "", "entropy"], [463, 0, 1, "", "eq"], [464, 0, 1, "", "eq_missing"], [465, 0, 1, "", "ewm_mean"], [466, 0, 1, "", "ewm_mean_by"], [467, 0, 1, "", "ewm_std"], [468, 0, 1, "", "ewm_var"], [469, 0, 1, "", "exclude"], [470, 0, 1, "", "exp"], [471, 0, 1, "", "explode"], [472, 0, 1, "", "extend_constant"], [473, 0, 1, "", "fill_nan"], [474, 0, 1, "", "fill_null"], [475, 0, 1, "", "filter"], [476, 0, 1, "", "first"], [477, 0, 1, "", "flatten"], [478, 0, 1, "", "floor"], [479, 0, 1, "", "floordiv"], [480, 0, 1, "", "forward_fill"], [481, 0, 1, "", "from_json"], [482, 0, 1, "", "gather"], [483, 0, 1, "", "gather_every"], [484, 0, 1, "", "ge"], [485, 0, 1, "", "get"], [486, 0, 1, "", "gt"], [487, 0, 1, "", "has_nulls"], [488, 0, 1, "", "hash"], [489, 0, 1, "", "head"], [490, 0, 1, "", "hist"], [491, 0, 1, "", "implode"], [492, 0, 1, "", "index_of"], [493, 0, 1, "", "inspect"], [494, 0, 1, "", "interpolate"], [495, 0, 1, "", "interpolate_by"], [496, 0, 1, "", "is_between"], [497, 0, 1, "", "is_duplicated"], [498, 0, 1, "", "is_finite"], [499, 0, 1, "", "is_first_distinct"], [500, 0, 1, "", "is_in"], [501, 0, 1, "", "is_infinite"], [502, 0, 1, "", "is_last_distinct"], [503, 0, 1, "", "is_nan"], [504, 0, 1, "", "is_not_nan"], [505, 0, 1, "", "is_not_null"], [506, 0, 1, "", "is_null"], [507, 0, 1, "", "is_unique"], [508, 0, 1, "", "kurtosis"], [509, 0, 1, "", "last"], [510, 0, 1, "", "le"], [511, 0, 1, "", "len"], [512, 0, 1, "", "limit"], [553, 0, 1, "", "log"], [554, 0, 1, "", "log10"], [555, 0, 1, "", "log1p"], [556, 0, 1, "", "lower_bound"], [557, 0, 1, "", "lt"], [558, 0, 1, "", "map_batches"], [559, 0, 1, "", "map_elements"], [560, 0, 1, "", "max"], [561, 0, 1, "", "mean"], [562, 0, 1, "", "median"], [578, 0, 1, "", "min"], [579, 0, 1, "", "mod"], [580, 0, 1, "", "mode"], [581, 0, 1, "", "mul"], [582, 0, 1, "", "n_unique"], [592, 0, 1, "", "nan_max"], [593, 0, 1, "", "nan_min"], [594, 0, 1, "", "ne"], [595, 0, 1, "", "ne_missing"], [596, 0, 1, "", "neg"], [597, 0, 1, "", "not_"], [598, 0, 1, "", "null_count"], [599, 0, 1, "", "or_"], [600, 0, 1, "", "over"], [601, 0, 1, "", "pct_change"], [602, 0, 1, "", "peak_max"], [603, 0, 1, "", "peak_min"], [604, 0, 1, "", "pipe"], [605, 0, 1, "", "pow"], [606, 0, 1, "", "product"], [607, 0, 1, "", "qcut"], [608, 0, 1, "", "quantile"], [609, 0, 1, "", "radians"], [610, 0, 1, "", "rank"], [611, 0, 1, "", "rechunk"], [612, 0, 1, "", "reinterpret"], [613, 0, 1, "", "repeat_by"], [614, 0, 1, "", "replace"], [615, 0, 1, "", "replace_strict"], [616, 0, 1, "", "reshape"], [617, 0, 1, "", "reverse"], [618, 0, 1, "", "rle"], [619, 0, 1, "", "rle_id"], [620, 0, 1, "", "rolling"], [621, 0, 1, "", "rolling_map"], [622, 0, 1, "", "rolling_max"], [623, 0, 1, "", "rolling_max_by"], [624, 0, 1, "", "rolling_mean"], [625, 0, 1, "", "rolling_mean_by"], [626, 0, 1, "", "rolling_median"], [627, 0, 1, "", "rolling_median_by"], [628, 0, 1, "", "rolling_min"], [629, 0, 1, "", "rolling_min_by"], [630, 0, 1, "", "rolling_quantile"], [631, 0, 1, "", "rolling_quantile_by"], [632, 0, 1, "", "rolling_skew"], [633, 0, 1, "", "rolling_std"], [634, 0, 1, "", "rolling_std_by"], [635, 0, 1, "", "rolling_sum"], [636, 0, 1, "", "rolling_sum_by"], [637, 0, 1, "", "rolling_var"], [638, 0, 1, "", "rolling_var_by"], [639, 0, 1, "", "round"], [640, 0, 1, "", "round_sig_figs"], [641, 0, 1, "", "sample"], [642, 0, 1, "", "search_sorted"], [643, 0, 1, "", "set_sorted"], [644, 0, 1, "", "shift"], [645, 0, 1, "", "shrink_dtype"], [646, 0, 1, "", "shuffle"], [647, 0, 1, "", "sign"], [648, 0, 1, "", "sin"], [649, 0, 1, "", "sinh"], [650, 0, 1, "", "skew"], [651, 0, 1, "", "slice"], [652, 0, 1, "", "sort"], [653, 0, 1, "", "sort_by"], [654, 0, 1, "", "sqrt"], [655, 0, 1, "", "std"], [709, 0, 1, "", "sub"], [710, 0, 1, "", "sum"], [711, 0, 1, "", "tail"], [712, 0, 1, "", "tan"], [713, 0, 1, "", "tanh"], [714, 0, 1, "", "to_physical"], [715, 0, 1, "", "top_k"], [716, 0, 1, "", "top_k_by"], [717, 0, 1, "", "truediv"], [718, 0, 1, "", "unique"], [719, 0, 1, "", "unique_counts"], [720, 0, 1, "", "upper_bound"], [721, 0, 1, "", "value_counts"], [722, 0, 1, "", "var"], [723, 0, 1, "", "where"], [724, 0, 1, "", "xor"]], "polars.Expr.arr": [[348, 0, 1, "", "all"], [349, 0, 1, "", "any"], [350, 0, 1, "", "arg_max"], [351, 0, 1, "", "arg_min"], [352, 0, 1, "", "contains"], [353, 0, 1, "", "count_matches"], [354, 0, 1, "", "explode"], [355, 0, 1, "", "first"], [356, 0, 1, "", "get"], [357, 0, 1, "", "join"], [358, 0, 1, "", "last"], [359, 0, 1, "", "max"], [360, 0, 1, "", "median"], [361, 0, 1, "", "min"], [362, 0, 1, "", "n_unique"], [363, 0, 1, "", "reverse"], [364, 0, 1, "", "shift"], [365, 0, 1, "", "sort"], [366, 0, 1, "", "std"], [367, 0, 1, "", "sum"], [368, 0, 1, "", "to_list"], [369, 0, 1, "", "to_struct"], [370, 0, 1, "", "unique"], [371, 0, 1, "", "var"]], "polars.Expr.bin": [[373, 0, 1, "", "contains"], [374, 0, 1, "", "decode"], [375, 0, 1, "", "encode"], [376, 0, 1, "", "ends_with"], [377, 0, 1, "", "reinterpret"], [378, 0, 1, "", "size"], [379, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[392, 0, 1, "", "ends_with"], [393, 0, 1, "", "get_categories"], [394, 0, 1, "", "len_bytes"], [395, 0, 1, "", "len_chars"], [396, 0, 1, "", "starts_with"]], "polars.Expr.dt": [[417, 0, 1, "", "add_business_days"], [418, 0, 1, "", "base_utc_offset"], [419, 0, 1, "", "cast_time_unit"], [420, 0, 1, "", "century"], [421, 0, 1, "", "combine"], [422, 0, 1, "", "convert_time_zone"], [423, 0, 1, "", "date"], [424, 0, 1, "", "datetime"], [425, 0, 1, "", "day"], [426, 0, 1, "", "dst_offset"], [427, 0, 1, "", "epoch"], [428, 0, 1, "", "hour"], [429, 0, 1, "", "is_leap_year"], [430, 0, 1, "", "iso_year"], [431, 0, 1, "", "microsecond"], [432, 0, 1, "", "millennium"], [433, 0, 1, "", "millisecond"], [434, 0, 1, "", "minute"], [435, 0, 1, "", "month"], [436, 0, 1, "", "month_end"], [437, 0, 1, "", "month_start"], [438, 0, 1, "", "nanosecond"], [439, 0, 1, "", "offset_by"], [440, 0, 1, "", "ordinal_day"], [441, 0, 1, "", "quarter"], [442, 0, 1, "", "replace"], [443, 0, 1, "", "replace_time_zone"], [444, 0, 1, "", "round"], [445, 0, 1, "", "second"], [446, 0, 1, "", "strftime"], [447, 0, 1, "", "time"], [448, 0, 1, "", "timestamp"], [449, 0, 1, "", "to_string"], [450, 0, 1, "", "total_days"], [451, 0, 1, "", "total_hours"], [452, 0, 1, "", "total_microseconds"], [453, 0, 1, "", "total_milliseconds"], [454, 0, 1, "", "total_minutes"], [455, 0, 1, "", "total_nanoseconds"], [456, 0, 1, "", "total_seconds"], [457, 0, 1, "", "truncate"], [458, 0, 1, "", "week"], [459, 0, 1, "", "weekday"], [460, 0, 1, "", "with_time_unit"], [461, 0, 1, "", "year"]], "polars.Expr.list": [[513, 0, 1, "", "all"], [514, 0, 1, "", "any"], [515, 0, 1, "", "arg_max"], [516, 0, 1, "", "arg_min"], [517, 0, 1, "", "concat"], [518, 0, 1, "", "contains"], [519, 0, 1, "", "count_matches"], [520, 0, 1, "", "diff"], [521, 0, 1, "", "drop_nulls"], [522, 0, 1, "", "eval"], [523, 0, 1, "", "explode"], [524, 0, 1, "", "first"], [525, 0, 1, "", "gather"], [526, 0, 1, "", "gather_every"], [527, 0, 1, "", "get"], [528, 0, 1, "", "head"], [529, 0, 1, "", "join"], [530, 0, 1, "", "last"], [531, 0, 1, "", "len"], [532, 0, 1, "", "max"], [533, 0, 1, "", "mean"], [534, 0, 1, "", "median"], [535, 0, 1, "", "min"], [536, 0, 1, "", "n_unique"], [537, 0, 1, "", "reverse"], [538, 0, 1, "", "sample"], [539, 0, 1, "", "set_difference"], [540, 0, 1, "", "set_intersection"], [541, 0, 1, "", "set_symmetric_difference"], [542, 0, 1, "", "set_union"], [543, 0, 1, "", "shift"], [544, 0, 1, "", "slice"], [545, 0, 1, "", "sort"], [546, 0, 1, "", "std"], [547, 0, 1, "", "sum"], [548, 0, 1, "", "tail"], [549, 0, 1, "", "to_array"], [550, 0, 1, "", "to_struct"], [551, 0, 1, "", "unique"], [552, 0, 1, "", "var"]], "polars.Expr.meta": [[563, 0, 1, "", "eq"], [564, 0, 1, "", "has_multiple_outputs"], [565, 0, 1, "", "is_column"], [566, 0, 1, "", "is_column_selection"], [567, 0, 1, "", "is_literal"], [568, 0, 1, "", "is_regex_projection"], [569, 0, 1, "", "ne"], [570, 0, 1, "", "output_name"], [571, 0, 1, "", "pop"], [572, 0, 1, "", "root_names"], [573, 0, 1, "", "serialize"], [574, 0, 1, "", "show_graph"], [575, 0, 1, "", "tree_format"], [576, 0, 1, "", "undo_aliases"], [577, 0, 1, "", "write_json"]], "polars.Expr.name": [[583, 0, 1, "", "keep"], [584, 0, 1, "", "map"], [585, 0, 1, "", "map_fields"], [586, 0, 1, "", "prefix"], [587, 0, 1, "", "prefix_fields"], [588, 0, 1, "", "suffix"], [589, 0, 1, "", "suffix_fields"], [590, 0, 1, "", "to_lowercase"], [591, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[656, 0, 1, "", "concat"], [657, 0, 1, "", "contains"], [658, 0, 1, "", "contains_any"], [659, 0, 1, "", "count_matches"], [660, 0, 1, "", "decode"], [661, 0, 1, "", "encode"], [662, 0, 1, "", "ends_with"], [663, 0, 1, "", "escape_regex"], [664, 0, 1, "", "explode"], [665, 0, 1, "", "extract"], [666, 0, 1, "", "extract_all"], [667, 0, 1, "", "extract_groups"], [668, 0, 1, "", "extract_many"], [669, 0, 1, "", "find"], [670, 0, 1, "", "find_many"], [671, 0, 1, "", "head"], [672, 0, 1, "", "join"], [673, 0, 1, "", "json_decode"], [674, 0, 1, "", "json_path_match"], [675, 0, 1, "", "len_bytes"], [676, 0, 1, "", "len_chars"], [677, 0, 1, "", "pad_end"], [678, 0, 1, "", "pad_start"], [679, 0, 1, "", "replace"], [680, 0, 1, "", "replace_all"], [681, 0, 1, "", "replace_many"], [682, 0, 1, "", "reverse"], [683, 0, 1, "", "slice"], [684, 0, 1, "", "split"], [685, 0, 1, "", "split_exact"], [686, 0, 1, "", "splitn"], [687, 0, 1, "", "starts_with"], [688, 0, 1, "", "strip_chars"], [689, 0, 1, "", "strip_chars_end"], [690, 0, 1, "", "strip_chars_start"], [691, 0, 1, "", "strip_prefix"], [692, 0, 1, "", "strip_suffix"], [693, 0, 1, "", "strptime"], [694, 0, 1, "", "tail"], [695, 0, 1, "", "to_date"], [696, 0, 1, "", "to_datetime"], [697, 0, 1, "", "to_decimal"], [698, 0, 1, "", "to_integer"], [699, 0, 1, "", "to_lowercase"], [700, 0, 1, "", "to_time"], [701, 0, 1, "", "to_titlecase"], [702, 0, 1, "", "to_uppercase"], [703, 0, 1, "", "zfill"]], "polars.Expr.struct": [[704, 0, 1, "", "field"], [705, 0, 1, "", "json_encode"], [706, 0, 1, "", "rename_fields"], [707, 0, 1, "", "unnest"], [708, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[823, 0, 1, "", "approx_n_unique"], [824, 0, 1, "", "bottom_k"], [825, 0, 1, "", "cache"], [826, 0, 1, "", "cast"], [827, 0, 1, "", "clear"], [828, 0, 1, "", "clone"], [829, 0, 1, "", "collect"], [830, 0, 1, "", "collect_async"], [831, 0, 1, "", "collect_schema"], [832, 2, 1, "", "columns"], [833, 0, 1, "", "count"], [834, 0, 1, "", "describe"], [835, 0, 1, "", "deserialize"], [836, 0, 1, "", "drop"], [837, 0, 1, "", "drop_nans"], [838, 0, 1, "", "drop_nulls"], [839, 2, 1, "", "dtypes"], [840, 0, 1, "", "explain"], [841, 0, 1, "", "explode"], [842, 0, 1, "", "fill_nan"], [843, 0, 1, "", "fill_null"], [844, 0, 1, "", "filter"], [845, 0, 1, "", "first"], [846, 0, 1, "", "gather_every"], [847, 0, 1, "", "group_by"], [848, 0, 1, "", "group_by_dynamic"], [849, 0, 1, "", "head"], [850, 0, 1, "", "inspect"], [851, 0, 1, "", "interpolate"], [852, 0, 1, "", "join"], [853, 0, 1, "", "join_asof"], [854, 0, 1, "", "join_where"], [855, 0, 1, "", "last"], [856, 0, 1, "", "lazy"], [857, 0, 1, "", "limit"], [858, 0, 1, "", "map_batches"], [859, 0, 1, "", "max"], [860, 0, 1, "", "mean"], [861, 0, 1, "", "median"], [862, 0, 1, "", "melt"], [863, 0, 1, "", "merge_sorted"], [864, 0, 1, "", "min"], [865, 0, 1, "", "null_count"], [866, 0, 1, "", "pipe"], [867, 0, 1, "", "profile"], [868, 0, 1, "", "quantile"], [869, 0, 1, "", "rename"], [870, 0, 1, "", "reverse"], [871, 0, 1, "", "rolling"], [872, 2, 1, "", "schema"], [873, 0, 1, "", "select"], [874, 0, 1, "", "select_seq"], [875, 0, 1, "", "serialize"], [876, 0, 1, "", "set_sorted"], [877, 0, 1, "", "shift"], [878, 0, 1, "", "show_graph"], [46, 0, 1, "", "sink_csv"], [47, 0, 1, "", "sink_ipc"], [48, 0, 1, "", "sink_ndjson"], [49, 0, 1, "", "sink_parquet"], [879, 0, 1, "", "slice"], [880, 0, 1, "", "sort"], [881, 0, 1, "", "sql"], [882, 0, 1, "", "std"], [883, 0, 1, "", "sum"], [884, 0, 1, "", "tail"], [885, 0, 1, "", "top_k"], [886, 0, 1, "", "unique"], [887, 0, 1, "", "unnest"], [888, 0, 1, "", "unpivot"], [889, 0, 1, "", "update"], [890, 0, 1, "", "var"], [891, 2, 1, "", "width"], [892, 0, 1, "", "with_columns"], [893, 0, 1, "", "with_columns_seq"], [894, 0, 1, "", "with_context"], [895, 0, 1, "", "with_row_count"], [896, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1344, 0, 1, "", "__enter__"], [1344, 0, 1, "", "__exit__"], [1344, 0, 1, "", "__init__"], [1325, 0, 1, "", "execute"], [1326, 0, 1, "", "execute_global"], [1327, 0, 1, "", "register"], [1328, 0, 1, "", "register_globals"], [1329, 0, 1, "", "register_many"], [1330, 0, 1, "", "tables"], [1331, 0, 1, "", "unregister"]], "polars.Series": [[930, 0, 1, "", "__array__"], [931, 0, 1, "", "__arrow_c_stream__"], [932, 0, 1, "", "__getitem__"], [933, 0, 1, "", "abs"], [934, 0, 1, "", "alias"], [935, 0, 1, "", "all"], [936, 0, 1, "", "any"], [937, 0, 1, "", "append"], [938, 0, 1, "", "approx_n_unique"], [939, 0, 1, "", "arccos"], [940, 0, 1, "", "arccosh"], [941, 0, 1, "", "arcsin"], [942, 0, 1, "", "arcsinh"], [943, 0, 1, "", "arctan"], [944, 0, 1, "", "arctanh"], [945, 0, 1, "", "arg_max"], [946, 0, 1, "", "arg_min"], [947, 0, 1, "", "arg_sort"], [948, 0, 1, "", "arg_true"], [949, 0, 1, "", "arg_unique"], [981, 0, 1, "", "bitwise_and"], [982, 0, 1, "", "bitwise_count_ones"], [983, 0, 1, "", "bitwise_count_zeros"], [984, 0, 1, "", "bitwise_leading_ones"], [985, 0, 1, "", "bitwise_leading_zeros"], [986, 0, 1, "", "bitwise_or"], [987, 0, 1, "", "bitwise_trailing_ones"], [988, 0, 1, "", "bitwise_trailing_zeros"], [989, 0, 1, "", "bitwise_xor"], [990, 0, 1, "", "bottom_k"], [991, 0, 1, "", "cast"], [1000, 0, 1, "", "cbrt"], [1001, 0, 1, "", "ceil"], [1002, 0, 1, "", "chunk_lengths"], [1003, 0, 1, "", "clear"], [1004, 0, 1, "", "clip"], [1005, 0, 1, "", "clone"], [1006, 0, 1, "", "cos"], [1007, 0, 1, "", "cosh"], [1008, 0, 1, "", "cot"], [1009, 0, 1, "", "count"], [1010, 0, 1, "", "cum_count"], [1011, 0, 1, "", "cum_max"], [1012, 0, 1, "", "cum_min"], [1013, 0, 1, "", "cum_prod"], [1014, 0, 1, "", "cum_sum"], [1015, 0, 1, "", "cumulative_eval"], [1016, 0, 1, "", "cut"], [1017, 0, 1, "", "describe"], [1018, 0, 1, "", "diff"], [1019, 0, 1, "", "dot"], [1020, 0, 1, "", "drop_nans"], [1021, 0, 1, "", "drop_nulls"], [1071, 2, 1, "", "dtype"], [1072, 0, 1, "", "entropy"], [1073, 0, 1, "", "eq"], [1074, 0, 1, "", "eq_missing"], [1075, 0, 1, "", "equals"], [1076, 0, 1, "", "estimated_size"], [1077, 0, 1, "", "ewm_mean"], [1078, 0, 1, "", "ewm_mean_by"], [1079, 0, 1, "", "ewm_std"], [1080, 0, 1, "", "ewm_var"], [1081, 0, 1, "", "exp"], [1082, 0, 1, "", "explode"], [1083, 0, 1, "", "extend"], [1084, 0, 1, "", "extend_constant"], [1085, 0, 1, "", "fill_nan"], [1086, 0, 1, "", "fill_null"], [1087, 0, 1, "", "filter"], [1088, 0, 1, "", "first"], [1089, 2, 1, "", "flags"], [1090, 0, 1, "", "floor"], [1091, 0, 1, "", "gather"], [1092, 0, 1, "", "gather_every"], [1093, 0, 1, "", "ge"], [1094, 0, 1, "", "get_chunks"], [1095, 0, 1, "", "gt"], [1096, 0, 1, "", "has_nulls"], [1097, 0, 1, "", "has_validity"], [1098, 0, 1, "", "hash"], [1099, 0, 1, "", "head"], [1100, 0, 1, "", "hist"], [1101, 0, 1, "", "implode"], [1102, 0, 1, "", "index_of"], [1103, 0, 1, "", "interpolate"], [1104, 0, 1, "", "interpolate_by"], [1105, 0, 1, "", "is_between"], [1106, 0, 1, "", "is_duplicated"], [1107, 0, 1, "", "is_empty"], [1108, 0, 1, "", "is_finite"], [1109, 0, 1, "", "is_first_distinct"], [1110, 0, 1, "", "is_in"], [1111, 0, 1, "", "is_infinite"], [1112, 0, 1, "", "is_last_distinct"], [1113, 0, 1, "", "is_nan"], [1114, 0, 1, "", "is_not_nan"], [1115, 0, 1, "", "is_not_null"], [1116, 0, 1, "", "is_null"], [1117, 0, 1, "", "is_sorted"], [1118, 0, 1, "", "is_unique"], [1119, 0, 1, "", "item"], [1120, 0, 1, "", "kurtosis"], [1121, 0, 1, "", "last"], [1122, 0, 1, "", "le"], [1123, 0, 1, "", "len"], [1124, 0, 1, "", "limit"], [1165, 0, 1, "", "log"], [1166, 0, 1, "", "log10"], [1167, 0, 1, "", "log1p"], [1168, 0, 1, "", "lower_bound"], [1169, 0, 1, "", "lt"], [1170, 0, 1, "", "map_elements"], [1171, 0, 1, "", "max"], [1172, 0, 1, "", "mean"], [1173, 0, 1, "", "median"], [1174, 0, 1, "", "min"], [1175, 0, 1, "", "mode"], [1176, 0, 1, "", "n_chunks"], [1177, 0, 1, "", "n_unique"], [1178, 2, 1, "", "name"], [1179, 0, 1, "", "nan_max"], [1180, 0, 1, "", "nan_min"], [1181, 0, 1, "", "ne"], [1182, 0, 1, "", "ne_missing"], [1183, 0, 1, "", "new_from_index"], [1184, 0, 1, "", "not_"], [1185, 0, 1, "", "null_count"], [1186, 0, 1, "", "pct_change"], [1187, 0, 1, "", "peak_max"], [1188, 0, 1, "", "peak_min"], [1321, 2, 1, "", "plot"], [1189, 0, 1, "", "pow"], [1190, 0, 1, "", "product"], [1191, 0, 1, "", "qcut"], [1192, 0, 1, "", "quantile"], [1193, 0, 1, "", "rank"], [1194, 0, 1, "", "rechunk"], [1195, 0, 1, "", "reinterpret"], [1196, 0, 1, "", "rename"], [1197, 0, 1, "", "replace"], [1198, 0, 1, "", "replace_strict"], [1199, 0, 1, "", "reshape"], [1200, 0, 1, "", "reverse"], [1201, 0, 1, "", "rle"], [1202, 0, 1, "", "rle_id"], [1203, 0, 1, "", "rolling_map"], [1204, 0, 1, "", "rolling_max"], [1205, 0, 1, "", "rolling_mean"], [1206, 0, 1, "", "rolling_median"], [1207, 0, 1, "", "rolling_min"], [1208, 0, 1, "", "rolling_quantile"], [1209, 0, 1, "", "rolling_skew"], [1210, 0, 1, "", "rolling_std"], [1211, 0, 1, "", "rolling_sum"], [1212, 0, 1, "", "rolling_var"], [1213, 0, 1, "", "round"], [1214, 0, 1, "", "round_sig_figs"], [1215, 0, 1, "", "sample"], [1216, 0, 1, "", "scatter"], [1217, 0, 1, "", "search_sorted"], [1218, 0, 1, "", "set"], [1219, 0, 1, "", "set_sorted"], [1220, 2, 1, "", "shape"], [1221, 0, 1, "", "shift"], [1222, 0, 1, "", "shrink_dtype"], [1223, 0, 1, "", "shrink_to_fit"], [1224, 0, 1, "", "shuffle"], [1225, 0, 1, "", "sign"], [1226, 0, 1, "", "sin"], [1227, 0, 1, "", "sinh"], [1228, 0, 1, "", "skew"], [1229, 0, 1, "", "slice"], [1230, 0, 1, "", "sort"], [1231, 0, 1, "", "sqrt"], [1232, 0, 1, "", "std"], [1287, 0, 1, "", "sum"], [1288, 0, 1, "", "tail"], [1289, 0, 1, "", "tan"], [1290, 0, 1, "", "tanh"], [1291, 0, 1, "", "to_arrow"], [1292, 0, 1, "", "to_dummies"], [1293, 0, 1, "", "to_frame"], [1294, 0, 1, "", "to_init_repr"], [1295, 0, 1, "", "to_jax"], [1296, 0, 1, "", "to_list"], [1297, 0, 1, "", "to_numpy"], [1298, 0, 1, "", "to_pandas"], [1299, 0, 1, "", "to_physical"], [1300, 0, 1, "", "to_torch"], [1301, 0, 1, "", "top_k"], [1302, 0, 1, "", "unique"], [1303, 0, 1, "", "unique_counts"], [1304, 0, 1, "", "upper_bound"], [1305, 0, 1, "", "value_counts"], [1306, 0, 1, "", "var"], [1307, 0, 1, "", "zip_with"]], "polars.Series.arr": [[950, 0, 1, "", "all"], [951, 0, 1, "", "any"], [952, 0, 1, "", "arg_max"], [953, 0, 1, "", "arg_min"], [954, 0, 1, "", "contains"], [955, 0, 1, "", "count_matches"], [956, 0, 1, "", "explode"], [957, 0, 1, "", "first"], [958, 0, 1, "", "get"], [959, 0, 1, "", "join"], [960, 0, 1, "", "last"], [961, 0, 1, "", "max"], [962, 0, 1, "", "median"], [963, 0, 1, "", "min"], [964, 0, 1, "", "n_unique"], [965, 0, 1, "", "reverse"], [966, 0, 1, "", "shift"], [967, 0, 1, "", "sort"], [968, 0, 1, "", "std"], [969, 0, 1, "", "sum"], [970, 0, 1, "", "to_list"], [971, 0, 1, "", "to_struct"], [972, 0, 1, "", "unique"], [973, 0, 1, "", "var"]], "polars.Series.bin": [[974, 0, 1, "", "contains"], [975, 0, 1, "", "decode"], [976, 0, 1, "", "encode"], [977, 0, 1, "", "ends_with"], [978, 0, 1, "", "reinterpret"], [979, 0, 1, "", "size"], [980, 0, 1, "", "starts_with"]], "polars.Series.cat": [[992, 0, 1, "", "ends_with"], [993, 0, 1, "", "get_categories"], [994, 0, 1, "", "is_local"], [995, 0, 1, "", "len_bytes"], [996, 0, 1, "", "len_chars"], [997, 0, 1, "", "starts_with"], [998, 0, 1, "", "to_local"], [999, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1022, 0, 1, "", "add_business_days"], [1023, 0, 1, "", "base_utc_offset"], [1024, 0, 1, "", "cast_time_unit"], [1025, 0, 1, "", "century"], [1026, 0, 1, "", "combine"], [1027, 0, 1, "", "convert_time_zone"], [1028, 0, 1, "", "date"], [1029, 0, 1, "", "datetime"], [1030, 0, 1, "", "day"], [1031, 0, 1, "", "dst_offset"], [1032, 0, 1, "", "epoch"], [1033, 0, 1, "", "hour"], [1034, 0, 1, "", "is_leap_year"], [1035, 0, 1, "", "iso_year"], [1036, 0, 1, "", "max"], [1037, 0, 1, "", "mean"], [1038, 0, 1, "", "median"], [1039, 0, 1, "", "microsecond"], [1040, 0, 1, "", "millennium"], [1041, 0, 1, "", "millisecond"], [1042, 0, 1, "", "min"], [1043, 0, 1, "", "minute"], [1044, 0, 1, "", "month"], [1045, 0, 1, "", "month_end"], [1046, 0, 1, "", "month_start"], [1047, 0, 1, "", "nanosecond"], [1048, 0, 1, "", "offset_by"], [1049, 0, 1, "", "ordinal_day"], [1050, 0, 1, "", "quarter"], [1051, 0, 1, "", "replace"], [1052, 0, 1, "", "replace_time_zone"], [1053, 0, 1, "", "round"], [1054, 0, 1, "", "second"], [1055, 0, 1, "", "strftime"], [1056, 0, 1, "", "time"], [1057, 0, 1, "", "timestamp"], [1058, 0, 1, "", "to_string"], [1059, 0, 1, "", "total_days"], [1060, 0, 1, "", "total_hours"], [1061, 0, 1, "", "total_microseconds"], [1062, 0, 1, "", "total_milliseconds"], [1063, 0, 1, "", "total_minutes"], [1064, 0, 1, "", "total_nanoseconds"], [1065, 0, 1, "", "total_seconds"], [1066, 0, 1, "", "truncate"], [1067, 0, 1, "", "week"], [1068, 0, 1, "", "weekday"], [1069, 0, 1, "", "with_time_unit"], [1070, 0, 1, "", "year"]], "polars.Series.list": [[1125, 0, 1, "", "all"], [1126, 0, 1, "", "any"], [1127, 0, 1, "", "arg_max"], [1128, 0, 1, "", "arg_min"], [1129, 0, 1, "", "concat"], [1130, 0, 1, "", "contains"], [1131, 0, 1, "", "count_matches"], [1132, 0, 1, "", "diff"], [1133, 0, 1, "", "drop_nulls"], [1134, 0, 1, "", "eval"], [1135, 0, 1, "", "explode"], [1136, 0, 1, "", "first"], [1137, 0, 1, "", "gather"], [1138, 0, 1, "", "gather_every"], [1139, 0, 1, "", "get"], [1140, 0, 1, "", "head"], [1141, 0, 1, "", "join"], [1142, 0, 1, "", "last"], [1143, 0, 1, "", "len"], [1144, 0, 1, "", "max"], [1145, 0, 1, "", "mean"], [1146, 0, 1, "", "median"], [1147, 0, 1, "", "min"], [1148, 0, 1, "", "n_unique"], [1149, 0, 1, "", "reverse"], [1150, 0, 1, "", "sample"], [1151, 0, 1, "", "set_difference"], [1152, 0, 1, "", "set_intersection"], [1153, 0, 1, "", "set_symmetric_difference"], [1154, 0, 1, "", "set_union"], [1155, 0, 1, "", "shift"], [1156, 0, 1, "", "slice"], [1157, 0, 1, "", "sort"], [1158, 0, 1, "", "std"], [1159, 0, 1, "", "sum"], [1160, 0, 1, "", "tail"], [1161, 0, 1, "", "to_array"], [1162, 0, 1, "", "to_struct"], [1163, 0, 1, "", "unique"], [1164, 0, 1, "", "var"]], "polars.Series.str": [[1233, 0, 1, "", "concat"], [1234, 0, 1, "", "contains"], [1235, 0, 1, "", "contains_any"], [1236, 0, 1, "", "count_matches"], [1237, 0, 1, "", "decode"], [1238, 0, 1, "", "encode"], [1239, 0, 1, "", "ends_with"], [1240, 0, 1, "", "escape_regex"], [1241, 0, 1, "", "explode"], [1242, 0, 1, "", "extract"], [1243, 0, 1, "", "extract_all"], [1244, 0, 1, "", "extract_groups"], [1245, 0, 1, "", "extract_many"], [1246, 0, 1, "", "find"], [1247, 0, 1, "", "find_many"], [1248, 0, 1, "", "head"], [1249, 0, 1, "", "join"], [1250, 0, 1, "", "json_decode"], [1251, 0, 1, "", "json_path_match"], [1252, 0, 1, "", "len_bytes"], [1253, 0, 1, "", "len_chars"], [1254, 0, 1, "", "pad_end"], [1255, 0, 1, "", "pad_start"], [1256, 0, 1, "", "replace"], [1257, 0, 1, "", "replace_all"], [1258, 0, 1, "", "replace_many"], [1259, 0, 1, "", "reverse"], [1260, 0, 1, "", "slice"], [1261, 0, 1, "", "split"], [1262, 0, 1, "", "split_exact"], [1263, 0, 1, "", "splitn"], [1264, 0, 1, "", "starts_with"], [1265, 0, 1, "", "strip_chars"], [1266, 0, 1, "", "strip_chars_end"], [1267, 0, 1, "", "strip_chars_start"], [1268, 0, 1, "", "strip_prefix"], [1269, 0, 1, "", "strip_suffix"], [1270, 0, 1, "", "strptime"], [1271, 0, 1, "", "tail"], [1272, 0, 1, "", "to_date"], [1273, 0, 1, "", "to_datetime"], [1274, 0, 1, "", "to_decimal"], [1275, 0, 1, "", "to_integer"], [1276, 0, 1, "", "to_lowercase"], [1277, 0, 1, "", "to_time"], [1278, 0, 1, "", "to_titlecase"], [1279, 0, 1, "", "to_uppercase"], [1280, 0, 1, "", "zfill"]], "polars.Series.struct": [[1281, 0, 1, "", "field"], [1282, 3, 1, "", "fields"], [1283, 0, 1, "", "json_encode"], [1284, 0, 1, "", "rename_fields"], [1285, 3, 1, "", "schema"], [1286, 0, 1, "", "unnest"]], "polars.StringCache": [[50, 0, 1, "", "__init__"]], "polars.api": [[52, 4, 1, "", "register_dataframe_namespace"], [53, 4, 1, "", "register_expr_namespace"], [54, 4, 1, "", "register_lazyframe_namespace"], [55, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[298, 0, 1, "", "__iter__"], [299, 0, 1, "", "agg"], [300, 0, 1, "", "all"], [301, 0, 1, "", "count"], [302, 0, 1, "", "first"], [303, 0, 1, "", "head"], [304, 0, 1, "", "last"], [305, 0, 1, "", "len"], [306, 0, 1, "", "map_groups"], [307, 0, 1, "", "max"], [308, 0, 1, "", "mean"], [309, 0, 1, "", "median"], [310, 0, 1, "", "min"], [311, 0, 1, "", "n_unique"], [312, 0, 1, "", "quantile"], [313, 0, 1, "", "sum"], [314, 0, 1, "", "tail"]], "polars.datatypes": [[60, 1, 1, "", "Array"], [61, 1, 1, "", "Binary"], [62, 1, 1, "", "Boolean"], [63, 1, 1, "", "Categorical"], [64, 1, 1, "", "DataType"], [65, 1, 1, "", "Date"], [66, 1, 1, "", "Datetime"], [67, 1, 1, "", "Decimal"], [68, 1, 1, "", "Duration"], [69, 1, 1, "", "Enum"], [70, 1, 1, "", "Float32"], [71, 1, 1, "", "Float64"], [72, 1, 1, "", "Int128"], [73, 1, 1, "", "Int16"], [74, 1, 1, "", "Int32"], [75, 1, 1, "", "Int64"], [76, 1, 1, "", "Int8"], [77, 1, 1, "", "List"], [78, 1, 1, "", "Null"], [79, 1, 1, "", "Object"], [80, 1, 1, "", "String"], [81, 1, 1, "", "Struct"], [82, 1, 1, "", "Time"], [83, 1, 1, "", "UInt16"], [84, 1, 1, "", "UInt32"], [85, 1, 1, "", "UInt64"], [86, 1, 1, "", "UInt8"], [87, 1, 1, "", "Unknown"], [88, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[62, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[63, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Int128": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[74, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[76, 0, 1, "", "__init__"]], "polars.datatypes.List": [[77, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[78, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[79, 0, 1, "", "__init__"]], "polars.datatypes.String": [[80, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[81, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[82, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[83, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[84, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[85, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[86, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[87, 0, 1, "", "__init__"]], "polars.exceptions": [[92, 5, 1, "", "CategoricalRemappingWarning"], [93, 5, 1, "", "ChronoFormatWarning"], [94, 5, 1, "", "ColumnNotFoundError"], [95, 5, 1, "", "ComputeError"], [96, 5, 1, "", "CustomUFuncWarning"], [97, 5, 1, "", "DataOrientationWarning"], [98, 5, 1, "", "DuplicateError"], [99, 5, 1, "", "InvalidOperationError"], [100, 5, 1, "", "MapWithoutReturnDtypeWarning"], [101, 5, 1, "", "ModuleUpgradeRequiredError"], [102, 5, 1, "", "NoDataError"], [103, 5, 1, "", "NoRowsReturnedError"], [104, 5, 1, "", "OutOfBoundsError"], [105, 5, 1, "", "PanicException"], [106, 5, 1, "", "ParameterCollisionError"], [107, 5, 1, "", "PerformanceWarning"], [108, 5, 1, "", "PolarsError"], [109, 5, 1, "", "PolarsInefficientMapWarning"], [110, 5, 1, "", "PolarsWarning"], [111, 5, 1, "", "RowsError"], [112, 5, 1, "", "SQLInterfaceError"], [113, 5, 1, "", "SQLSyntaxError"], [114, 5, 1, "", "SchemaError"], [115, 5, 1, "", "SchemaFieldNotFoundError"], [116, 5, 1, "", "ShapeError"], [117, 5, 1, "", "StringCacheMismatchError"], [118, 5, 1, "", "StructFieldNotFoundError"], [119, 5, 1, "", "TooManyRowsReturnedError"], [120, 5, 1, "", "UnstableWarning"], [121, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[131, 0, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[897, 1, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[897, 0, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[898, 0, 1, "", "agg"], [899, 0, 1, "", "all"], [900, 0, 1, "", "count"], [901, 0, 1, "", "first"], [902, 0, 1, "", "head"], [903, 0, 1, "", "last"], [904, 0, 1, "", "len"], [905, 0, 1, "", "map_groups"], [906, 0, 1, "", "max"], [907, 0, 1, "", "mean"], [908, 0, 1, "", "median"], [909, 0, 1, "", "min"], [910, 0, 1, "", "n_unique"], [911, 0, 1, "", "quantile"], [912, 0, 1, "", "sum"], [913, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[914, 0, 1, "", "cancel"], [915, 0, 1, "", "fetch"], [916, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[926, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[928, 4, 1, "", "all"], [928, 4, 1, "", "alpha"], [928, 4, 1, "", "alphanumeric"], [928, 4, 1, "", "binary"], [928, 4, 1, "", "boolean"], [928, 4, 1, "", "by_dtype"], [928, 4, 1, "", "by_index"], [928, 4, 1, "", "by_name"], [928, 4, 1, "", "categorical"], [928, 4, 1, "", "contains"], [928, 4, 1, "", "date"], [928, 4, 1, "", "datetime"], [928, 4, 1, "", "decimal"], [928, 4, 1, "", "digit"], [928, 4, 1, "", "duration"], [928, 4, 1, "", "ends_with"], [928, 4, 1, "", "exclude"], [928, 4, 1, "", "expand_selector"], [928, 4, 1, "", "first"], [928, 4, 1, "", "float"], [928, 4, 1, "", "integer"], [928, 4, 1, "", "is_selector"], [928, 4, 1, "", "last"], [928, 4, 1, "", "matches"], [928, 4, 1, "", "numeric"], [928, 4, 1, "", "signed_integer"], [928, 4, 1, "", "starts_with"], [928, 4, 1, "", "string"], [928, 4, 1, "", "temporal"], [928, 4, 1, "", "time"], [928, 4, 1, "", "unsigned_integer"]], "polars.testing": [[158, 4, 1, "", "assert_frame_equal"], [159, 4, 1, "", "assert_frame_not_equal"], [160, 4, 1, "", "assert_series_equal"], [161, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[162, 1, 1, "", "column"], [163, 4, 1, "", "columns"], [164, 4, 1, "", "create_list_strategy"], [165, 4, 1, "", "dataframes"], [166, 4, 1, "", "dtypes"], [167, 4, 1, "", "lists"], [168, 4, 1, "", "load_profile"], [169, 4, 1, "", "series"], [170, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[162, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 37, 38, 39, 40, 45, 46, 55, 60, 81, 91, 93, 99, 122, 129, 135, 136, 137, 138, 140, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 169, 181, 182, 193, 194, 197, 202, 205, 210, 211, 216, 222, 225, 226, 236, 243, 245, 250, 252, 255, 258, 259, 266, 275, 278, 283, 285, 286, 287, 288, 289, 294, 295, 320, 357, 390, 422, 427, 446, 449, 469, 475, 479, 492, 508, 529, 558, 559, 571, 580, 585, 592, 593, 600, 601, 612, 619, 653, 657, 665, 666, 667, 669, 671, 679, 680, 683, 684, 686, 693, 694, 695, 696, 700, 704, 706, 708, 716, 725, 726, 727, 728, 733, 740, 743, 746, 747, 756, 757, 759, 760, 766, 769, 770, 771, 772, 774, 776, 777, 779, 786, 788, 790, 791, 792, 798, 804, 808, 824, 826, 837, 838, 847, 848, 853, 862, 873, 874, 880, 885, 886, 887, 888, 889, 892, 893, 905, 922, 927, 928, 932, 933, 934, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1026, 1027, 1030, 1031, 1032, 1034, 1036, 1037, 1038, 1040, 1041, 1042, 1045, 1046, 1049, 1051, 1053, 1054, 1055, 1058, 1066, 1068, 1069, 1070, 1071, 1076, 1077, 1079, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1096, 1098, 1099, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1245, 1246, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1316, 1321, 1325, 1329, 1332, 1339, 1340], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 38, 39, 40, 45, 49, 51, 52, 53, 55, 59, 67, 77, 123, 132, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 157, 162, 163, 164, 165, 166, 167, 169, 172, 178, 179, 180, 182, 183, 184, 185, 187, 188, 189, 190, 191, 193, 195, 196, 200, 201, 202, 204, 205, 208, 209, 210, 211, 212, 216, 217, 221, 223, 224, 225, 228, 230, 232, 233, 234, 235, 236, 239, 240, 241, 242, 245, 246, 247, 250, 252, 254, 255, 256, 257, 258, 265, 266, 267, 268, 270, 275, 276, 277, 278, 279, 280, 282, 284, 288, 290, 291, 294, 296, 297, 299, 301, 302, 304, 306, 307, 308, 309, 310, 311, 312, 313, 320, 323, 324, 328, 330, 331, 333, 337, 338, 339, 340, 341, 342, 345, 346, 347, 350, 351, 353, 356, 366, 369, 371, 378, 380, 385, 388, 391, 397, 398, 399, 400, 401, 402, 409, 410, 411, 415, 416, 417, 423, 424, 428, 431, 433, 434, 438, 442, 445, 447, 449, 452, 453, 455, 456, 460, 463, 464, 465, 466, 467, 468, 470, 472, 473, 474, 475, 478, 479, 481, 483, 484, 486, 488, 490, 494, 495, 498, 501, 503, 504, 505, 506, 508, 510, 515, 516, 519, 522, 525, 526, 527, 533, 534, 546, 550, 552, 553, 554, 555, 557, 558, 560, 561, 562, 566, 571, 574, 577, 578, 579, 581, 583, 592, 593, 594, 595, 596, 598, 599, 601, 604, 605, 607, 608, 609, 610, 614, 615, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 645, 647, 648, 649, 650, 654, 655, 656, 659, 664, 665, 666, 669, 670, 708, 709, 710, 712, 713, 714, 717, 722, 723, 725, 730, 731, 732, 733, 734, 735, 736, 737, 738, 740, 742, 744, 751, 755, 758, 764, 765, 767, 770, 773, 774, 775, 779, 781, 782, 786, 787, 794, 795, 796, 797, 798, 799, 804, 808, 823, 826, 827, 828, 831, 833, 834, 836, 837, 839, 840, 842, 843, 844, 846, 847, 848, 851, 852, 856, 858, 861, 862, 865, 867, 868, 872, 873, 878, 880, 881, 882, 890, 892, 894, 895, 896, 898, 900, 901, 903, 905, 906, 907, 908, 909, 910, 911, 912, 922, 927, 928, 932, 939, 940, 941, 942, 943, 944, 945, 947, 949, 952, 958, 968, 971, 973, 979, 991, 998, 1000, 1001, 1003, 1006, 1007, 1008, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1029, 1033, 1037, 1038, 1039, 1041, 1043, 1047, 1051, 1054, 1058, 1061, 1062, 1064, 1065, 1069, 1072, 1077, 1078, 1079, 1080, 1085, 1090, 1092, 1097, 1098, 1100, 1103, 1104, 1108, 1111, 1113, 1114, 1115, 1116, 1119, 1120, 1127, 1128, 1131, 1134, 1137, 1138, 1139, 1145, 1146, 1158, 1162, 1164, 1165, 1166, 1167, 1168, 1172, 1173, 1179, 1180, 1186, 1189, 1191, 1192, 1193, 1197, 1198, 1202, 1203, 1205, 1206, 1208, 1209, 1210, 1212, 1213, 1214, 1215, 1217, 1225, 1226, 1227, 1228, 1231, 1232, 1233, 1236, 1241, 1242, 1243, 1246, 1247, 1251, 1256, 1289, 1290, 1292, 1295, 1297, 1298, 1299, 1300, 1304, 1306, 1316, 1321, 1325, 1331, 1333, 1334, 1335, 1338, 1341, 1342, 1344, 1346, 1347], "00": [27, 40, 66, 182, 189, 211, 290, 320, 418, 419, 422, 426, 436, 437, 439, 443, 444, 446, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 623, 625, 627, 629, 631, 634, 636, 638, 693, 696, 700, 751, 752, 753, 754, 794, 795, 796, 808, 826, 834, 848, 922, 928, 1023, 1024, 1027, 1028, 1029, 1031, 1032, 1033, 1038, 1039, 1043, 1045, 1046, 1047, 1048, 1052, 1053, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1256, 1270, 1273, 1277, 1339], "000": [9, 10, 27, 40, 320, 1256, 1347], "0000": [282, 320, 1300, 1316, 1347], "000000": [374, 375, 449, 660, 975, 976, 1237], "00000001": [11, 724, 808], "00000010": [724, 808], "00000011": [724, 808], "00000100": [724, 808], "00001000": [724, 808], "00001010": [724, 808], "00001011": [724, 808], "0000e": 11, "0000ff": [374, 375, 660, 975, 976, 1237], "0001": 449, "000100": 449, "000101": 449, "0005": 928, "00050": 928, "000800": 1058, "001": [53, 703, 754, 1061, 1062, 1064, 1280], "002": [754, 1061, 1062, 1064], "005": [1072, 1316], "00prefix": 928, "00z": [693, 696, 1270, 1273], "01": [28, 51, 65, 66, 165, 182, 189, 209, 211, 226, 252, 290, 320, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 693, 695, 696, 700, 735, 748, 749, 750, 751, 752, 753, 754, 808, 826, 834, 848, 853, 871, 922, 928, 1022, 1024, 1026, 1027, 1028, 1029, 1032, 1033, 1038, 1039, 1043, 1045, 1046, 1047, 1048, 1051, 1052, 1053, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1270, 1272, 1273, 1277, 1339, 1342], "010": [9, 698, 1275], "01000": 28, "01000010": [724, 808], "01000110": [724, 808], "012": [640, 808, 1214, 1316], "0123": [703, 1280], "01234": [640, 808, 1214, 1316], "012345": 1058, "015625": [1189, 1316], "02": [51, 182, 189, 209, 211, 252, 290, 320, 417, 419, 421, 427, 436, 437, 439, 443, 448, 449, 451, 454, 456, 460, 620, 623, 625, 627, 629, 631, 634, 636, 638, 639, 693, 695, 696, 700, 735, 748, 749, 750, 751, 752, 753, 754, 808, 826, 834, 848, 871, 922, 928, 971, 1024, 1026, 1028, 1029, 1032, 1033, 1038, 1039, 1043, 1045, 1046, 1047, 1051, 1052, 1053, 1056, 1057, 1060, 1063, 1065, 1066, 1162, 1270, 1272, 1273, 1277, 1339, 1340], "03": [51, 129, 135, 182, 211, 226, 252, 290, 320, 419, 421, 422, 427, 436, 437, 439, 442, 443, 444, 446, 448, 449, 450, 451, 454, 456, 457, 460, 466, 479, 620, 623, 625, 627, 629, 631, 634, 636, 638, 695, 700, 748, 749, 750, 751, 752, 753, 754, 808, 826, 848, 853, 871, 922, 928, 1024, 1026, 1027, 1032, 1033, 1038, 1039, 1045, 1046, 1047, 1052, 1053, 1055, 1057, 1059, 1060, 1063, 1065, 1272, 1277], "037037": [1189, 1316], "04": [155, 182, 189, 211, 290, 320, 421, 422, 436, 437, 442, 443, 444, 446, 450, 451, 454, 456, 460, 623, 625, 627, 629, 631, 634, 636, 638, 693, 735, 748, 751, 752, 754, 808, 826, 834, 848, 922, 928, 1027, 1039, 1043, 1045, 1046, 1047, 1052, 1055, 1059, 1060, 1063, 1065, 1069, 1270, 1339], "047198": 1341, "05": [16, 155, 158, 159, 160, 161, 165, 182, 189, 290, 320, 417, 420, 421, 422, 423, 424, 428, 431, 432, 433, 434, 436, 437, 438, 443, 445, 446, 447, 449, 450, 735, 748, 749, 751, 752, 826, 834, 922, 928, 1026, 1027, 1028, 1029, 1052, 1053, 1055, 1056, 1058, 1059, 1066, 1339, 1340, 1342], "050545": 129, "0522623626787952": [1120, 1316], "0545": [1028, 1029, 1056], "05t10": 1058, "06": [165, 182, 290, 320, 417, 421, 435, 441, 443, 444, 445, 457, 458, 748, 751, 826, 922, 928, 1022, 1052, 1053, 1058, 1066], "060": [423, 424, 428, 431, 433, 434, 438, 445, 447], "0601749420166": [197, 320], "06293300616044681": [1072, 1316], "07": [16, 135, 165, 189, 320, 417, 420, 421, 432, 443, 444, 449, 457, 693, 748, 749, 751, 752, 760, 834, 922, 928, 1022, 1026, 1052, 1058, 1270, 1339, 1342], "071068": [189, 320, 834, 922], "08": [135, 158, 159, 160, 161, 189, 226, 252, 267, 320, 417, 421, 436, 437, 444, 449, 620, 693, 752, 754, 808, 834, 853, 871, 922, 928, 1022, 1053, 1066, 1270, 1339, 1340], "085537": [1081, 1316], "09": [51, 135, 189, 252, 320, 417, 421, 436, 437, 449, 600, 620, 697, 748, 749, 751, 796, 808, 834, 871, 922, 928, 1022, 1274], "090909": [601, 808], "094395": 1341, "098612": [555, 808, 1165, 1167, 1316, 1338], "0999": [420, 432], "0_": [40, 320], "0m": [426, 1031], "0x11bc0ad80": 927, "0\u00b5": 449, "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 55, 59, 60, 77, 81, 94, 97, 98, 99, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 136, 139, 140, 141, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 165, 169, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 378, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 511, 512, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 567, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 662, 664, 665, 666, 667, 668, 669, 670, 672, 673, 674, 675, 676, 679, 680, 681, 685, 686, 687, 688, 689, 690, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 730, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 804, 808, 823, 824, 826, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 859, 860, 861, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 928, 932, 933, 934, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 979, 990, 991, 995, 996, 998, 1000, 1001, 1002, 1004, 1005, 1006, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1124, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1242, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1252, 1253, 1256, 1257, 1258, 1262, 1263, 1280, 1281, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1316, 1321, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1345, 1346, 1347], "10": [13, 16, 17, 27, 35, 37, 39, 40, 41, 42, 45, 49, 51, 59, 129, 135, 136, 138, 149, 157, 184, 189, 193, 199, 208, 209, 211, 213, 215, 216, 217, 222, 226, 229, 240, 244, 246, 250, 252, 258, 267, 271, 294, 299, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 331, 335, 343, 344, 345, 347, 399, 405, 408, 413, 417, 418, 420, 421, 423, 424, 426, 428, 431, 432, 433, 434, 436, 437, 438, 442, 443, 444, 445, 447, 449, 457, 460, 466, 487, 488, 489, 494, 500, 512, 520, 526, 528, 534, 544, 546, 548, 552, 554, 570, 572, 583, 598, 600, 601, 604, 614, 615, 620, 651, 698, 708, 711, 724, 735, 736, 744, 749, 751, 752, 755, 758, 760, 762, 768, 769, 793, 796, 808, 829, 830, 834, 837, 848, 849, 851, 853, 857, 866, 867, 871, 873, 883, 884, 892, 898, 901, 903, 906, 907, 908, 909, 910, 911, 912, 922, 928, 1004, 1018, 1022, 1023, 1025, 1026, 1031, 1040, 1052, 1058, 1066, 1069, 1072, 1078, 1099, 1110, 1124, 1132, 1140, 1146, 1156, 1158, 1160, 1164, 1166, 1170, 1186, 1198, 1216, 1218, 1275, 1288, 1295, 1297, 1300, 1316, 1325, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1342, 1347], "100": [10, 17, 27, 40, 125, 128, 132, 135, 136, 137, 140, 144, 145, 146, 149, 153, 227, 245, 263, 320, 449, 614, 615, 644, 658, 668, 670, 673, 681, 697, 753, 808, 854, 877, 922, 928, 1074, 1166, 1182, 1197, 1198, 1204, 1205, 1207, 1221, 1235, 1247, 1250, 1258, 1274, 1316, 1336, 1347], "1000": [137, 197, 276, 297, 320, 336, 808, 896, 922, 1061, 1166, 1294, 1316, 1347], "10000": [135, 224, 320], "100000": [10, 27], "1000000": [11, 1064], "1001": [297, 320, 896, 922], "1002": [297, 320, 896, 922], "10047419486152048166": [212, 320], "1005": [336, 808], "100_000": [786, 858, 922], "100\u00b5": 449, "101": [9, 27, 227, 320, 421, 449, 698, 854, 922, 928, 1275, 1347], "101000": 421, "10101": [27, 1342], "1010101": 9, "101514": [189, 320, 834, 922], "102": [227, 320, 854, 922], "1024": [37, 45, 46, 49, 135, 136, 137, 145, 153, 320, 378, 922, 979], "1040361802642726": [1120, 1316], "107149": 1341, "10734580197236529959": [1098, 1316], "1073741824": [645, 808], "10783150408545073287": [212, 320], "107_930_000": 1325, "10_000": [40, 320], "10i": [211, 320, 848, 922], "10m": [444, 457, 1053, 1066], "10t00": 449, "11": [10, 16, 45, 49, 157, 165, 180, 189, 226, 252, 320, 331, 436, 437, 439, 444, 457, 481, 494, 526, 577, 601, 610, 620, 621, 635, 651, 724, 791, 796, 804, 808, 823, 829, 830, 834, 849, 853, 857, 867, 871, 884, 922, 928, 1048, 1053, 1066, 1170, 1203, 1316, 1334], "110": [193, 320, 681, 698, 837, 922, 1275], "1101441246220388612": [488, 808], "111": [10, 1336], "11111": 1054, "111110": 1054, "11111001": [724, 808], "11111010": [724, 808], "11111111": 10, "112": [645, 808, 1347], "11330": 164, "1152921504606846976": [1195, 1316], "116": 164, "11638928888656214026": [488, 808], "118034": [882, 922], "11aa": 1339, "11aabb": 1339, "11h": [418, 1023], "12": [26, 40, 51, 129, 135, 157, 165, 189, 211, 222, 226, 227, 252, 267, 290, 320, 331, 407, 418, 420, 421, 425, 432, 435, 436, 437, 439, 440, 441, 442, 444, 449, 457, 458, 459, 466, 494, 526, 558, 574, 601, 609, 620, 635, 645, 659, 679, 697, 745, 748, 751, 752, 753, 769, 794, 795, 796, 808, 834, 848, 849, 853, 854, 857, 871, 878, 884, 922, 928, 1023, 1025, 1026, 1037, 1038, 1040, 1044, 1051, 1053, 1058, 1066, 1078, 1170, 1213, 1236, 1257, 1274, 1316, 1338, 1339, 1340, 1342, 1344, 1347], "120": [227, 320, 754, 854, 922, 1341], "1200": [640, 808], "120134": [697, 1274], "121": 1347, "123": [9, 567, 659, 666, 680, 703, 798, 928, 1236, 1243, 1280, 1293, 1316], "123000": 928, "1232e": [1006, 1008, 1316], "1234": [27, 640, 808], "12345": [760, 1001, 1058, 1090, 1213, 1316], "1234500": 928, "123456": [9, 928], "1234567": 27, "123456780": 129, "12346": 760, "123465": 928, "123a123": 680, "123abc": [679, 1256, 1257], "125": [1, 40, 55, 320, 329, 605, 787, 808, 881, 922, 1186, 1189, 1316], "127": [1304, 1316, 1335], "128": [53, 67, 72, 1186, 1316], "129": [645, 808], "13": [183, 184, 189, 200, 201, 208, 216, 227, 228, 240, 252, 294, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 331, 417, 423, 424, 428, 431, 433, 434, 438, 445, 447, 570, 572, 620, 697, 738, 744, 747, 751, 758, 792, 794, 797, 808, 827, 828, 834, 842, 843, 854, 856, 871, 892, 901, 903, 906, 907, 908, 909, 910, 911, 912, 922, 1022, 1053, 1066, 1067, 1170, 1274, 1316, 1335], "130": [132, 227, 320, 854, 922], "13382926553367784577": [488, 808], "134821952": 1325, "134_821_952": 1325, "135": [732, 1341], "13614470193936745724": [488, 808], "13756996518000038261": [1098, 1316], "13d": 449, "13h": [418, 1023], "14": [39, 157, 189, 227, 230, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 418, 423, 424, 428, 431, 433, 434, 438, 445, 447, 449, 494, 567, 610, 751, 794, 795, 808, 834, 854, 901, 903, 906, 907, 908, 909, 910, 911, 912, 922, 928, 1023, 1053, 1058], "140": [227, 320, 854, 922], "141592653589793": 10, "141593": [609, 808, 939, 1316, 1338, 1341], "142857": [1186, 1316], "143": [697, 1274, 1347], "1433": [38, 320], "1436e16": 165, "1438741209321515184": [212, 320], "1440": [454, 1063], "1443e235": 1347, "149": 1347, "14d": 928, "14h": 449, "15": [10, 40, 157, 189, 211, 216, 227, 230, 252, 320, 409, 413, 437, 442, 444, 449, 457, 466, 604, 620, 635, 745, 751, 794, 795, 808, 834, 848, 854, 871, 922, 928, 1015, 1018, 1053, 1058, 1066, 1078, 1316, 1335, 1339], "150": [227, 320, 854, 922, 1205, 1316], "1500": [157, 168], "15000": [224, 320], "153061": [508, 808], "15836": 165, "15_000": [224, 320], "16": [1, 40, 53, 73, 83, 157, 171, 189, 211, 227, 252, 294, 320, 405, 408, 442, 449, 494, 574, 581, 600, 605, 620, 698, 708, 744, 754, 755, 758, 808, 834, 848, 854, 871, 878, 892, 922, 928, 1053, 1066, 1186, 1226, 1275, 1289, 1316, 1335, 1338, 1339, 1344], "160": [227, 320, 854, 922], "165": [1053, 1066], "1656e15": [1008, 1316], "166667": [1186, 1316], "1666683077": 760, "1666683099": 760, "167": 51, "16996": 1347, "16h": 928, "17": [157, 165, 197, 226, 299, 320, 466, 492, 600, 621, 639, 740, 760, 795, 808, 853, 898, 922, 1006, 1008, 1053, 1078, 1102, 1203, 1316, 1347], "170": [227, 320, 854, 922], "17293822569102704640": [1195, 1316], "174": 1347, "175201": [649, 808, 1227, 1316], "1755e": [162, 165], "1764": 55, "17888890": [197, 320], "179": 1347, "17_500": [224, 320], "18": [38, 129, 140, 189, 237, 252, 320, 408, 444, 457, 460, 494, 583, 600, 620, 708, 808, 834, 863, 867, 871, 922, 928, 1058, 1069, 1333, 1344], "180": [411, 609, 808, 1341], "1800": [442, 1051], "1844": 165, "18446744073709551614": [1195, 1316], "185_000_000": 1325, "186": 1347, "1875": [637, 808, 890, 922], "1897": [420, 432, 1025, 1040], "18d": 928, "19": [140, 165, 226, 252, 320, 420, 444, 620, 625, 627, 629, 631, 697, 808, 853, 871, 922, 1025, 1053, 1066, 1274], "1920": 1339, "196": 1340, "1964": [867, 922], "1969": [1339, 1340], "1970": [65, 66, 155, 1325], "1972": 1325, "1976": [430, 461], "1977": [430, 461], "1978": [423, 424, 428, 430, 431, 433, 434, 438, 445, 447, 461, 1340], "1979": [430, 461], "1980": 449, "1985": [749, 752], "1990": [135, 1325], "1993": 1325, "1994": 1325, "1995": 135, "1998": [439, 1048], "1999": [267, 320, 439, 449, 928, 1048, 1058, 1342], "199992": [858, 922], "199994": [858, 922], "199996": [858, 922], "199998": [858, 922], "1_000_000": [197, 320, 1076, 1316], "1_234_500": 928, "1d": [211, 226, 252, 290, 320, 419, 439, 444, 449, 451, 454, 457, 460, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 754, 768, 795, 796, 808, 848, 853, 871, 922, 928, 1024, 1032, 1038, 1048, 1053, 1057, 1060, 1063, 1066, 1078, 1316], "1e": [11, 158, 159, 160, 161], "1e6": 11, "1h": [211, 226, 252, 290, 320, 426, 439, 444, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1031, 1033, 1048, 1053, 1066, 1078, 1316], "1i": [211, 252, 290, 320, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 808, 848, 871, 922, 1078, 1316], "1m": [211, 226, 252, 290, 320, 439, 444, 456, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1061, 1062, 1064, 1065, 1066, 1078, 1316], "1mo": [211, 226, 252, 290, 320, 422, 436, 437, 439, 443, 444, 450, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1027, 1044, 1045, 1046, 1048, 1049, 1050, 1052, 1053, 1059, 1066, 1067, 1078, 1316], "1n": [211, 226, 252, 290, 320, 439, 444, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1066, 1078, 1316], "1q": [211, 226, 252, 290, 320, 439, 444, 457, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1066], "1st_col": 928, "1u": [211, 226, 252, 290, 320, 439, 444, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1066, 1078, 1316], "1w": [211, 226, 252, 290, 320, 439, 444, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1066, 1078, 1316], "1w2d": [749, 750], "1y": [211, 226, 252, 290, 320, 439, 444, 457, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1066], "1y2mo": [439, 1048], "1zy3": [659, 1236], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 59, 60, 77, 81, 94, 97, 99, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 138, 144, 145, 147, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 167, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 333, 335, 336, 343, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 380, 385, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 417, 418, 420, 421, 422, 423, 424, 425, 426, 429, 432, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 480, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 574, 575, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 663, 665, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 778, 779, 782, 786, 787, 788, 789, 790, 791, 793, 796, 797, 798, 804, 808, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 927, 928, 932, 933, 934, 937, 940, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 978, 979, 990, 996, 998, 1000, 1001, 1002, 1003, 1005, 1006, 1008, 1009, 1010, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1023, 1026, 1028, 1029, 1031, 1033, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1045, 1046, 1050, 1051, 1052, 1053, 1056, 1066, 1068, 1069, 1070, 1071, 1072, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1123, 1124, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1183, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1236, 1242, 1244, 1246, 1247, 1248, 1250, 1251, 1253, 1256, 1257, 1262, 1263, 1265, 1266, 1267, 1270, 1271, 1273, 1274, 1275, 1276, 1279, 1281, 1283, 1284, 1286, 1287, 1288, 1289, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1316, 1321, 1325, 1326, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1345, 1346, 1347], "20": [38, 39, 40, 135, 140, 157, 162, 163, 164, 165, 169, 172, 180, 189, 193, 199, 215, 216, 237, 244, 246, 250, 267, 277, 278, 282, 296, 301, 320, 343, 344, 345, 399, 413, 420, 423, 424, 428, 431, 432, 433, 434, 438, 444, 445, 447, 449, 457, 460, 481, 488, 494, 558, 566, 577, 604, 623, 625, 627, 629, 631, 634, 636, 638, 664, 708, 723, 751, 760, 768, 787, 795, 808, 823, 834, 837, 840, 863, 866, 881, 895, 900, 922, 928, 1018, 1025, 1029, 1040, 1053, 1058, 1066, 1069, 1081, 1097, 1197, 1241, 1295, 1297, 1300, 1316, 1332, 1333, 1336, 1342], "200": [452, 453, 455, 614, 615, 808, 928, 1074, 1182, 1197, 1198, 1204, 1205, 1207, 1316, 1336], "2000": [420, 429, 432, 436, 437, 439, 928, 1025, 1034, 1040, 1045, 1046, 1048, 1054, 1325, 1339], "200000": [452, 858, 922], "200000000": 455, "2001": [16, 419, 420, 425, 427, 429, 432, 435, 439, 440, 441, 444, 448, 457, 458, 459, 460, 623, 625, 627, 629, 631, 634, 636, 638, 693, 808, 928, 1024, 1025, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1047, 1048, 1049, 1050, 1053, 1057, 1066, 1067, 1068, 1069, 1070, 1270], "2002": [135, 429, 439, 1034, 1048, 1070], "2003": [439, 760, 1048], "2004": [439, 1048], "2005": [439, 1048], "2006": [439, 1048], "2008": 1325, "200m": [452, 453, 455], "2010": [267, 320, 449, 928], "2011": [418, 1023], "2012": [418, 1023, 1342], "2013": 1051, "2016": [226, 320, 853, 922], "2017": [226, 320, 853, 922], "2018": [226, 320, 443, 853, 922, 1052], "2019": [226, 320, 853, 922], "202": 1340, "2020": [139, 150, 182, 189, 209, 226, 252, 320, 323, 417, 422, 426, 443, 446, 449, 450, 451, 452, 453, 454, 455, 456, 466, 620, 693, 695, 696, 735, 808, 826, 834, 853, 871, 922, 928, 1022, 1027, 1031, 1052, 1055, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1078, 1270, 1272, 1273, 1316, 1340], "2021": [182, 189, 209, 211, 290, 320, 693, 768, 826, 834, 848, 922, 928, 1028, 1029, 1035, 1056, 1270, 1339], "2022": [51, 182, 189, 209, 320, 421, 444, 457, 693, 749, 750, 752, 753, 754, 760, 826, 834, 922, 928, 1026, 1035, 1053, 1066, 1270], "2023": [16, 40, 129, 157, 224, 320, 421, 754, 768, 928, 1026], "2024": [157, 417, 423, 424, 428, 431, 433, 434, 438, 442, 445, 447, 600, 735, 748, 749, 751, 752, 754, 808, 928, 1022, 1051, 1339, 1342], "2025": [417, 442, 735, 928, 1022], "2026": 1340, "2030": 1339, "2031": 928, "2040": 449, "2047317070637311557": [212, 320], "2055938745": 129, "2065": [423, 424, 428, 431, 433, 434, 438, 445, 447], "2068": 165, "207": 1340, "2077": [267, 320, 449, 928, 1058, 1339, 1340], "2095": 165, "20_000": [40, 320], "20t08": 449, "20t18": 1058, "20word": 138, "21": [157, 189, 237, 269, 320, 420, 623, 625, 627, 629, 631, 634, 636, 638, 751, 760, 808, 834, 863, 922, 928, 1025, 1333], "213": 1347, "2147483647": 1347, "2147483648": [1168, 1316], "21d": 928, "22": [45, 49, 157, 165, 320, 425, 440, 444, 457, 459, 460, 621, 623, 625, 627, 629, 631, 634, 636, 638, 693, 751, 804, 808, 922, 928, 1053, 1066, 1069, 1203, 1270, 1316, 1339, 1340, 1347], "221": 1347, "2246e": [1226, 1289, 1316], "225": [444, 457, 1341], "22500": 786, "22_000_000": 1325, "22_500": 786, "23": [10, 165, 189, 211, 252, 282, 320, 421, 425, 428, 440, 442, 444, 449, 459, 620, 623, 625, 627, 629, 631, 634, 636, 638, 751, 754, 794, 795, 796, 808, 834, 848, 871, 881, 922, 928, 1026, 1033, 1051, 1300, 1316, 1346, 1347], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1325, "2337": [40, 320], "234": 27, "2345": 928, "23456789": 10, "235": 1347, "23h": 928, "24": [53, 157, 211, 226, 230, 252, 267, 290, 320, 407, 409, 425, 439, 440, 444, 451, 457, 459, 581, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 754, 795, 796, 808, 848, 853, 871, 922, 1015, 1048, 1053, 1060, 1066, 1119, 1316, 1339, 1346], "24030": 164, "249": [724, 808], "25": [1, 27, 40, 55, 129, 189, 193, 211, 226, 252, 277, 282, 290, 294, 320, 378, 413, 425, 426, 440, 444, 449, 457, 459, 466, 605, 607, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 717, 751, 752, 753, 754, 760, 770, 795, 796, 808, 834, 837, 848, 853, 860, 871, 890, 892, 922, 928, 979, 1017, 1018, 1031, 1053, 1058, 1066, 1072, 1078, 1100, 1186, 1191, 1256, 1316, 1333, 1338, 1344, 1345], "250": [724, 808, 1205, 1316, 1336, 1347], "2500": [224, 282, 320], "254508": [466, 808, 1078, 1316], "255": 1347, "256": [230, 320, 378, 979, 1186, 1316, 1338], "2560": 979, "259921": [397, 808, 1000, 1316, 1338], "25_000_000": 1325, "26": [38, 40, 157, 162, 163, 164, 165, 169, 189, 320, 426, 458, 834, 922, 1031], "266667": [189, 320, 834, 922], "27": [1, 55, 277, 313, 320, 408, 435, 441, 458, 708, 808, 912, 928, 1189, 1295, 1316, 1346, 1347], "270": 1341, "28": [273, 278, 320, 329, 443, 460, 808, 1052, 1069, 1297, 1316, 1339, 1341, 1346, 1347], "283185": [609, 808], "2846": 320, "285714": [495, 808, 1104, 1316], "289962": 1341, "28_341_469": 1325, "29": [16, 157, 418, 436, 1023, 1045], "29096": 1347, "290994": [882, 922], "292432": [940, 1316], "292893": [466, 808, 1078, 1316], "2_color_scal": [40, 320], "2d": [252, 277, 278, 320, 439, 620, 768, 808, 871, 922, 1023, 1030], "2h": [623, 625, 627, 629, 631, 634, 636, 638, 808], "2i": [211, 320, 848, 922], "2m": [928, 1043], "2x": 164, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 59, 60, 77, 94, 97, 99, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 138, 140, 144, 145, 146, 149, 155, 157, 158, 159, 160, 161, 164, 165, 166, 167, 169, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 329, 330, 331, 332, 334, 345, 346, 347, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 413, 414, 415, 416, 417, 419, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 433, 434, 435, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 457, 458, 460, 461, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 507, 508, 509, 510, 511, 512, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 553, 554, 555, 556, 557, 558, 559, 579, 580, 581, 582, 583, 584, 586, 588, 590, 591, 594, 597, 598, 600, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 650, 652, 653, 654, 657, 658, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 694, 695, 700, 701, 704, 705, 706, 707, 708, 709, 711, 715, 716, 719, 720, 721, 723, 724, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 808, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 855, 856, 857, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 899, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 927, 928, 933, 934, 937, 939, 941, 942, 943, 945, 946, 947, 948, 949, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 980, 990, 991, 992, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1024, 1026, 1027, 1030, 1032, 1033, 1034, 1036, 1037, 1038, 1040, 1042, 1043, 1044, 1049, 1052, 1053, 1054, 1055, 1057, 1058, 1059, 1061, 1062, 1064, 1066, 1068, 1069, 1071, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1123, 1124, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1162, 1163, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1237, 1238, 1239, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1252, 1253, 1256, 1257, 1258, 1259, 1260, 1264, 1271, 1272, 1277, 1278, 1281, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1296, 1297, 1298, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1316, 1321, 1325, 1326, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1345, 1346, 1347], "30": [40, 189, 199, 211, 215, 244, 250, 273, 294, 320, 323, 343, 344, 345, 413, 421, 423, 424, 428, 431, 433, 434, 435, 436, 438, 441, 443, 444, 445, 447, 449, 450, 457, 458, 488, 566, 645, 751, 768, 794, 795, 808, 834, 840, 848, 866, 892, 922, 928, 1018, 1026, 1045, 1052, 1053, 1058, 1059, 1066, 1097, 1316, 1321, 1332, 1333, 1336, 1338, 1339, 1341, 1342, 1345, 1347], "300": [273, 320, 487, 598, 615, 808, 928, 1198, 1204, 1205, 1207, 1316, 1336], "3000": 928, "3002": [420, 432, 1025, 1040], "30103": [554, 808, 1338], "3022416320763508302": [1098, 1316], "30_000": [40, 320], "30m": [211, 320, 444, 457, 848, 922, 1053, 1066], "30t16": 449, "31": [55, 189, 267, 320, 420, 421, 425, 432, 436, 439, 442, 450, 664, 693, 748, 751, 760, 768, 787, 834, 922, 928, 1023, 1025, 1026, 1030, 1040, 1045, 1051, 1058, 1059, 1197, 1241, 1270, 1316, 1340, 1342, 1347], "31t06": 1058, "32": [53, 65, 70, 74, 84, 221, 226, 252, 320, 581, 620, 645, 808, 853, 871, 922, 1019, 1049, 1186, 1208, 1316, 1333, 1339], "321": [27, 1347], "3212": [697, 1274], "321cba": 1339, "3265500": 928, "32971": [460, 1069], "32974": [460, 1069], "32976": [460, 1069], "32bit": [277, 320], "33": [189, 237, 320, 639, 808, 834, 863, 922, 1208, 1316, 1340], "333": [16, 640, 808, 1074, 1182, 1214, 1316], "33333": 1342, "333333": [217, 320, 583, 851, 922, 1186, 1212, 1316, 1333], "34": [189, 320, 679, 693, 834, 922, 1257, 1270], "3420": [697, 1274], "343622": [650, 808], "345": [394, 395, 675, 676, 995, 996, 1252, 1253], "3450": [1214, 1316], "3456": 928, "34776706224699483": [1228, 1316], "35": [40, 320, 413, 449, 751, 808, 1018, 1316], "350": [320, 323, 487, 598, 808, 1205, 1316, 1321], "3500": [1214, 1316], "356": [425, 440, 459], "356194": [731, 732, 1341], "357": [425, 440, 459], "358": [425, 440, 459], "359": [425, 440, 459], "36": [189, 320, 834, 922, 1344], "360": [411, 609, 808, 1341], "361": 1347, "363961": [546, 1158], "366": [440, 1049], "37": [12, 928], "370h": [466, 808, 1078, 1316], "37338": 1347, "38": [40, 129, 162, 165, 320], "38180177416060584": [632, 808, 1209, 1316], "381802": [632, 808, 1209, 1316], "386294": [555, 808, 1167, 1316, 1338], "389056": [470, 808, 1081, 1316, 1338], "39": [636, 760, 808], "39m": 928, "3_color_scal": [40, 320], "3d12h4m25": [211, 226, 252, 290, 320, 444, 457, 466, 620, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1053, 1066, 1078, 1316], "3f": [138, 693, 696, 1270, 1273], "3i": [211, 252, 320, 848, 922], "3rd": [1248, 1271], "3xy": [659, 1236], "4": [1, 8, 13, 17, 25, 35, 37, 39, 40, 41, 42, 45, 51, 52, 53, 54, 55, 59, 60, 77, 97, 122, 123, 124, 125, 126, 127, 128, 129, 132, 149, 157, 169, 178, 179, 180, 181, 182, 183, 184, 188, 190, 194, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 239, 240, 241, 243, 244, 245, 246, 252, 254, 255, 262, 263, 266, 270, 271, 272, 273, 274, 275, 278, 281, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 299, 300, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 333, 335, 347, 354, 355, 356, 358, 359, 360, 361, 362, 364, 366, 367, 368, 369, 371, 372, 378, 389, 390, 391, 394, 395, 397, 398, 399, 403, 404, 407, 408, 409, 411, 414, 421, 424, 425, 432, 440, 441, 442, 443, 444, 445, 446, 449, 451, 454, 456, 457, 459, 463, 464, 466, 470, 471, 473, 474, 475, 477, 478, 479, 480, 482, 483, 484, 485, 486, 489, 491, 493, 494, 495, 496, 505, 506, 510, 511, 512, 519, 520, 521, 522, 523, 525, 526, 528, 536, 538, 539, 540, 541, 542, 543, 544, 548, 549, 554, 557, 558, 559, 579, 581, 583, 584, 586, 588, 590, 591, 594, 595, 596, 599, 600, 602, 603, 604, 605, 608, 610, 614, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 642, 644, 647, 651, 652, 653, 654, 657, 659, 663, 666, 669, 671, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 691, 692, 693, 694, 698, 703, 704, 706, 707, 708, 709, 711, 714, 715, 716, 717, 723, 724, 726, 728, 729, 731, 732, 733, 734, 736, 737, 738, 739, 740, 742, 744, 745, 746, 747, 748, 751, 752, 753, 755, 757, 758, 762, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 787, 788, 789, 790, 791, 792, 793, 795, 796, 797, 798, 804, 808, 823, 824, 826, 827, 828, 829, 830, 833, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 867, 868, 871, 877, 878, 879, 880, 881, 882, 883, 884, 885, 887, 888, 889, 890, 891, 892, 895, 896, 898, 899, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 927, 928, 932, 937, 940, 947, 954, 956, 957, 958, 960, 961, 962, 963, 964, 966, 968, 969, 970, 971, 972, 973, 979, 990, 995, 996, 1001, 1002, 1004, 1010, 1015, 1017, 1019, 1029, 1033, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1050, 1052, 1053, 1055, 1060, 1063, 1065, 1066, 1067, 1068, 1075, 1078, 1082, 1083, 1085, 1086, 1091, 1092, 1094, 1099, 1100, 1103, 1104, 1105, 1106, 1110, 1113, 1114, 1115, 1116, 1118, 1124, 1131, 1132, 1133, 1134, 1135, 1140, 1144, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1160, 1161, 1176, 1179, 1180, 1183, 1186, 1187, 1188, 1189, 1193, 1194, 1197, 1198, 1199, 1202, 1206, 1208, 1209, 1210, 1211, 1212, 1215, 1217, 1221, 1222, 1225, 1228, 1229, 1230, 1234, 1236, 1240, 1243, 1246, 1248, 1252, 1253, 1254, 1255, 1260, 1262, 1263, 1268, 1269, 1270, 1271, 1275, 1280, 1281, 1284, 1286, 1288, 1294, 1297, 1299, 1301, 1307, 1316, 1321, 1325, 1326, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1344, 1345, 1346, 1347], "40": [40, 189, 199, 226, 244, 320, 444, 449, 457, 488, 552, 697, 708, 808, 834, 853, 866, 922, 928, 1035, 1066, 1164, 1274, 1332, 1333, 1336, 1339], "400": [289, 320, 452, 453, 455, 889, 922, 1204, 1205, 1207, 1316, 1336], "4000000": [1076, 1316], "404": [227, 320, 665, 667, 854, 922, 1242, 1244], "4096": 1338, "41": [189, 320, 636, 808, 834, 922, 1333, 1347], "412277": 165, "414214": [654, 808, 1231, 1316, 1338], "4160": 55, "416147": 1341, "4164": [226, 320, 853, 922], "42": [55, 189, 212, 237, 252, 320, 449, 620, 808, 834, 863, 871, 922, 1098, 1316, 1332, 1346], "424778": [609, 808], "428571": [465, 808, 1077, 1316], "429101": 1333, "4294967296": [45, 320], "43": [189, 252, 320, 408, 620, 636, 808, 834, 871, 922], "4321": 928, "433013": [633, 808, 882, 922], "44": [10, 237, 320, 414, 808, 863, 922], "4411": [226, 320, 853, 922], "44225": [1000, 1316], "444": 10, "44444444444": 10, "45": [40, 189, 252, 320, 421, 444, 457, 620, 636, 659, 666, 705, 732, 751, 768, 794, 795, 808, 834, 871, 922, 928, 1026, 1053, 1058, 1066, 1236, 1243, 1283, 1338, 1339, 1341, 1345, 1347], "450": [1205, 1316], "45000": 786, "4500000": 928, "456": [9, 10, 421, 928, 1026, 1293, 1316], "456000": [421, 1026], "456001\u00b5": 928, "4566": [226, 320, 853, 922], "456789": [449, 928, 1054], "456789\u00b5": 928, "456m": 928, "457658": 1341, "459148": [462, 808], "46": 928, "4696": [226, 320, 853, 922], "47": [51, 189, 320, 636, 808, 834, 922, 928, 1333], "470": [867, 922], "47033": [632, 808, 1209, 1316], "47033046033698594": [632, 808, 1209, 1316], "475": [867, 922], "48": [12, 165, 252, 320, 620, 708, 808, 871, 922, 928], "4827": [226, 320, 853, 922], "485": 1347, "49": [189, 320, 834, 922, 928], "492474": [466, 808, 1078, 1316], "498": [227, 320, 854, 922], "4_500_000": 928, "4ab4a": 1339, "4d": [466, 808, 1078, 1316], "4f6228": [40, 320], "4f71": [40, 320], "4x": [223, 320], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 35, 37, 39, 41, 42, 45, 51, 52, 54, 55, 59, 97, 122, 125, 126, 127, 128, 129, 131, 136, 157, 158, 160, 163, 165, 169, 179, 182, 183, 184, 189, 190, 193, 198, 199, 200, 201, 202, 204, 205, 206, 208, 209, 210, 211, 213, 214, 216, 217, 219, 221, 222, 223, 225, 226, 227, 228, 229, 230, 232, 233, 234, 239, 240, 241, 243, 245, 246, 247, 252, 255, 262, 263, 266, 267, 270, 271, 272, 273, 274, 275, 277, 278, 281, 282, 284, 287, 288, 289, 290, 293, 294, 296, 297, 299, 301, 302, 303, 304, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 329, 330, 333, 348, 349, 354, 355, 356, 358, 360, 364, 369, 371, 377, 378, 389, 390, 391, 394, 395, 398, 399, 409, 410, 411, 413, 414, 417, 420, 421, 422, 423, 424, 428, 431, 432, 433, 434, 438, 443, 445, 446, 447, 449, 450, 456, 460, 464, 466, 468, 469, 472, 474, 478, 479, 483, 484, 486, 489, 491, 494, 496, 499, 502, 503, 504, 505, 506, 510, 512, 519, 522, 523, 525, 526, 528, 531, 533, 534, 538, 539, 540, 541, 542, 543, 547, 548, 552, 558, 579, 581, 583, 595, 599, 600, 601, 602, 603, 604, 605, 607, 608, 610, 614, 615, 616, 617, 619, 620, 621, 622, 624, 625, 626, 627, 628, 630, 633, 635, 636, 637, 638, 639, 642, 653, 659, 669, 670, 671, 674, 675, 676, 694, 698, 709, 711, 715, 716, 717, 729, 731, 732, 734, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 749, 751, 754, 755, 756, 757, 758, 762, 764, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 786, 787, 789, 791, 792, 793, 797, 804, 808, 826, 827, 828, 829, 830, 834, 837, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 856, 857, 860, 861, 867, 871, 877, 878, 879, 880, 881, 882, 883, 884, 888, 889, 891, 892, 895, 896, 898, 900, 901, 902, 903, 906, 907, 908, 909, 910, 911, 912, 913, 922, 928, 937, 940, 944, 947, 950, 951, 954, 956, 957, 958, 960, 962, 966, 971, 972, 973, 978, 979, 990, 995, 1002, 1004, 1011, 1015, 1016, 1017, 1018, 1019, 1022, 1025, 1026, 1027, 1028, 1029, 1030, 1040, 1052, 1054, 1055, 1056, 1058, 1059, 1065, 1067, 1068, 1069, 1075, 1078, 1080, 1082, 1083, 1084, 1094, 1099, 1100, 1103, 1105, 1109, 1112, 1124, 1131, 1134, 1135, 1140, 1143, 1146, 1150, 1151, 1152, 1153, 1154, 1155, 1159, 1160, 1164, 1168, 1176, 1183, 1186, 1187, 1188, 1191, 1192, 1193, 1194, 1198, 1199, 1202, 1203, 1204, 1205, 1207, 1208, 1211, 1215, 1217, 1222, 1228, 1231, 1236, 1246, 1247, 1248, 1251, 1252, 1271, 1275, 1288, 1295, 1297, 1300, 1301, 1304, 1307, 1316, 1321, 1326, 1329, 1331, 1333, 1334, 1335, 1338, 1339, 1340, 1341, 1344, 1346, 1347], "50": [12, 27, 40, 189, 199, 209, 320, 399, 444, 449, 457, 749, 750, 808, 834, 922, 928, 1004, 1017, 1066, 1256, 1316, 1332, 1333], "500": [40, 289, 320, 323, 423, 424, 428, 431, 433, 434, 438, 445, 447, 889, 922, 1039, 1041, 1047, 1204, 1205, 1207, 1316, 1321], "5000": [282, 320, 1300, 1316], "50000": 136, "500000": [431, 1039], "500000000": [438, 1047], "5000555": 928, "500_000": [423, 424, 428, 431, 433, 434, 438, 445, 447], "500m": [1039, 1041, 1047], "51": 928, "512": [45, 137, 223, 320, 378, 605, 808, 979, 1186, 1316], "51966": [698, 1275], "52": [294, 320, 458, 639, 808, 892, 922], "523599": 1341, "527525": [1210, 1316], "53": [458, 1067, 1344], "533316061": 1325, "533_316_061": 1325, "54": [470, 808, 1120, 1316, 1338, 1347], "540": [411, 609, 808], "540302": 1341, "543": 9, "543081": [401, 808, 1007, 1316], "5432": 137, "54321": 9, "544": 1347, "544705": 740, "549306": [944, 1316], "55": [40, 53, 320, 492, 808, 1102, 1316, 1335, 1339, 1340], "5555": 928, "55550": 928, "56": [129, 679, 712, 808, 1257], "566371": [609, 808], "567": 27, "56789": [1001, 1090, 1213, 1316], "57": [636, 808, 1213, 1316, 1341, 1347], "570796": [337, 339, 808, 939, 941, 1316, 1341], "575050513": [162, 165], "58": [245, 320], "581139": [1017, 1316], "584963": [553, 808], "587401": [397, 808, 1338], "59": [129, 189, 320, 421, 434, 442, 445, 449, 479, 751, 794, 795, 796, 808, 834, 922, 928, 1026, 1043, 1051, 1054], "59815": [470, 808, 1338], "5_000_555": 928, "5th": [40, 320], "6": [1, 8, 13, 35, 37, 39, 40, 41, 42, 43, 44, 45, 50, 52, 54, 59, 89, 90, 97, 122, 125, 126, 127, 128, 140, 144, 145, 157, 179, 182, 185, 186, 190, 191, 192, 194, 195, 196, 198, 199, 202, 205, 206, 207, 208, 209, 211, 213, 215, 216, 217, 219, 221, 222, 223, 225, 226, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 245, 246, 247, 249, 250, 252, 253, 254, 255, 256, 257, 258, 260, 263, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 284, 286, 287, 288, 290, 291, 292, 293, 294, 296, 297, 303, 313, 314, 320, 323, 324, 329, 333, 354, 355, 356, 358, 364, 372, 390, 391, 394, 395, 407, 408, 414, 417, 421, 425, 435, 439, 440, 441, 452, 453, 455, 458, 459, 462, 464, 473, 474, 479, 480, 483, 489, 491, 494, 512, 513, 514, 523, 526, 539, 540, 541, 542, 546, 558, 559, 595, 599, 606, 609, 610, 611, 616, 618, 620, 622, 624, 626, 628, 630, 633, 635, 636, 637, 642, 647, 653, 659, 664, 675, 676, 698, 709, 711, 716, 724, 726, 728, 735, 737, 744, 745, 746, 748, 751, 755, 758, 764, 769, 770, 774, 787, 791, 804, 808, 826, 829, 830, 831, 832, 835, 836, 838, 839, 840, 841, 844, 845, 846, 848, 849, 851, 852, 853, 855, 857, 858, 865, 867, 869, 871, 872, 873, 875, 877, 878, 879, 880, 881, 884, 887, 888, 891, 892, 895, 896, 902, 912, 913, 922, 928, 954, 956, 957, 958, 960, 966, 995, 1002, 1006, 1008, 1013, 1014, 1019, 1022, 1048, 1058, 1068, 1075, 1082, 1094, 1100, 1125, 1126, 1135, 1138, 1151, 1152, 1153, 1154, 1158, 1176, 1190, 1193, 1194, 1199, 1201, 1206, 1208, 1210, 1212, 1217, 1222, 1225, 1236, 1241, 1252, 1275, 1287, 1297, 1316, 1321, 1326, 1329, 1331, 1333, 1334, 1338, 1344, 1345, 1347], "60": [40, 132, 199, 245, 320, 428, 433, 434, 445, 456, 479, 636, 693, 808, 1049, 1054, 1065, 1195, 1270, 1316, 1341], "600": [289, 320, 452, 453, 455, 889, 922, 928], "60000": 431, "600000": 928, "60000000": 438, "60206": [554, 808, 1338], "605551": 789, "605551275463989": 789, "609438": 1338, "60_000": [423, 424, 428, 431, 433, 434, 438, 445, 447], "61": [245, 320], "625": [630, 808], "626172": [661, 1238], "63": [636, 808], "63204": 1347, "6331e16": [1289, 1316, 1341], "636253": 1341, "64": [1, 53, 55, 66, 68, 71, 75, 82, 85, 156, 178, 282, 320, 402, 581, 605, 808, 1186, 1189, 1316, 1338], "64030": [698, 1275], "642093": 1341, "647961": 165, "64bit": [157, 612, 808, 1195, 1316], "65": [193, 320, 837, 922, 1072, 1316], "650": [487, 598, 808], "65280": [698, 1275], "654": [27, 787, 881, 922], "65432": 1342, "654321": 567, "65536": 1338, "65552": [377, 978], "66": [226, 289, 320, 636, 724, 808, 853, 889, 922, 1120, 1208, 1316], "663053": 129, "666": 928, "666000": 928, "666667": [189, 217, 291, 308, 320, 465, 773, 808, 834, 851, 890, 907, 922, 1077, 1316], "666f6f": [661, 1238], "67500": 786, "676": [227, 320, 854, 922], "678": [659, 666, 1236, 1243], "6789": [28, 928], "67890": 28, "686241": 1333, "69": [636, 808, 1120, 1316], "693147": [555, 808, 1165, 1167, 1316, 1338], "6_000_000": 1325, "7": [1, 16, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 52, 54, 59, 144, 145, 157, 172, 179, 182, 185, 186, 187, 189, 191, 192, 195, 196, 198, 202, 205, 207, 211, 213, 215, 217, 225, 229, 231, 233, 235, 237, 238, 242, 245, 247, 249, 250, 252, 253, 255, 256, 257, 258, 260, 263, 265, 268, 269, 270, 271, 276, 278, 279, 280, 288, 290, 291, 292, 320, 323, 324, 329, 333, 355, 356, 358, 367, 408, 420, 421, 425, 432, 440, 443, 444, 449, 457, 459, 470, 483, 489, 494, 495, 512, 526, 539, 540, 541, 542, 599, 600, 610, 616, 620, 635, 636, 653, 669, 697, 711, 735, 744, 745, 748, 751, 752, 758, 763, 769, 770, 787, 791, 808, 826, 831, 832, 834, 836, 839, 841, 844, 846, 848, 849, 851, 852, 857, 863, 865, 868, 869, 871, 872, 873, 877, 881, 884, 922, 928, 944, 957, 958, 960, 969, 1025, 1026, 1030, 1035, 1040, 1052, 1053, 1058, 1066, 1068, 1081, 1104, 1119, 1138, 1151, 1152, 1153, 1154, 1198, 1199, 1211, 1217, 1246, 1274, 1316, 1321, 1326, 1331, 1333, 1334, 1335, 1338, 1340, 1344, 1347], "70": [189, 320, 724, 752, 808, 834, 922, 1120, 1316, 1333], "700": [289, 320, 889, 922], "702963": [40, 320], "7051579356916758811": 151, "707107": [366, 467, 633, 634, 731, 808, 968, 1079, 1316, 1341], "712389": 1341, "714": 1347, "714286": [495, 808, 1104, 1316], "718281828459045": [10, 462, 553, 808, 1072, 1165, 1316], "718282": [470, 808, 1081, 1316, 1338], "720": [411, 609, 808], "7264": 1347, "732051": [1231, 1316], "7415e16": 165, "742": [227, 320, 854, 922], "75": [40, 189, 193, 320, 333, 599, 607, 622, 624, 626, 628, 633, 635, 637, 770, 808, 834, 837, 922, 928, 1017, 1100, 1120, 1191, 1256, 1316, 1333, 1341, 1347], "7500": [224, 320], "7508": 1347, "754": [717, 808], "754888": [462, 808], "761594": [713, 808, 1290, 1316], "7654": 928, "765431": 1054, "7654321": 27, "76933c": [40, 320], "77": 1058, "78": [9, 679, 1257], "780": 9, "784": [226, 320, 853, 922], "785398": [341, 731, 732, 808, 943, 1316, 1341], "789": [10, 928], "79": [1120, 1316], "7d": 928, "8": [1, 11, 35, 37, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 59, 76, 80, 86, 144, 145, 157, 179, 182, 185, 186, 187, 189, 191, 192, 194, 195, 196, 198, 202, 205, 207, 209, 213, 215, 222, 225, 226, 227, 229, 230, 231, 233, 235, 238, 247, 249, 250, 252, 253, 255, 256, 257, 258, 260, 263, 265, 267, 268, 269, 271, 276, 278, 279, 280, 288, 291, 292, 294, 320, 333, 335, 347, 355, 356, 358, 405, 408, 409, 421, 449, 483, 490, 494, 495, 520, 522, 526, 539, 540, 541, 542, 581, 599, 600, 605, 616, 617, 621, 645, 651, 653, 677, 678, 693, 724, 729, 735, 740, 742, 745, 747, 755, 757, 762, 763, 766, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 787, 789, 792, 793, 797, 808, 826, 831, 832, 834, 836, 838, 839, 841, 844, 846, 849, 852, 853, 854, 857, 858, 867, 869, 872, 873, 877, 881, 884, 892, 922, 928, 957, 958, 960, 1008, 1015, 1035, 1100, 1104, 1119, 1132, 1134, 1138, 1151, 1152, 1153, 1154, 1186, 1189, 1199, 1202, 1203, 1206, 1208, 1210, 1212, 1254, 1255, 1270, 1316, 1325, 1326, 1331, 1333, 1334, 1335, 1338, 1339, 1340, 1344, 1347], "80": [40, 193, 320, 837, 922], "800": [452, 453, 455, 1058], "8000": 137, "803065983": 129, "81": 1338, "814697265625": [1076, 1316], "816497": [268, 320], "8192": 135, "82": [226, 320, 853, 922], "8257e14": 1347, "83": [226, 320, 853, 922], "833": [226, 320, 853, 922], "833333": [308, 907], "848062": 1341, "848808": 165, "85": [40, 320, 1120, 1316, 1347], "850": [487, 598, 808], "8568409950394724": [1072, 1316], "8589934592": [645, 808], "86": 1347, "8601": 1339, "87": 1347, "876": 9, "88": [189, 320, 834, 922], "881374": [340, 808, 942, 1316], "888": [787, 881, 922], "8_000_000": 1325, "8a": [975, 976], "8nin": 1347, "9": [1, 9, 35, 37, 39, 40, 41, 42, 45, 51, 59, 179, 187, 189, 202, 204, 213, 217, 227, 229, 230, 245, 252, 254, 255, 258, 270, 271, 288, 292, 294, 313, 320, 329, 333, 335, 347, 355, 356, 358, 363, 365, 405, 408, 411, 421, 449, 475, 483, 494, 500, 520, 526, 537, 545, 583, 599, 600, 609, 616, 620, 621, 632, 635, 636, 647, 651, 666, 697, 705, 708, 738, 744, 745, 748, 751, 763, 796, 808, 834, 844, 849, 851, 854, 857, 871, 873, 884, 892, 912, 922, 928, 952, 953, 957, 958, 960, 965, 967, 1017, 1030, 1039, 1041, 1047, 1053, 1066, 1067, 1110, 1119, 1132, 1138, 1149, 1157, 1199, 1203, 1209, 1211, 1213, 1225, 1243, 1274, 1283, 1316, 1325, 1326, 1331, 1334, 1335, 1344], "90": [189, 227, 320, 697, 834, 854, 922, 1274, 1333, 1341], "90000": 786, "901234": [1001, 1090, 1213, 1316], "909": [226, 320, 853, 922], "910": [226, 320, 666, 853, 922, 1243], "910t": [659, 666, 1236, 1243], "914": [226, 320, 853, 922], "9223372036854775807": [720, 808], "9223372036854775808": [556, 808], "927295": 1341, "928571": [468, 808, 1080, 1316], "93": [1120, 1316], "94": [330, 808], "9477376373212048": [1120, 1316], "95": [17, 330, 808, 928], "95b3d7": [40, 320], "96": [17, 189, 320, 330, 808, 834, 922, 1120, 1316], "961": 55, "963624": [467, 808, 1079, 1316], "964028": [245, 320], "96_067_179": 1325, "97": [17, 216, 320, 330, 808, 1120, 1316], "9774092659964970114": [488, 808], "978307200": [427, 1032], "978307200000": 448, "978307200000000": [427, 448, 1032, 1057], "978307200000000000": 1057, "978393600": [427, 1032], "978393600000": 448, "978393600000000": [427, 448, 1032, 1057], "978393600000000000": 1057, "978480000": [427, 1032], "978480000000": 448, "978480000000000": [427, 448, 1032, 1057], "978480000000000000": 1057, "98": [17, 216, 245, 320, 389, 482, 485, 652, 697, 715, 808, 1274], "987": [27, 567], "987000": 928, "9876": 9, "987654": [27, 928], "987654321": 10, "9876543210": 129, "987m": 928, "988": 10, "99": [17, 40, 200, 201, 216, 219, 245, 289, 320, 330, 389, 472, 474, 482, 485, 652, 715, 798, 808, 842, 843, 889, 922, 1058, 1072, 1084, 1316, 1338], "9914e218": 165, "993": [1100, 1316], "998347": [245, 320], "999": [420, 432, 928, 1025, 1040, 1336, 1347], "999000": 928, "999954": [245, 320], "999999": [442, 703, 751, 794, 795, 796, 928, 1051, 1058, 1280], "999999\u00b5": 928, "9bbb59": [40, 320], "A": [13, 37, 40, 45, 46, 57, 58, 63, 69, 129, 135, 136, 137, 138, 149, 151, 156, 171, 186, 195, 204, 211, 226, 232, 234, 239, 245, 270, 273, 288, 289, 290, 294, 295, 320, 328, 395, 415, 416, 421, 446, 449, 463, 464, 472, 484, 486, 498, 501, 503, 504, 510, 550, 557, 558, 571, 585, 594, 595, 617, 622, 624, 626, 628, 630, 633, 635, 637, 657, 658, 659, 665, 666, 667, 668, 669, 670, 671, 674, 676, 679, 680, 681, 683, 694, 703, 738, 754, 755, 759, 808, 832, 839, 848, 853, 869, 889, 892, 893, 922, 928, 996, 1020, 1021, 1026, 1055, 1058, 1074, 1084, 1182, 1204, 1205, 1207, 1210, 1211, 1212, 1234, 1235, 1236, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1251, 1253, 1256, 1257, 1258, 1260, 1271, 1280, 1316, 1325, 1326, 1329, 1342, 1344], "AND": [725, 726, 787, 928, 1335], "ANDs": [380, 808, 981, 1316], "AS": [267, 320, 787, 788, 881, 922, 1325, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1346], "And": [701, 1278], "As": [12, 50, 89, 90, 122, 124, 125, 126, 128, 140, 144, 145, 153, 202, 277, 282, 320, 550, 798, 844, 922], "At": [45, 245, 320], "BY": [787, 881, 922, 1325, 1328, 1334, 1343, 1344], "Be": 922, "By": [5, 12, 14, 30, 51, 135, 136, 149, 211, 225, 226, 252, 254, 263, 268, 290, 291, 320, 364, 439, 444, 457, 543, 546, 552, 600, 615, 620, 623, 625, 627, 629, 631, 634, 636, 638, 644, 655, 722, 742, 749, 750, 752, 753, 754, 768, 789, 795, 796, 797, 808, 829, 848, 852, 853, 871, 877, 882, 890, 922, 966, 1048, 1053, 1066, 1155, 1198, 1221, 1232, 1306, 1316], "For": [14, 39, 40, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 193, 194, 199, 225, 226, 245, 252, 277, 306, 320, 323, 436, 437, 449, 465, 467, 468, 479, 550, 559, 571, 612, 650, 657, 665, 666, 667, 669, 671, 694, 744, 754, 758, 759, 804, 808, 837, 838, 853, 871, 905, 922, 926, 1058, 1077, 1079, 1080, 1083, 1170, 1195, 1228, 1234, 1242, 1243, 1244, 1246, 1248, 1271, 1295, 1316, 1321], "IF": 1337, "If": [33, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 59, 67, 122, 123, 124, 125, 126, 127, 128, 132, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 166, 167, 168, 178, 182, 194, 199, 202, 209, 211, 213, 221, 222, 223, 226, 229, 230, 234, 241, 245, 252, 254, 255, 256, 260, 263, 265, 267, 270, 271, 274, 275, 277, 278, 284, 285, 287, 288, 289, 320, 323, 332, 334, 357, 364, 369, 377, 391, 417, 421, 422, 436, 437, 446, 449, 475, 490, 496, 508, 529, 538, 543, 544, 550, 558, 559, 566, 567, 573, 575, 600, 605, 607, 610, 612, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 644, 646, 650, 651, 656, 666, 667, 669, 671, 672, 673, 683, 684, 685, 686, 688, 689, 690, 693, 694, 695, 696, 700, 703, 721, 725, 727, 730, 734, 735, 739, 740, 744, 749, 750, 752, 753, 754, 757, 758, 764, 765, 766, 768, 770, 774, 780, 783, 784, 785, 790, 792, 795, 796, 798, 799, 808, 829, 830, 838, 840, 844, 848, 852, 853, 858, 862, 869, 871, 875, 877, 879, 881, 886, 888, 889, 897, 905, 915, 922, 926, 927, 928, 935, 936, 959, 966, 971, 978, 991, 1004, 1022, 1026, 1027, 1045, 1046, 1055, 1058, 1083, 1099, 1100, 1105, 1119, 1120, 1124, 1141, 1150, 1155, 1156, 1162, 1170, 1189, 1191, 1193, 1195, 1197, 1198, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1217, 1219, 1221, 1224, 1228, 1229, 1233, 1243, 1244, 1246, 1248, 1249, 1250, 1256, 1260, 1261, 1262, 1263, 1265, 1266, 1267, 1270, 1271, 1272, 1273, 1277, 1280, 1288, 1291, 1295, 1297, 1305, 1316, 1321, 1325, 1326, 1328, 1336, 1344], "In": [51, 58, 137, 139, 150, 151, 154, 165, 169, 174, 179, 197, 199, 202, 211, 226, 227, 230, 241, 245, 252, 278, 287, 320, 323, 558, 559, 620, 679, 680, 808, 830, 844, 848, 853, 854, 871, 888, 922, 1076, 1083, 1189, 1194, 1257, 1316, 1321], "It": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 50, 57, 58, 67, 69, 72, 90, 132, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 176, 189, 227, 237, 244, 267, 277, 282, 288, 289, 297, 306, 320, 323, 324, 409, 410, 444, 490, 550, 559, 570, 607, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 737, 784, 785, 804, 808, 825, 829, 830, 834, 840, 854, 858, 863, 881, 889, 896, 905, 922, 930, 999, 1015, 1016, 1053, 1100, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1216, 1218, 1295, 1300, 1316, 1321], "Its": [212, 320, 488, 808, 1098, 1316], "NO": 928, "NOT": [125, 222, 261, 320, 550, 569, 643, 808, 876, 922, 1344], "No": [20, 225, 320, 852, 922], "Not": [200, 225, 320, 473, 503, 504, 808, 829, 842, 852, 922, 1085, 1316], "ON": 1344, "OR": [727, 728, 844, 922, 928, 1335], "ORs": [385, 808, 986, 1316], "On": [717, 808, 856, 922], "One": [51, 189, 241, 277, 282, 320, 333, 599, 729, 741, 757, 763, 766, 773, 775, 778, 779, 788, 808, 834, 922, 928, 1017, 1316], "Or": [210, 211, 226, 252, 266, 290, 299, 320, 323, 466, 620, 653, 749, 750, 752, 753, 795, 796, 798, 804, 808, 847, 848, 853, 871, 880, 898, 922, 1078, 1316], "That": [141, 858, 922], "The": [20, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 56, 57, 60, 65, 66, 68, 69, 77, 81, 82, 90, 91, 93, 122, 124, 125, 126, 128, 135, 136, 137, 138, 140, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 158, 159, 160, 161, 165, 166, 167, 169, 171, 181, 189, 190, 192, 193, 194, 195, 198, 199, 202, 209, 210, 211, 212, 217, 223, 225, 226, 227, 230, 237, 243, 245, 252, 253, 254, 255, 258, 259, 260, 267, 277, 278, 283, 286, 290, 294, 295, 297, 298, 299, 306, 320, 331, 372, 373, 374, 375, 389, 390, 410, 412, 415, 416, 417, 425, 435, 439, 440, 444, 446, 449, 457, 458, 469, 472, 475, 479, 480, 488, 521, 525, 558, 559, 573, 600, 607, 610, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 647, 650, 656, 660, 661, 665, 670, 671, 672, 673, 677, 678, 679, 680, 688, 689, 690, 691, 692, 693, 694, 704, 708, 714, 715, 716, 735, 738, 756, 760, 768, 770, 784, 785, 786, 787, 790, 798, 800, 801, 803, 804, 808, 809, 810, 813, 815, 816, 817, 824, 829, 834, 835, 837, 838, 840, 841, 844, 847, 848, 851, 852, 853, 854, 858, 863, 867, 871, 873, 874, 875, 881, 885, 887, 892, 893, 896, 898, 905, 922, 926, 927, 928, 934, 937, 974, 975, 976, 990, 1003, 1016, 1017, 1020, 1021, 1022, 1030, 1044, 1048, 1049, 1053, 1055, 1058, 1066, 1067, 1083, 1084, 1087, 1098, 1133, 1137, 1170, 1189, 1191, 1193, 1197, 1198, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1225, 1228, 1233, 1237, 1238, 1247, 1248, 1249, 1250, 1254, 1255, 1256, 1257, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1297, 1299, 1301, 1308, 1310, 1312, 1316, 1317, 1322, 1323, 1324, 1325, 1330, 1344, 1345, 1347], "Then": 154, "There": 1344, "These": [1, 32, 40, 131, 137, 138, 174, 284, 320, 457, 807, 808, 926, 1053, 1066], "To": [39, 58, 200, 320, 399, 415, 416, 473, 474, 657, 664, 665, 666, 669, 679, 680, 689, 690, 691, 692, 701, 808, 842, 922, 1004, 1020, 1021, 1085, 1234, 1241, 1242, 1243, 1246, 1256, 1257, 1278, 1297, 1316, 1344], "Will": [57, 58, 829, 830, 840, 867, 878, 922, 1316], "With": [144, 221, 263, 320, 364, 543, 644, 808, 829, 877, 922, 966, 1119, 1155, 1221, 1316], "_": [1, 51, 55, 174, 245, 275, 279, 320, 357, 394, 395, 529, 658, 666, 668, 670, 675, 676, 681, 684, 685, 995, 996, 998, 1235, 1243, 1247, 1252, 1253, 1258, 1262, 1292, 1316], "__array_ufunc__": 930, "__call__": 804, "__dataframe__": 123, "__enter__": 1344, "__exit__": 1344, "__getattr__": 804, "__getitem__": 704, "__init__": [1, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 162, 897, 1344], "__name__": [224, 320], "_bar_": 759, "_btm_by_a": [390, 808], "_btm_by_b": [390, 808], "_by_ca": [390, 716, 808], "_by_cb": [390, 716, 808], "_check_ord": [57, 58, 829, 830, 840, 867, 878, 922], "_df": [1, 52], "_diff": [294, 320, 892, 922], "_eager": [550, 829, 922], "_expr": [1, 53], "_foo": 564, "_geventdataframeresult": [58, 830, 922], "_is_not_nan": [504, 808], "_is_odd": [258, 320, 873, 922], "_isnan": [503, 808], "_isnul": [506, 808], "_kwarg": [829, 922], "_ldf": 1, "_lf": 54, "_lower_boundari": [211, 320, 848, 922], "_mean_squar": [299, 898], "_not_nul": [505, 808], "_o": [394, 395, 675, 676, 995, 996, 1252, 1253], "_revers": [584, 588, 617, 808], "_right": [225, 226, 227, 320, 852, 853, 854, 922], "_suffix": 589, "_sum": [299, 898], "_top_by_a": [716, 808], "_top_by_b": [716, 808], "_train": [894, 922], "_type_check": [46, 47, 48, 49, 57, 58, 829, 830, 840, 867, 878, 922], "_upper_boundari": [211, 320, 848, 922], "_verbos": 33, "_world": 759, "a1": [40, 52, 54, 320], "a101": 1347, "a123": [40, 320], "a2": [40, 52, 54, 320], "a_1": [685, 1262, 1292, 1316], "a_2": [1292, 1316], "a_3": [1292, 1316], "a_a": 788, "a_agg_list": [211, 320, 848, 922], "a_b_doubl": 755, "a_btm_by_a": [390, 808], "a_btm_by_b": [390, 808], "a_by_ca": [390, 716, 808], "a_by_cb": [390, 716, 808], "a_div_2": 1338, "a_div_5": 1338, "a_interpol": [495, 808], "a_is_even": [267, 320, 787, 881, 922], "a_isnul": [506, 808], "a_lag_": 738, "a_log2": 1338, "a_mod_2": 1338, "a_not_nul": [505, 808], "a_revers": [584, 588, 617, 808], "a_rol": 738, "a_suffix": 589, "a_times_2": [559, 808], "a_times_b": [558, 808], "a_top_by_a": [716, 808], "a_top_by_b": [716, 808], "a_txt": 788, "aa": [469, 657, 669, 756, 808, 928, 1017, 1234, 1246, 1316, 1339], "aaa": [1, 40, 320, 657, 669, 704, 706, 707, 928, 1234, 1246], "aaaa": [975, 976], "aabcdef": 690, "aad": [975, 976], "aag": 26, "aazz": 1339, "ab": [213, 229, 271, 294, 320, 680, 704, 706, 707, 808, 892, 922, 928, 1099, 1124, 1288, 1316, 1337, 1339], "ab12": 680, "ab12cd34ef": 680, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 329, 663, 666, 679, 689, 808, 928, 1240, 1243, 1256, 1257], "abc123": 1339, "abc456": [679, 1256, 1257, 1339], "abcabc": 680, "abcd": 1339, "abcdeff": 689, "abf": [139, 150, 151], "abl": [97, 137, 550], "about": [97, 137, 650, 657, 665, 666, 669, 679, 680, 808, 926, 1228, 1234, 1242, 1243, 1246, 1256, 1257, 1316, 1347], "abov": [40, 226, 245, 320, 323, 798, 853, 922], "abs_a": 1338, "absolut": [139, 150, 151, 158, 159, 160, 161, 328, 465, 467, 468, 808, 933, 1077, 1079, 1080, 1316, 1338], "acc": [744, 745, 758, 782], "accent": 928, "accept": [37, 41, 45, 46, 47, 48, 49, 133, 135, 136, 139, 141, 143, 145, 147, 149, 152, 153, 154, 165, 181, 191, 210, 258, 259, 263, 266, 283, 294, 295, 299, 320, 329, 390, 399, 469, 496, 600, 614, 615, 653, 681, 708, 716, 724, 726, 728, 733, 736, 737, 738, 739, 747, 756, 772, 774, 777, 786, 790, 792, 798, 804, 808, 824, 836, 847, 873, 874, 877, 880, 885, 892, 893, 898, 922, 926, 927, 1004, 1105, 1189, 1197, 1198, 1221, 1258, 1316], "access": [37, 41, 45, 46, 47, 48, 49, 52, 53, 54, 55, 141, 145, 147, 149, 151, 152, 153, 154, 178, 185, 223, 253, 254, 267, 320, 667, 704, 831, 881, 894, 922, 927, 1244, 1347], "accord": [253, 320, 607, 749, 750, 752, 753, 795, 796, 808, 1035, 1191, 1316], "accordingli": [133, 135, 136, 141, 142, 143, 144, 145, 146, 147, 148], "account": [33, 40, 129, 138, 151, 320, 439, 465, 467, 468, 808, 1048, 1077, 1079, 1080, 1316], "accumul": [744, 745, 758, 782], "acg": 26, "achiev": [230, 245, 306, 320, 395, 559, 676, 808, 996, 1170, 1253, 1316], "aco": 1337, "acosd": 1337, "across": [40, 51, 138, 190, 212, 225, 232, 234, 239, 260, 270, 320, 412, 488, 573, 726, 728, 744, 745, 747, 772, 774, 777, 792, 808, 835, 852, 875, 922, 1098, 1316], "action": [39, 320], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 522, 666, 1134, 1243], "actual": [40, 125, 165, 169, 255, 320, 1223, 1316, 1339, 1346], "ad": [38, 40, 125, 140, 211, 267, 277, 282, 284, 289, 294, 295, 320, 335, 449, 472, 566, 567, 708, 744, 745, 787, 808, 848, 881, 889, 892, 893, 922, 928, 1058, 1084, 1295, 1300, 1316], "adbc": [38, 137, 138, 320], "adbc_driver_manag": 157, "adbc_ingest": [38, 320], "add": [39, 40, 136, 199, 211, 230, 294, 295, 296, 297, 320, 323, 410, 586, 587, 588, 589, 607, 708, 754, 758, 798, 808, 848, 852, 892, 893, 894, 895, 896, 922, 1083, 1316, 1321], "add_calendar_dai": 754, "add_calendar_month": 754, "add_calendar_year": 754, "add_chart": [40, 320], "add_dai": 754, "add_format": [40, 320], "add_hour": 754, "add_milli": 754, "add_second": 754, "add_seri": [40, 320], "add_week": 754, "add_worksheet": [40, 320], "addit": [29, 36, 38, 39, 40, 125, 134, 139, 140, 150, 151, 163, 165, 167, 169, 194, 198, 210, 228, 243, 258, 259, 266, 279, 286, 294, 295, 299, 320, 329, 426, 469, 472, 600, 653, 657, 665, 666, 669, 679, 680, 704, 708, 733, 736, 737, 738, 739, 756, 786, 787, 790, 804, 808, 841, 847, 873, 874, 880, 887, 892, 893, 898, 922, 928, 1023, 1031, 1084, 1234, 1242, 1243, 1246, 1256, 1257, 1298, 1316, 1326, 1344], "addition": [59, 253, 320, 928], "address": 666, "adjac": [40, 320], "adjust": [465, 467, 468, 650, 808, 1077, 1079, 1080, 1228, 1316], "adl": [139, 150, 151], "adlf": 151, "advanc": [40, 245, 320, 369, 550, 583, 586, 588, 590, 591, 971, 1162, 1347], "advantag": [40, 174, 244, 320], "advis": [40, 50, 90, 320], "aedt": 751, "aeiuo": [669, 1246], "af1": 51, "af2": 51, "af3": 51, "affect": [38, 158, 159, 160, 161, 320], "afm": 151, "afoo": [894, 922], "after": [40, 59, 125, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 181, 182, 199, 283, 286, 320, 389, 390, 391, 469, 600, 610, 703, 715, 716, 808, 824, 885, 887, 922, 990, 1083, 1193, 1280, 1301, 1316, 1331], "afterward": [50, 798], "ag": [237, 320, 863, 922, 1345], "again": [559, 808], "against": [38, 99, 135, 137, 202, 267, 320, 522, 669, 787, 844, 881, 922, 1134, 1246, 1325, 1344, 1346, 1347], "agg": [210, 211, 245, 252, 320, 330, 380, 385, 388, 390, 475, 477, 482, 485, 558, 559, 600, 652, 653, 716, 723, 749, 752, 770, 808, 829, 830, 840, 847, 848, 867, 871, 878, 922, 928], "agg_group": [761, 808], "agg_list": [558, 808], "aggreg": [135, 136, 139, 147, 150, 204, 210, 211, 231, 233, 235, 238, 241, 245, 246, 247, 252, 268, 269, 288, 291, 299, 300, 302, 304, 320, 330, 380, 385, 388, 475, 491, 558, 559, 600, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 725, 726, 727, 728, 744, 745, 746, 747, 758, 763, 771, 772, 774, 776, 777, 782, 791, 792, 808, 848, 858, 859, 860, 861, 864, 865, 868, 871, 882, 883, 890, 898, 899, 901, 903, 922, 926, 981, 986, 989, 1101, 1203, 1204, 1205, 1207, 1210, 1211, 1212, 1316, 1332, 1334, 1337, 1343], "aggregate_funct": [245, 320, 928], "aho": [658, 668, 670, 681, 1235, 1245, 1247, 1258], "aiosqlit": 137, "alchemy_conn": 137, "algorithm": [180, 320, 336, 658, 668, 670, 681, 729, 808, 823, 922, 938, 1235, 1245, 1247, 1258, 1316], "alia": [1, 12, 51, 53, 55, 88, 185, 211, 229, 245, 252, 286, 294, 297, 320, 323, 329, 333, 373, 374, 375, 376, 379, 389, 392, 394, 395, 396, 404, 405, 406, 407, 408, 410, 413, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 454, 456, 457, 458, 459, 460, 463, 464, 477, 479, 484, 486, 492, 493, 496, 499, 502, 510, 512, 534, 546, 552, 557, 559, 563, 566, 567, 569, 571, 576, 579, 581, 583, 594, 595, 599, 601, 605, 607, 610, 612, 640, 642, 657, 658, 659, 660, 662, 663, 665, 666, 668, 669, 670, 671, 675, 676, 681, 682, 683, 684, 685, 686, 687, 691, 692, 694, 704, 705, 706, 707, 709, 714, 715, 717, 723, 724, 730, 731, 732, 736, 737, 738, 739, 749, 752, 754, 755, 758, 759, 764, 767, 769, 770, 782, 786, 790, 795, 798, 808, 848, 850, 857, 871, 887, 892, 896, 922, 1016, 1023, 1024, 1027, 1030, 1031, 1032, 1033, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1124, 1191, 1196, 1242, 1243, 1247, 1257, 1262, 1263, 1316], "alias": [267, 320, 566, 567, 881, 922], "alic": [135, 1345], "align": [10, 15, 16, 40, 51, 59, 320, 1345], "align_fram": 59, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 37, 39, 40, 45, 46, 49, 51, 57, 64, 91, 108, 110, 122, 127, 132, 135, 136, 139, 140, 141, 143, 145, 146, 147, 149, 150, 152, 153, 162, 163, 166, 169, 174, 179, 180, 182, 189, 191, 193, 194, 201, 213, 218, 220, 222, 223, 224, 225, 227, 228, 229, 234, 236, 240, 241, 245, 248, 249, 253, 254, 255, 259, 265, 266, 270, 271, 275, 277, 278, 282, 285, 287, 288, 289, 290, 295, 297, 320, 323, 333, 335, 357, 372, 390, 403, 409, 415, 416, 417, 418, 449, 469, 474, 480, 487, 488, 491, 494, 498, 501, 505, 506, 511, 521, 522, 529, 547, 550, 558, 580, 583, 584, 586, 587, 588, 589, 590, 591, 598, 600, 610, 615, 617, 621, 645, 651, 653, 659, 663, 666, 667, 671, 674, 680, 688, 689, 690, 694, 716, 726, 735, 737, 744, 745, 746, 747, 756, 758, 763, 764, 767, 774, 782, 790, 791, 792, 798, 804, 808, 814, 820, 823, 826, 829, 830, 834, 836, 837, 838, 840, 843, 852, 854, 858, 862, 867, 869, 874, 878, 879, 880, 886, 888, 889, 893, 894, 896, 922, 928, 959, 1015, 1017, 1020, 1021, 1022, 1023, 1058, 1099, 1106, 1118, 1124, 1133, 1134, 1141, 1159, 1162, 1193, 1198, 1203, 1229, 1236, 1240, 1243, 1244, 1248, 1251, 1257, 1265, 1266, 1267, 1271, 1288, 1297, 1316, 1320, 1321, 1326, 1328, 1333, 1334, 1339, 1343, 1344, 1346, 1347], "all_compat": 1328, "all_data": 1344, "all_horizont": [193, 194, 320, 725, 837, 838, 922], "all_stat": 30, "alloc": [135, 136, 197, 248, 320, 808, 897, 926, 1076, 1316], "allow": [1, 8, 39, 40, 46, 47, 48, 49, 50, 90, 99, 123, 137, 140, 149, 152, 153, 154, 155, 162, 165, 166, 169, 174, 178, 223, 226, 228, 253, 254, 256, 278, 279, 282, 285, 298, 320, 392, 396, 439, 446, 449, 538, 558, 559, 566, 567, 612, 641, 693, 695, 696, 808, 852, 853, 858, 862, 886, 894, 922, 926, 928, 1048, 1055, 1058, 1150, 1170, 1195, 1215, 1270, 1272, 1273, 1297, 1298, 1316, 1339, 1347], "allow_alias": [566, 567], "allow_chunk": [165, 169], "allow_copi": [123, 178, 278, 320, 1297, 1316], "allow_dupl": [607, 808, 1191, 1316], "allow_infin": [165, 169], "allow_masked_out": [165, 169], "allow_missing_column": [147, 154], "allow_nul": [162, 165, 169, 1347], "allow_object": 768, "allow_parallel": [226, 320, 852, 853, 922], "allow_pyarrow_filt": 155, "allow_time_zon": [165, 166, 169], "allowed_dtyp": [165, 166, 169, 1347], "almost": [58, 230, 306, 320, 693, 695, 696, 830, 922, 1170, 1270, 1272, 1273, 1316], "along": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "alpha": [465, 467, 468, 808, 840, 867, 878, 922, 928, 1077, 1079, 1080, 1316], "alpha_i": [466, 808, 1078, 1316], "alphabet": [928, 1347], "alphanumer": [701, 928, 1278], "alreadi": [38, 39, 98, 277, 320, 409, 522, 574, 721, 808, 878, 922, 1015, 1134, 1305, 1316], "also": [27, 37, 40, 46, 50, 125, 137, 140, 141, 146, 147, 149, 154, 164, 165, 168, 169, 174, 195, 210, 211, 237, 241, 245, 252, 254, 258, 266, 277, 289, 294, 297, 320, 405, 408, 417, 439, 443, 449, 475, 496, 559, 566, 567, 600, 610, 614, 615, 653, 679, 680, 681, 688, 689, 704, 735, 744, 745, 748, 751, 758, 760, 782, 798, 807, 808, 814, 847, 848, 863, 871, 873, 880, 889, 892, 894, 896, 922, 928, 1022, 1052, 1105, 1193, 1197, 1198, 1236, 1256, 1257, 1258, 1265, 1316, 1320, 1326, 1328, 1331, 1335, 1339, 1342, 1344, 1345], "alt": [320, 323, 1316, 1321], "altair": [157, 320, 323, 1316, 1321], "altern": [40, 320, 804, 1336], "although": [267, 320, 881, 922], "alwai": [13, 37, 39, 46, 67, 69, 72, 135, 181, 202, 210, 225, 226, 230, 283, 306, 320, 389, 390, 558, 570, 693, 715, 716, 798, 808, 824, 844, 852, 853, 858, 885, 922, 928, 990, 1170, 1270, 1301, 1316, 1325, 1326, 1344, 1347], "am": [682, 1259], "amarillo": 1339, "amaz": [320, 323, 1316, 1321], "amazonaw": 32, "ambigu": [442, 443, 444, 457, 693, 696, 751, 1051, 1052, 1053, 1066, 1270, 1273], "america": 752, "amount": [50, 68, 90, 145, 149, 152, 153, 559, 754, 808, 1333], "amsterdam": [443, 1052], "an": [1, 30, 33, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 55, 67, 68, 69, 95, 99, 102, 105, 112, 114, 122, 124, 125, 128, 135, 136, 137, 138, 140, 142, 145, 146, 147, 149, 151, 152, 153, 154, 163, 165, 169, 183, 184, 185, 191, 197, 200, 204, 206, 211, 222, 223, 224, 226, 227, 230, 241, 245, 249, 250, 252, 253, 257, 267, 272, 278, 282, 284, 288, 289, 294, 297, 306, 320, 323, 331, 353, 356, 368, 374, 380, 383, 385, 386, 388, 405, 406, 407, 408, 409, 410, 417, 421, 422, 439, 443, 446, 460, 466, 474, 475, 481, 482, 485, 519, 522, 525, 527, 549, 550, 558, 559, 571, 573, 583, 584, 605, 606, 607, 615, 616, 620, 621, 622, 624, 626, 628, 630, 633, 635, 637, 656, 657, 660, 666, 669, 673, 693, 695, 696, 698, 700, 714, 717, 725, 730, 734, 749, 750, 752, 753, 755, 757, 760, 764, 765, 766, 767, 768, 780, 782, 783, 786, 790, 795, 796, 798, 799, 804, 808, 826, 827, 828, 830, 834, 836, 840, 844, 848, 853, 854, 858, 867, 869, 871, 872, 878, 881, 889, 892, 894, 896, 897, 905, 919, 922, 926, 927, 928, 955, 958, 970, 975, 981, 984, 986, 987, 989, 1003, 1005, 1011, 1012, 1013, 1014, 1015, 1022, 1026, 1055, 1069, 1076, 1078, 1119, 1131, 1134, 1137, 1139, 1161, 1170, 1198, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1216, 1218, 1233, 1234, 1237, 1243, 1246, 1250, 1270, 1272, 1273, 1275, 1277, 1297, 1299, 1316, 1334, 1336, 1339, 1343, 1344, 1346], "ana": [682, 1259], "anan": [682, 1259], "ananab": 1339, "and_": 808, "ang": 1339, "angl": [731, 732], "ani": [4, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 67, 69, 72, 122, 123, 124, 125, 126, 127, 128, 132, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 147, 149, 150, 151, 152, 153, 154, 155, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 176, 179, 181, 187, 191, 193, 194, 199, 201, 202, 204, 206, 221, 223, 224, 225, 226, 227, 230, 234, 244, 249, 253, 254, 255, 267, 270, 273, 274, 277, 278, 279, 282, 283, 285, 288, 289, 297, 320, 323, 324, 329, 332, 333, 357, 389, 390, 391, 409, 410, 444, 445, 463, 464, 474, 475, 479, 482, 484, 486, 490, 500, 510, 517, 522, 529, 557, 558, 559, 566, 576, 579, 581, 583, 584, 586, 588, 590, 591, 594, 595, 599, 604, 607, 614, 615, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 642, 646, 656, 658, 672, 689, 690, 691, 692, 693, 695, 696, 698, 700, 709, 715, 716, 717, 724, 725, 726, 728, 737, 739, 740, 741, 768, 770, 774, 784, 785, 792, 798, 808, 824, 829, 830, 836, 837, 838, 840, 843, 844, 852, 853, 854, 866, 869, 881, 885, 886, 889, 896, 897, 922, 926, 928, 930, 932, 935, 959, 990, 999, 1015, 1016, 1053, 1054, 1073, 1074, 1083, 1086, 1091, 1093, 1095, 1100, 1110, 1119, 1122, 1129, 1134, 1141, 1169, 1170, 1181, 1182, 1191, 1197, 1198, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1216, 1217, 1233, 1235, 1249, 1270, 1272, 1273, 1275, 1277, 1295, 1296, 1297, 1298, 1300, 1301, 1316, 1321, 1344, 1347], "anna": [237, 320, 863, 922], "anoth": [92, 164, 182, 190, 196, 210, 226, 260, 320, 409, 412, 419, 495, 525, 563, 569, 573, 614, 623, 625, 627, 629, 631, 634, 636, 638, 669, 808, 826, 835, 847, 853, 875, 894, 922, 1015, 1024, 1075, 1083, 1104, 1137, 1197, 1198, 1246, 1316, 1338, 1339], "anti": [225, 320, 852, 905, 922, 1216, 1218, 1316, 1332], "any_horizont": 727, "anyth": [39, 253, 320], "anywher": [376, 379, 693, 695, 696, 1270, 1272, 1273], "ap": 1339, "apach": [35, 41, 42, 45, 133, 137, 138, 141, 143, 151, 177, 320, 931], "apaya": [694, 1271], "api": [0, 32, 37, 41, 45, 46, 47, 48, 49, 123, 145, 147, 149, 152, 153, 154, 155, 178, 230, 306, 320, 559, 770, 808, 905, 922, 1170, 1316, 1343], "apia": [418, 1023], "app": [396, 687, 997, 1264], "appear": [40, 63, 125, 160, 161, 320, 680, 719, 808, 928, 1303, 1316, 1345], "append": [38, 39, 165, 199, 225, 226, 227, 320, 611, 798, 808, 852, 853, 854, 922, 1083, 1316], "appl": [186, 215, 225, 249, 250, 273, 301, 302, 304, 305, 307, 308, 309, 310, 311, 312, 313, 320, 390, 392, 396, 617, 662, 687, 716, 808, 852, 869, 900, 901, 903, 904, 906, 907, 908, 909, 910, 911, 912, 922, 992, 997, 1239, 1264, 1332, 1339], "appli": [10, 20, 37, 40, 46, 59, 137, 149, 162, 165, 169, 174, 189, 204, 227, 230, 244, 266, 267, 277, 306, 320, 345, 420, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 441, 445, 447, 458, 459, 461, 467, 468, 558, 559, 604, 622, 623, 624, 625, 628, 629, 635, 636, 653, 679, 680, 693, 695, 696, 700, 733, 744, 745, 758, 769, 770, 782, 787, 798, 808, 834, 854, 858, 866, 880, 881, 905, 922, 1004, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1054, 1056, 1067, 1068, 1070, 1079, 1080, 1170, 1204, 1205, 1207, 1211, 1256, 1257, 1270, 1272, 1273, 1277, 1316, 1325], "applic": [278, 320, 559, 808], "apply_on_context_ent": 174, "appropri": [40, 155, 202, 278, 320, 449, 610, 808, 844, 922, 1058, 1193, 1316], "approx": [336, 808], "approx_n_uniqu": [320, 808, 922, 1316], "approxim": [45, 180, 320, 336, 466, 729, 808, 823, 922, 938, 1078, 1316, 1338, 1347], "april": [446, 1055, 1339, 1340], "ar": [1, 10, 11, 17, 20, 30, 32, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 58, 59, 89, 90, 97, 103, 119, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 158, 159, 160, 161, 163, 165, 166, 167, 169, 174, 178, 181, 182, 187, 189, 193, 194, 197, 200, 202, 203, 204, 209, 210, 211, 223, 225, 226, 227, 228, 230, 236, 237, 243, 245, 252, 253, 254, 255, 258, 259, 261, 263, 266, 273, 277, 278, 279, 282, 283, 287, 289, 290, 294, 295, 298, 299, 320, 332, 334, 348, 364, 369, 389, 390, 391, 399, 405, 407, 408, 417, 444, 449, 457, 462, 464, 465, 466, 467, 468, 473, 475, 496, 498, 500, 501, 503, 504, 505, 506, 508, 513, 543, 550, 558, 595, 600, 607, 610, 613, 614, 615, 616, 620, 623, 625, 627, 629, 631, 632, 634, 636, 638, 644, 647, 650, 652, 653, 658, 667, 671, 673, 674, 677, 678, 679, 680, 681, 683, 694, 696, 698, 703, 708, 710, 714, 715, 716, 725, 726, 728, 733, 736, 737, 738, 739, 740, 747, 749, 750, 752, 753, 772, 774, 777, 786, 790, 792, 795, 796, 798, 800, 801, 803, 807, 808, 809, 810, 813, 814, 815, 816, 817, 820, 824, 829, 830, 834, 837, 838, 842, 844, 847, 848, 852, 853, 854, 858, 862, 863, 867, 869, 871, 873, 874, 876, 877, 880, 885, 888, 889, 892, 893, 894, 898, 922, 926, 928, 935, 936, 950, 966, 971, 990, 994, 1004, 1013, 1014, 1022, 1053, 1058, 1066, 1072, 1074, 1076, 1077, 1078, 1079, 1080, 1085, 1087, 1089, 1105, 1108, 1110, 1111, 1113, 1114, 1115, 1116, 1120, 1125, 1155, 1162, 1182, 1191, 1193, 1197, 1198, 1199, 1209, 1221, 1225, 1228, 1235, 1244, 1248, 1250, 1254, 1255, 1256, 1257, 1260, 1271, 1273, 1275, 1280, 1287, 1295, 1297, 1298, 1299, 1301, 1308, 1310, 1312, 1316, 1317, 1320, 1322, 1323, 1324, 1326, 1328, 1331, 1336, 1344, 1347], "arbitrari": [79, 206, 320, 412, 808, 835, 922, 928], "arbitrarili": [230, 320], "arcco": [808, 1316], "arccosh": [808, 1316], "arcsin": [808, 1316], "arcsinh": [808, 1316], "arctan": [731, 732, 808, 1316], "arctan2": 732, "arctanh": [808, 1316], "aren": [37, 46, 320, 922], "arg": [31, 50, 61, 62, 64, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 202, 244, 320, 345, 604, 733, 759, 808, 844, 866, 922, 926, 1170, 1316, 1329], "arg_max": [808, 1316], "arg_min": [808, 1316], "arg_sort": [808, 1316], "arg_tru": [734, 808, 1316], "arg_uniqu": [808, 1316], "arg_wher": [346, 808], "argmax": [558, 808], "argument": [36, 39, 45, 134, 135, 139, 147, 149, 150, 165, 167, 169, 187, 191, 198, 210, 211, 226, 243, 244, 252, 258, 259, 266, 279, 286, 290, 294, 295, 299, 320, 444, 457, 469, 475, 496, 558, 600, 604, 620, 653, 688, 689, 690, 708, 725, 731, 732, 733, 736, 737, 738, 739, 741, 756, 786, 790, 798, 804, 808, 836, 841, 847, 848, 853, 866, 871, 873, 874, 880, 887, 892, 893, 898, 919, 922, 926, 928, 1053, 1066, 1105, 1265, 1266, 1267, 1298, 1316, 1338, 1339], "aris": 137, "arithmet": [204, 320], "arm": 157, "arm64": 157, "around": [37, 46, 320, 922], "arr": [278, 320, 800, 1297, 1308, 1316], "arr_bar": 1334, "arr_foo": 1334, "arrai": [122, 126, 135, 136, 139, 147, 150, 176, 197, 198, 272, 277, 278, 279, 320, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 377, 405, 406, 407, 408, 517, 532, 533, 534, 535, 537, 546, 547, 549, 552, 554, 558, 616, 622, 624, 626, 628, 630, 633, 635, 637, 643, 714, 737, 755, 787, 808, 841, 922, 927, 930, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 978, 1011, 1012, 1013, 1014, 1019, 1076, 1129, 1144, 1145, 1146, 1147, 1149, 1157, 1158, 1159, 1161, 1164, 1166, 1167, 1199, 1204, 1205, 1207, 1210, 1211, 1212, 1219, 1223, 1291, 1295, 1297, 1298, 1299, 1316, 1337, 1343, 1346], "array_agg": 1337, "array_contain": 1337, "array_get": 1337, "array_length": 1337, "array_low": 1337, "array_mean": 1337, "array_revers": 1337, "array_sum": 1337, "array_to_str": 1337, "array_uniqu": 1337, "array_upp": 1337, "arraylik": [1019, 1316], "arrow": [41, 42, 47, 122, 137, 138, 141, 143, 152, 177, 223, 254, 255, 272, 274, 278, 320, 922, 931, 1291, 1297, 1316], "arrowinvaliderror": [39, 320], "as_": [1316, 1321], "as_dict": [136, 243, 320], "as_expr": 928, "as_seri": [182, 273, 320, 826, 922, 928], "asarrai": [176, 930], "ascend": [211, 252, 320, 620, 808, 848, 871, 922], "ascii": [7, 20, 394, 395, 658, 668, 670, 671, 675, 676, 681, 683, 694, 703, 928, 995, 996, 1235, 1245, 1247, 1248, 1252, 1253, 1258, 1260, 1271, 1280], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [658, 668, 670, 681, 1235, 1245, 1247, 1258], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1347, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 928, "ascii_t": 174, "ascii_uppercas": [288, 320], "asd": [659, 666, 1236, 1243], "asia": [129, 928, 1028, 1029, 1056], "asid": 449, "asin": 1337, "asind": 1337, "asof": [226, 320, 853, 922], "asofjoinstrategi": [226, 320, 853, 922], "assert": [158, 159, 160, 161, 165, 169, 252, 320, 820, 928], "assert_frame_equ": [159, 160, 196, 320, 1347], "assert_frame_not_equ": [158, 161], "assert_series_equ": [158, 161, 1075, 1316, 1347], "assert_series_not_equ": [159, 160], "assert_someth": 163, "assertionerror": [158, 159, 160, 161], "assign": [163, 211, 305, 320, 369, 550, 600, 610, 685, 686, 808, 848, 904, 922, 971, 1162, 1193, 1262, 1263, 1316], "associ": [38, 40, 51, 138, 140, 164, 167, 255, 320, 927, 1327, 1329, 1333], "assum": [32, 255, 320, 858, 905, 922, 1339], "assume_rol": 32, "assumpt": [558, 808], "async": [137, 830, 922], "async_engin": 137, "asynchron": [58, 137, 830, 922], "asyncio": [58, 137, 830, 922], "asyncresult": [58, 830, 922], "ata": 26, "atan": 1337, "atan2": [731, 732, 1337], "atan2_ab": 1341, "atan2d": [732, 1337], "atan2d_ab": 1341, "atand": 1337, "atg": 26, "atgataaaggag": 26, "atol": [158, 159, 160, 161], "attain": [653, 808], "attempt": [1, 33, 412, 808, 835, 922], "attr": [320, 323, 1316, 1321], "attribut": [60, 63, 66, 67, 68, 69, 77, 81, 162, 320, 323, 800, 801, 803, 804, 809, 810, 813, 815, 816, 817, 897, 922, 1308, 1310, 1312, 1316, 1317, 1321, 1322, 1323, 1324], "attributeerror": 1, "audi": [273, 320, 617, 808], "august": 449, "australia": 751, "auth": 34, "authent": [39, 139, 147, 149, 150, 151, 152, 154, 320], "author": 1, "auto": [37, 41, 45, 46, 47, 48, 49, 59, 122, 124, 125, 126, 128, 144, 145, 147, 149, 152, 153, 154, 284, 320, 922, 1347], "auto_structifi": [258, 294, 320, 873, 892, 922], "autofilt": [40, 320], "autofit": [40, 320], "autogener": [135, 136, 140, 146, 149], "automat": [8, 37, 46, 122, 124, 125, 126, 128, 129, 135, 136, 137, 138, 140, 144, 145, 147, 149, 152, 153, 165, 169, 171, 258, 267, 294, 320, 558, 615, 688, 689, 690, 787, 808, 873, 881, 892, 922, 926, 1197, 1198, 1265, 1266, 1267, 1300, 1316, 1326, 1328, 1331, 1344], "autumn": [679, 680], "avail": [40, 45, 49, 131, 137, 138, 139, 150, 151, 163, 174, 245, 267, 319, 320, 449, 610, 787, 800, 801, 803, 807, 808, 809, 810, 813, 814, 815, 816, 817, 820, 881, 920, 921, 922, 926, 928, 1017, 1193, 1308, 1310, 1312, 1316, 1317, 1320, 1322, 1323, 1324, 1335], "available_timezon": [66, 928], "averag": [40, 320, 465, 466, 467, 468, 610, 808, 1077, 1078, 1079, 1080, 1193, 1316, 1333], "avg": 1337, "avocado": 1339, "avoid": [165, 169, 202, 254, 320, 331, 808, 844, 922], "avro": [35, 133, 320, 820], "avrocompress": [35, 320], "aw": [32, 37, 41, 45, 46, 47, 48, 49, 139, 145, 147, 149, 150, 152, 153, 154, 320, 922], "awai": 1338, "await": [58, 137, 830, 916, 922], "awar": [10, 137, 223, 254, 255, 274, 320, 466, 658, 668, 670, 681, 696, 808, 922, 1078, 1235, 1245, 1247, 1258, 1273, 1316], "aws_access_key_id": [39, 139, 150, 154, 320], "aws_region": [39, 150, 154, 320], "aws_secret_access_kei": [39, 139, 150, 154, 320], "awsassumerolekwarg": 32, "axi": [236, 287, 320, 323, 731, 732, 862, 888, 922, 1316, 1321], "aya": [683, 1260, 1271], "az": [139, 150, 151], "azur": [33, 37, 39, 41, 45, 46, 47, 48, 49, 139, 145, 147, 149, 150, 151, 152, 153, 154, 320, 922], "azure_storage_account_kei": [139, 150, 151], "azure_storage_account_nam": [139, 150, 151], "b": [1, 10, 35, 37, 39, 41, 42, 45, 54, 59, 81, 94, 97, 122, 123, 124, 125, 126, 127, 128, 129, 135, 137, 140, 178, 179, 180, 181, 183, 184, 185, 186, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 220, 221, 222, 223, 224, 225, 228, 229, 231, 233, 235, 238, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 260, 263, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 329, 331, 332, 334, 335, 345, 347, 352, 357, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 390, 391, 403, 410, 414, 446, 449, 469, 471, 473, 474, 475, 477, 480, 487, 488, 491, 494, 495, 496, 498, 501, 503, 504, 505, 506, 511, 517, 522, 529, 539, 540, 541, 542, 558, 559, 564, 573, 580, 583, 584, 585, 586, 587, 588, 589, 597, 598, 600, 604, 607, 610, 614, 615, 617, 619, 645, 651, 653, 660, 664, 669, 673, 679, 680, 704, 705, 716, 719, 723, 725, 726, 727, 728, 729, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 755, 756, 757, 758, 759, 762, 763, 764, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 784, 785, 787, 789, 790, 791, 792, 793, 797, 804, 808, 823, 824, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 852, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 872, 873, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 906, 907, 908, 909, 910, 911, 912, 913, 922, 928, 934, 937, 959, 974, 975, 976, 977, 978, 979, 980, 994, 998, 999, 1016, 1019, 1055, 1058, 1072, 1075, 1076, 1083, 1086, 1105, 1110, 1129, 1151, 1152, 1153, 1154, 1191, 1196, 1237, 1241, 1246, 1250, 1256, 1257, 1281, 1283, 1284, 1286, 1298, 1303, 1316, 1326, 1328, 1329, 1331, 1332, 1333, 1334, 1339, 1340, 1341, 1344], "b1": [52, 54], "b2": [52, 54], "b345": [40, 320], "b4": [40, 320], "b_b": [267, 320], "b_btm_by_a": [390, 808], "b_btm_by_b": [390, 808], "b_by_ca": [390, 716, 808], "b_by_cb": [390, 716, 808], "b_is_not_nan": [504, 808], "b_isnan": [503, 808], "b_isnul": [506, 808], "b_not_nul": [505, 808], "b_revers": [584, 588, 617, 808], "b_suffix": 589, "b_sum": [299, 898], "b_top_by_a": [716, 808], "b_top_by_b": [716, 808], "ba": [412, 469, 573, 687, 756, 808, 928], "back": [4, 51, 154, 199, 211, 260, 278, 279, 320, 573, 600, 680, 808, 829, 848, 875, 897, 922, 1083, 1298, 1316], "backend": [39, 137, 138, 139, 150, 151, 320, 323, 1316, 1321], "background": [320, 324, 829, 921, 922], "backward": [45, 49, 201, 226, 320, 372, 417, 437, 474, 808, 843, 853, 922, 1022, 1046, 1086, 1316], "backward_fil": [480, 644, 808], "bad": [679, 680, 1256, 1257], "balanc": [168, 170, 1347], "ballon_dor": [665, 667, 1242, 1244], "banana": [186, 273, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 390, 617, 662, 687, 716, 808, 901, 903, 906, 907, 908, 909, 910, 911, 912, 1339], "banded_column": [40, 320], "banded_row": [40, 320], "bar": [35, 37, 39, 41, 42, 43, 44, 45, 132, 144, 145, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 199, 202, 204, 206, 207, 208, 213, 215, 216, 217, 219, 225, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 245, 247, 249, 250, 253, 256, 257, 258, 260, 265, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 285, 286, 291, 292, 293, 298, 320, 323, 393, 412, 493, 563, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 650, 659, 661, 664, 666, 667, 682, 684, 686, 691, 692, 729, 740, 741, 742, 757, 762, 763, 766, 767, 771, 773, 775, 776, 778, 779, 786, 789, 793, 797, 798, 804, 808, 826, 831, 832, 836, 837, 838, 839, 844, 850, 851, 852, 865, 869, 872, 873, 886, 887, 891, 922, 927, 928, 993, 1141, 1228, 1236, 1238, 1241, 1243, 1244, 1259, 1263, 1268, 1269, 1316, 1330, 1332, 1333, 1334, 1336, 1339, 1342], "bar2": 1339, "bar22": [204, 320], "bar_": 684, "bar_3": [275, 320], "bar_4": [275, 320], "bar_a": [245, 320], "bar_at_2": 1334, "bar_avg": 1333, "bar_b": [245, 320], "bar_color": [40, 320], "bar_max": 1333, "bar_median": 1333, "bar_min": 1333, "bar_negative_border_color_sam": [40, 320], "bar_negative_color_sam": [40, 320], "bar_std": 1333, "bar_sum": 1333, "bar_var": 1333, "bare": [566, 567, 928], "base": [31, 40, 64, 108, 110, 167, 194, 202, 211, 227, 252, 320, 418, 426, 462, 465, 466, 467, 468, 475, 490, 495, 553, 554, 558, 559, 605, 607, 615, 620, 623, 625, 627, 629, 631, 634, 636, 638, 698, 808, 844, 848, 854, 871, 922, 928, 1023, 1031, 1072, 1077, 1078, 1079, 1080, 1100, 1104, 1165, 1166, 1170, 1189, 1191, 1197, 1198, 1275, 1307, 1316, 1332, 1338, 1347], "base64": [374, 375, 660, 661, 975, 976, 1237, 1238], "base_nam": [284, 320], "base_utc_offset": [426, 1031], "baseexcept": 1344, "basi": [40, 140, 165, 320], "basic": [40, 176, 320, 565, 930, 1347], "basic_chart": [40, 320], "batch": [42, 57, 58, 131, 136, 137, 143, 145, 153, 155, 254, 282, 320, 829, 830, 858, 922], "batch_siz": [37, 46, 135, 136, 137, 145, 153, 155, 282, 320, 922], "batchedcsvread": 136, "baz": [206, 216, 217, 286, 320, 667, 684, 686, 757, 766, 779, 804, 851, 887, 922, 927, 928, 1244, 1263, 1330, 1336, 1339], "bb": [928, 1017, 1316, 1339, 1344], "bbb": [1, 40, 320, 704, 706, 707, 928], "bc": [669, 680, 791, 1246], "bcbc45": 1339, "bea": 12, "bear": 928, "beauti": 12, "becaus": [145, 153, 197, 211, 228, 230, 288, 306, 320, 479, 522, 550, 808, 848, 905, 922, 1076, 1134, 1170, 1316], "becom": [167, 319, 920, 921], "bed3": [40, 320], "been": [5, 30, 40, 172, 178, 301, 320, 481, 559, 577, 610, 808, 900, 1193, 1316], "beetl": [273, 320, 617, 808], "befor": [40, 65, 66, 135, 137, 140, 149, 155, 158, 159, 160, 161, 171, 174, 199, 211, 226, 267, 277, 282, 286, 320, 383, 384, 386, 387, 407, 408, 409, 558, 600, 601, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 664, 703, 710, 738, 784, 785, 808, 848, 850, 853, 887, 922, 926, 984, 985, 987, 988, 1013, 1014, 1015, 1083, 1186, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1241, 1280, 1287, 1316, 1332], "beforehand": [693, 695, 696, 1270, 1272, 1273], "begin": [12, 40, 320, 465, 467, 468, 665, 694, 808, 1077, 1079, 1080, 1242, 1271, 1316], "behav": [202, 320, 475, 559, 689, 690, 808, 844, 922], "behavior": [45, 49, 147, 154, 193, 194, 202, 225, 226, 320, 356, 481, 525, 527, 664, 757, 766, 808, 837, 838, 844, 852, 853, 919, 922, 958, 1137, 1139, 1241], "behaviour": [10, 51, 59, 193, 194, 267, 320, 657, 665, 666, 669, 679, 680, 717, 787, 808, 837, 838, 881, 922, 1234, 1242, 1243, 1246, 1256, 1257], "behind": 171, "being": [13, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 72, 132, 135, 136, 137, 140, 145, 146, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 182, 198, 227, 267, 275, 277, 282, 288, 289, 320, 323, 324, 409, 410, 444, 490, 559, 607, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 664, 735, 737, 755, 784, 785, 808, 826, 829, 830, 840, 841, 854, 881, 889, 922, 999, 1015, 1016, 1053, 1100, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1241, 1292, 1295, 1300, 1316, 1321, 1347], "belong": [1, 211, 320, 848, 922], "below": [19, 39, 139, 140, 150, 151, 194, 202, 245, 320, 449, 474, 671, 679, 680, 694, 749, 750, 752, 753, 795, 796, 798, 804, 808, 844, 922, 1058, 1248, 1256, 1257, 1271], "benchmark": 135, "best": [230, 306, 320, 559, 808, 1170, 1316], "better": [230, 277, 278, 306, 320, 395, 559, 676, 808, 825, 905, 922, 996, 1216, 1218, 1253, 1316], "between": [24, 59, 93, 162, 163, 165, 169, 179, 187, 225, 247, 254, 312, 320, 357, 391, 413, 414, 449, 496, 520, 529, 539, 540, 541, 542, 601, 607, 608, 630, 631, 656, 672, 731, 732, 735, 740, 742, 781, 784, 785, 808, 852, 868, 911, 922, 959, 991, 998, 1018, 1019, 1058, 1105, 1132, 1141, 1151, 1152, 1153, 1154, 1186, 1191, 1192, 1208, 1233, 1249, 1316, 1333, 1341], "between_ab": [496, 808], "beyond": [701, 1278], "bia": [467, 468, 508, 632, 650, 808, 1079, 1080, 1120, 1209, 1228, 1316], "bias": [508, 650, 808, 1120, 1228, 1316], "big": [136, 377, 978], "big_fil": 136, "bigidx": 130, "bigqueri": 138, "bin": [410, 490, 607, 698, 724, 801, 808, 1016, 1100, 1191, 1275, 1310, 1316, 1321], "bin2int": 377, "bin_count": [490, 808, 1100, 1316], "bin_i": [724, 808], "bin_x": [724, 808], "bin_xor_xi": [724, 808], "binari": [41, 137, 190, 260, 320, 373, 374, 375, 376, 377, 378, 379, 412, 573, 660, 808, 835, 875, 922, 928, 974, 975, 977, 978, 979, 980, 1237, 1335], "binary_str": [724, 808], "bind": 140, "birthdai": 135, "bit": [65, 66, 67, 68, 70, 71, 72, 73, 74, 75, 76, 82, 83, 84, 85, 86, 381, 382, 383, 384, 386, 387, 612, 657, 808, 982, 984, 985, 987, 988, 1195, 1234, 1316, 1335, 1339], "bit_and": 1337, "bit_count": 1337, "bit_length": 1337, "bit_or": 1337, "bit_xor": 1337, "bitmap": [197, 320, 1076, 1316], "bitwis": [333, 380, 385, 388, 599, 724, 725, 726, 727, 728, 808, 981, 986, 989, 1316, 1335, 1337], "bitwise_and": [808, 1316], "bitwise_count_on": [808, 1316], "bitwise_count_zero": [808, 1316], "bitwise_leading_on": [808, 1316], "bitwise_leading_zero": [808, 1316], "bitwise_or": [808, 1316], "bitwise_trailing_on": [808, 1316], "bitwise_trailing_zero": [808, 1316], "bitwise_xor": [808, 1316], "bla": [659, 666, 1236, 1243], "black": [230, 320, 373, 374, 375, 376, 379], "blindli": [522, 1134], "block": [20, 58, 210, 285, 320, 798, 830, 847, 869, 886, 895, 896, 905, 922, 1216, 1218, 1316], "blue": [50, 89, 90, 373, 374, 375, 376, 379, 721, 808, 1305, 1316], "bob": [135, 237, 320, 863, 922, 1345], "bodi": [40, 320, 324], "bold": [40, 320], "bom": [37, 46, 320, 922], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 89, 122, 123, 124, 125, 127, 128, 129, 132, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 173, 176, 178, 181, 182, 183, 184, 189, 191, 196, 201, 202, 203, 204, 208, 209, 210, 211, 215, 216, 218, 219, 220, 223, 225, 226, 234, 243, 245, 249, 253, 254, 255, 256, 261, 264, 266, 267, 270, 273, 275, 278, 279, 283, 284, 285, 286, 289, 290, 292, 294, 302, 304, 307, 310, 320, 331, 332, 333, 334, 335, 345, 348, 349, 352, 356, 357, 365, 370, 373, 374, 376, 379, 390, 391, 392, 396, 404, 405, 406, 407, 408, 409, 410, 417, 429, 445, 462, 463, 464, 465, 467, 468, 484, 486, 487, 490, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 513, 514, 518, 522, 525, 527, 529, 538, 545, 550, 551, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 574, 575, 594, 595, 597, 599, 602, 603, 607, 610, 612, 621, 622, 624, 626, 628, 630, 632, 633, 635, 637, 641, 643, 645, 650, 652, 653, 656, 657, 658, 659, 660, 662, 668, 669, 670, 672, 679, 680, 681, 684, 685, 687, 693, 695, 696, 698, 700, 704, 706, 707, 716, 718, 721, 724, 725, 726, 727, 728, 730, 733, 734, 735, 739, 740, 743, 744, 749, 750, 752, 753, 764, 765, 768, 770, 774, 780, 783, 786, 787, 790, 792, 795, 796, 798, 799, 808, 824, 826, 827, 829, 830, 834, 836, 840, 843, 844, 847, 848, 852, 853, 858, 862, 867, 869, 876, 878, 880, 881, 885, 886, 887, 888, 889, 892, 897, 901, 903, 906, 909, 922, 926, 927, 928, 930, 935, 936, 947, 950, 951, 954, 958, 959, 967, 972, 974, 975, 977, 980, 991, 992, 994, 997, 999, 1003, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1022, 1034, 1054, 1072, 1074, 1075, 1077, 1079, 1080, 1087, 1089, 1096, 1097, 1100, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1125, 1126, 1130, 1134, 1137, 1139, 1141, 1150, 1157, 1163, 1170, 1182, 1184, 1187, 1188, 1191, 1193, 1194, 1195, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1218, 1219, 1223, 1228, 1230, 1233, 1234, 1235, 1236, 1237, 1239, 1245, 1246, 1247, 1249, 1256, 1257, 1258, 1261, 1262, 1264, 1270, 1272, 1273, 1275, 1277, 1292, 1297, 1298, 1302, 1305, 1316, 1325, 1326, 1328, 1334, 1339, 1344], "boolean": [51, 165, 181, 202, 204, 266, 283, 320, 332, 333, 334, 348, 349, 352, 373, 376, 379, 390, 429, 475, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 513, 514, 518, 597, 599, 602, 603, 653, 673, 716, 723, 724, 733, 734, 790, 798, 808, 824, 844, 880, 885, 922, 928, 935, 936, 948, 950, 951, 954, 974, 1034, 1087, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1125, 1126, 1130, 1184, 1187, 1188, 1218, 1234, 1307, 1316, 1336], "border": 20, "both": [10, 25, 37, 46, 50, 89, 90, 137, 154, 185, 211, 225, 226, 227, 237, 252, 253, 279, 289, 320, 335, 399, 410, 449, 469, 496, 607, 620, 623, 625, 627, 629, 631, 634, 636, 638, 683, 749, 750, 752, 753, 795, 796, 804, 808, 819, 848, 852, 853, 854, 863, 871, 889, 922, 928, 1004, 1058, 1105, 1260, 1298, 1316, 1344, 1345], "boto3": 32, "bottom": [181, 320, 390, 808, 824, 922], "bottom_k": [283, 320, 390, 715, 716, 808, 885, 922, 1301, 1316], "bottom_k_bi": [389, 715, 716, 808], "bound": [104, 135, 136, 197, 211, 320, 356, 399, 496, 525, 527, 550, 556, 720, 730, 749, 750, 752, 753, 795, 796, 808, 848, 922, 958, 1004, 1076, 1105, 1137, 1139, 1168, 1304, 1316, 1334], "boundari": [211, 320, 399, 490, 701, 808, 848, 922, 1004, 1100, 1278, 1316], "box": [20, 230, 320], "box_draw": 20, "branch": [57, 58, 829, 830, 840, 867, 878, 922], "break": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 72, 132, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 225, 227, 267, 277, 282, 288, 289, 320, 323, 324, 409, 410, 444, 490, 559, 607, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 737, 784, 785, 808, 829, 830, 840, 852, 854, 881, 889, 922, 999, 1015, 1016, 1053, 1100, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1295, 1300, 1316, 1321], "breakpoint": [410, 490, 607, 808, 1016, 1100, 1191, 1316], "breezah": 149, "breviti": 174, "broadcast": [681, 737, 928, 1258], "broader": 928, "brotli": [45, 49, 320, 922], "brussel": [443, 1052], "bst": [422, 426, 443, 1027, 1031, 1052], "bucket": [39, 139, 150, 151, 154, 320, 444, 457, 490, 808, 1053, 1066, 1100, 1316], "bud": [679, 680, 1256, 1257], "budget": 1325, "buffer": [135, 136, 137, 197, 223, 320, 377, 978, 1076, 1316], "buffer_s": [223, 320], "bug": [558, 559, 808, 858, 905, 922, 1170, 1316], "build": [56, 123, 928, 1347], "built": 93, "builtin": [133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 320, 412, 808, 835, 922], "bundl": 174, "busi": [417, 735, 1022], "business_day_count": [417, 1022], "by_alternate_row": 1, "by_dtyp": 928, "by_first_letter_of_column_nam": 52, "by_first_letter_of_column_valu": 52, "by_index": 928, "by_left": [226, 320, 853, 922], "by_nam": 928, "by_pred": [253, 320], "by_right": [226, 320, 853, 922], "bye": 1, "byi": 1339, "bys": [211, 320, 848, 922], "byte": [35, 37, 40, 41, 42, 45, 46, 49, 133, 134, 135, 136, 141, 142, 143, 144, 145, 148, 149, 152, 153, 190, 197, 260, 320, 377, 394, 395, 412, 573, 669, 670, 671, 675, 676, 683, 694, 808, 835, 875, 922, 978, 995, 996, 1076, 1246, 1247, 1248, 1252, 1253, 1260, 1271, 1316, 1339], "bytesio": [40, 41, 42, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 260, 320, 412, 573, 808, 835, 875, 922], "c": [1, 10, 35, 37, 39, 41, 42, 45, 52, 54, 59, 97, 123, 125, 127, 129, 140, 149, 178, 179, 181, 182, 183, 184, 185, 186, 188, 191, 192, 193, 194, 195, 196, 198, 202, 204, 207, 208, 209, 210, 211, 213, 215, 216, 224, 225, 228, 229, 231, 233, 235, 238, 240, 241, 242, 243, 245, 246, 247, 249, 250, 251, 253, 256, 257, 258, 265, 266, 267, 268, 269, 271, 272, 275, 276, 277, 278, 279, 280, 283, 287, 288, 289, 291, 292, 294, 299, 302, 303, 304, 307, 308, 310, 313, 314, 320, 324, 329, 331, 332, 334, 352, 372, 390, 410, 449, 487, 496, 517, 529, 559, 566, 583, 584, 598, 600, 604, 607, 645, 685, 693, 716, 719, 726, 728, 729, 731, 732, 733, 736, 737, 739, 740, 741, 742, 744, 745, 747, 757, 758, 759, 762, 763, 766, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 787, 789, 791, 792, 793, 797, 804, 808, 824, 826, 827, 828, 829, 830, 831, 832, 833, 836, 837, 838, 839, 840, 841, 844, 847, 848, 852, 856, 865, 867, 869, 870, 872, 873, 878, 879, 880, 881, 885, 888, 889, 892, 894, 898, 901, 902, 903, 906, 907, 909, 912, 913, 922, 926, 928, 998, 1016, 1105, 1129, 1191, 1262, 1270, 1284, 1303, 1316, 1326, 1328, 1329, 1331, 1332, 1333, 1334, 1339, 1344], "c00": 928, "c01": 928, "c02": 928, "c03": 928, "c05": 928, "c1": 369, "c123": 1339, "c2": 369, "c20": 928, "c25": 928, "c3": 369, "c40": 928, "c45": 1339, "c4d79b": [40, 320], "c50": 928, "c567": [40, 320], "c60": 928, "c75": 928, "c80": 928, "c8ae6d2b276": [40, 320], "c93": 928, "c95": 928, "c96": 928, "c97": 928, "c98": 928, "c99": 928, "c_btm_by_a": [390, 808], "c_btm_by_b": [390, 808], "c_by_ca": [390, 716, 808], "c_by_cb": [390, 716, 808], "c_c_c": [787, 881, 922], "c_contigu": [278, 320], "c_max": [600, 808], "c_mean_squar": [299, 898], "c_min": [600, 808], "c_top_by_a": [716, 808], "c_top_by_b": [716, 808], "c_total": 1344, "cach": [50, 57, 58, 89, 90, 117, 141, 149, 152, 154, 158, 159, 160, 161, 173, 614, 615, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 693, 695, 696, 700, 808, 819, 829, 830, 840, 867, 878, 922, 994, 1197, 1198, 1270, 1272, 1273, 1277, 1316], "cadi": [245, 320], "cafe": [698, 1275], "caf\u00e9": [394, 395, 675, 676, 928, 995, 996, 1252, 1253], "calamin": 140, "calcul": [40, 45, 49, 51, 189, 211, 268, 291, 320, 413, 465, 466, 467, 468, 508, 520, 539, 546, 552, 556, 632, 650, 655, 720, 722, 742, 784, 785, 789, 797, 808, 834, 848, 882, 890, 922, 1017, 1018, 1077, 1078, 1079, 1080, 1120, 1132, 1151, 1209, 1228, 1232, 1306, 1316], "calendar": [65, 66, 211, 226, 252, 290, 320, 420, 430, 432, 439, 444, 457, 461, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 754, 795, 796, 808, 848, 853, 871, 922, 1025, 1035, 1040, 1048, 1053, 1066, 1070, 1078, 1316], "calendar_year": [430, 461], "call": [37, 40, 41, 45, 46, 47, 48, 49, 50, 57, 58, 127, 136, 137, 140, 145, 147, 149, 152, 153, 154, 158, 159, 160, 161, 165, 169, 174, 181, 210, 211, 228, 230, 252, 267, 278, 283, 319, 320, 389, 390, 405, 408, 417, 558, 559, 583, 584, 586, 588, 590, 591, 614, 615, 646, 715, 716, 735, 741, 804, 808, 824, 829, 830, 840, 847, 848, 867, 871, 878, 881, 885, 919, 920, 921, 922, 926, 928, 990, 1022, 1170, 1198, 1224, 1297, 1301, 1316, 1326, 1330, 1344], "callabl": [52, 53, 54, 55, 149, 204, 230, 244, 249, 306, 320, 369, 550, 558, 559, 584, 585, 604, 621, 744, 745, 758, 769, 770, 782, 808, 858, 866, 869, 905, 922, 971, 1162, 1170, 1203, 1316], "caller": [138, 237, 320, 550, 858, 863, 905, 922], "cam": [249, 320, 869, 922], "can": [1, 14, 27, 37, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 65, 66, 68, 81, 89, 90, 125, 135, 136, 137, 140, 141, 145, 146, 147, 149, 152, 153, 154, 155, 163, 164, 165, 169, 171, 174, 176, 181, 183, 193, 194, 195, 204, 206, 210, 211, 218, 220, 222, 225, 226, 230, 241, 245, 252, 254, 255, 258, 260, 261, 266, 277, 278, 282, 283, 284, 288, 294, 297, 306, 320, 323, 332, 369, 390, 405, 408, 409, 412, 417, 436, 437, 439, 443, 446, 449, 457, 466, 472, 475, 496, 522, 550, 558, 559, 566, 570, 573, 574, 580, 583, 584, 586, 588, 590, 591, 600, 605, 607, 612, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 643, 645, 650, 653, 658, 667, 674, 679, 680, 681, 688, 689, 690, 693, 704, 716, 733, 735, 748, 751, 758, 760, 764, 765, 770, 787, 798, 804, 807, 808, 819, 824, 825, 829, 830, 835, 837, 838, 840, 848, 852, 853, 871, 873, 875, 876, 878, 880, 881, 885, 892, 895, 896, 922, 928, 930, 971, 1015, 1022, 1045, 1046, 1048, 1052, 1053, 1055, 1058, 1066, 1078, 1084, 1105, 1134, 1162, 1170, 1175, 1189, 1191, 1195, 1198, 1216, 1218, 1219, 1222, 1228, 1235, 1236, 1244, 1251, 1256, 1257, 1258, 1265, 1266, 1267, 1270, 1295, 1297, 1316, 1321, 1331, 1344], "cancel": [829, 922], "candid": [665, 667, 1242, 1244], "cannot": [1, 45, 49, 99, 102, 135, 136, 140, 141, 143, 146, 147, 154, 171, 174, 230, 255, 256, 278, 297, 306, 320, 374, 449, 469, 538, 559, 574, 641, 660, 685, 706, 770, 808, 878, 896, 897, 905, 922, 928, 975, 1058, 1150, 1170, 1215, 1237, 1262, 1297, 1316], "capabl": [1, 40, 320], "capac": [197, 264, 320, 1076, 1223, 1316], "capit": [701, 1278, 1339], "captur": [665, 667, 679, 680, 1242, 1244, 1256, 1257], "car": [249, 273, 320, 617, 808, 869, 922], "cardin": [180, 320, 336, 729, 808, 823, 922, 938, 1316], "care": [40, 261, 320, 559, 600, 643, 808, 876, 922, 1219, 1316], "cars_revers": [617, 808], "cartesian": [225, 320, 852, 922], "case": [40, 50, 51, 58, 97, 122, 124, 125, 126, 128, 137, 144, 145, 153, 154, 171, 199, 211, 223, 230, 245, 252, 254, 255, 274, 277, 278, 320, 418, 466, 558, 570, 571, 584, 620, 657, 658, 666, 668, 669, 670, 679, 680, 681, 701, 808, 830, 848, 871, 922, 926, 928, 1023, 1078, 1083, 1234, 1235, 1243, 1245, 1246, 1247, 1256, 1257, 1258, 1278, 1295, 1316], "cast": [1, 39, 53, 54, 122, 124, 125, 128, 158, 159, 160, 161, 204, 211, 244, 252, 277, 278, 282, 294, 320, 335, 407, 408, 419, 446, 449, 460, 599, 604, 605, 612, 614, 620, 673, 674, 703, 710, 714, 738, 739, 788, 808, 848, 866, 871, 892, 922, 926, 928, 999, 1013, 1014, 1024, 1055, 1058, 1069, 1189, 1195, 1250, 1251, 1280, 1287, 1293, 1297, 1299, 1300, 1316, 1337], "cast_str_to_int": [244, 320, 866, 922], "cast_to_supertyp": [808, 926], "cat": [26, 50, 89, 90, 410, 607, 657, 659, 699, 702, 714, 739, 803, 808, 928, 1016, 1100, 1191, 1234, 1236, 1276, 1279, 1312, 1316], "categor": [39, 50, 69, 89, 90, 92, 158, 159, 160, 161, 225, 275, 320, 392, 393, 394, 395, 396, 410, 607, 614, 615, 714, 808, 928, 992, 993, 994, 995, 996, 997, 998, 999, 1016, 1191, 1197, 1198, 1299, 1316], "categori": [40, 50, 69, 90, 275, 320, 393, 410, 490, 607, 808, 993, 1016, 1100, 1191, 1292, 1316], "categorical_as_str": [158, 159, 160, 161], "categoricalord": 63, "categoricaltyp": [272, 320], "caus": [105, 114, 123, 135, 136, 137, 149, 178, 199, 278, 320, 558, 808, 1083, 1297, 1316], "cba": 690, "cbrt": [808, 1316, 1337], "cbrt_a": 1338, "cc": [469, 756, 808, 928, 1017, 1316, 1339], "ccc": [1, 40, 320, 704, 706, 707, 928, 1339], "ccy": 1347, "cd": [680, 704, 706, 707, 928], "cd34": 680, "cdatainterfac": [177, 931], "cde": [928, 1339], "cdt": [444, 457, 1053, 1066], "ceil": [53, 808, 1316, 1337], "ceil_a": 1338, "cell": [15, 16, 40, 245, 320], "cent": [420, 1256], "center": [15, 16, 40, 320, 465, 467, 468, 621, 622, 624, 626, 628, 630, 633, 635, 637, 808, 1077, 1079, 1080, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1316], "central": [150, 151, 174, 508, 650, 808, 1120, 1228, 1316], "centuri": 1340, "certain": [46, 47, 48, 49, 58, 216, 290, 320, 689, 690, 804, 829, 830, 867, 922, 1316], "certainli": [693, 695, 696, 1270, 1272, 1273], "cest": [443, 1052], "cet": [443, 1052], "cfg": [2, 4, 17, 174], "cfg_ascii_fram": 174, "cfg_markdown": 174, "cfg_verbos": 174, "cfoo": [894, 922], "chain": [583, 584, 586, 588, 590, 591, 798], "chanc": [162, 165, 169, 1347], "chang": [30, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 51, 57, 58, 67, 69, 72, 132, 135, 136, 137, 140, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 227, 267, 277, 282, 288, 289, 296, 320, 323, 324, 409, 410, 413, 444, 449, 490, 559, 600, 601, 607, 614, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 737, 784, 785, 808, 829, 830, 840, 854, 881, 889, 895, 922, 926, 928, 998, 999, 1015, 1016, 1053, 1058, 1100, 1186, 1191, 1197, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1223, 1295, 1300, 1316, 1321], "changes_length": [808, 926], "char": [27, 135, 149, 666, 1243], "char_length": 1339, "charact": [7, 9, 12, 20, 26, 27, 28, 37, 38, 46, 91, 134, 135, 136, 138, 149, 320, 394, 395, 439, 663, 664, 666, 671, 675, 676, 677, 678, 679, 680, 683, 684, 685, 688, 689, 690, 691, 692, 694, 701, 703, 867, 922, 928, 995, 996, 1048, 1240, 1241, 1243, 1248, 1252, 1253, 1254, 1255, 1256, 1257, 1260, 1261, 1262, 1265, 1266, 1267, 1271, 1278, 1280, 1339], "character_length": 1339, "characterist": [165, 169], "charli": [135, 1345], "chart": [40, 320, 323, 867, 922, 1316, 1321], "cheap": [183, 184, 259, 295, 320, 827, 828, 874, 893, 922, 1003, 1005, 1316], "cheaper": [525, 1137], "check": [39, 66, 99, 135, 136, 149, 158, 159, 160, 161, 173, 196, 221, 225, 320, 352, 373, 376, 379, 392, 396, 487, 496, 500, 518, 657, 662, 669, 687, 808, 852, 858, 922, 954, 974, 977, 980, 992, 997, 1075, 1096, 1097, 1107, 1110, 1117, 1119, 1130, 1234, 1239, 1246, 1264, 1316], "check_column_ord": [158, 159], "check_dtyp": [158, 159, 160, 161, 927, 1075, 1316], "check_exact": [158, 159, 160, 161], "check_nam": [160, 161, 1075, 1316], "check_ord": [160, 161], "check_row_ord": [158, 159], "choos": [45, 47, 49, 211, 245, 320, 449, 848, 922, 1058], "chrono": [37, 46, 93, 320, 446, 449, 693, 695, 696, 700, 922, 1055, 1058, 1270, 1272, 1273, 1277, 1339, 1340], "chunk": [14, 49, 131, 135, 136, 139, 145, 147, 149, 150, 152, 153, 154, 165, 169, 199, 224, 240, 278, 320, 335, 611, 808, 922, 937, 1002, 1083, 1094, 1176, 1194, 1291, 1297, 1316], "chunk_length": 1316, "chunkedarrai": [122, 240, 320], "citi": [679, 680], "clang": 157, "clariti": [253, 320], "class": [1, 17, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 108, 110, 162, 163, 255, 320, 795, 804, 808, 814, 820, 832, 839, 872, 891, 897, 922, 927, 1296, 1316, 1320, 1328, 1344], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 190, 320, 412, 481, 808, 835, 922, 1326, 1344], "claus": [820, 1334, 1343], "clean": [693, 695, 696, 1270, 1272, 1273], "cleaner": 174, "cleanli": [10, 209, 320, 1344], "clear": [50, 89, 184, 320, 828, 922, 1005, 1316], "clearer": 125, "cli": 33, "clickhous": 138, "client": [32, 137], "clip": [808, 1316], "clipboard": [36, 134, 320, 820], "clone": [124, 125, 126, 127, 128, 183, 278, 320, 827, 922, 1003, 1316], "close": [40, 137, 211, 252, 267, 320, 410, 496, 555, 607, 620, 623, 625, 627, 629, 631, 634, 636, 638, 650, 749, 750, 752, 753, 795, 796, 808, 848, 871, 881, 922, 1016, 1105, 1191, 1228, 1316], "closedinterv": [211, 252, 320, 496, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 871, 922, 1105, 1316], "closest": [122, 226, 320, 853, 922, 1333, 1338], "closur": [623, 625, 634, 636, 638, 808], "cloud": [34, 37, 39, 41, 45, 46, 47, 48, 49, 137, 139, 145, 147, 149, 150, 151, 152, 153, 154, 155, 320, 820, 922], "cloudi": [679, 680], "cloudpickl": 157, "cluster": 154, "cluster_with_column": [57, 58, 829, 830, 840, 867, 878, 922], "co": [666, 808, 1243, 1316, 1337], "coalesc": [225, 226, 289, 320, 494, 668, 670, 693, 808, 852, 853, 889, 922, 1247, 1270, 1332, 1337], "code": [174, 185, 225, 320, 373, 374, 375, 376, 379, 412, 559, 643, 808, 835, 852, 856, 922, 1219, 1316, 1326], "codebas": 174, "coeffici": [187, 320, 650, 808, 1228, 1316], "coerc": [59, 613, 808], "coercion": [46, 47, 48, 49, 57, 58, 613, 808, 829, 830, 840, 867, 878, 922], "col": [1, 12, 37, 40, 46, 51, 52, 53, 54, 126, 128, 149, 163, 165, 202, 210, 211, 219, 221, 225, 226, 227, 230, 241, 244, 245, 252, 253, 258, 266, 277, 282, 286, 288, 294, 299, 320, 324, 328, 329, 330, 331, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 483, 484, 485, 486, 489, 490, 492, 493, 494, 495, 496, 497, 499, 500, 502, 503, 504, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 581, 582, 583, 585, 587, 589, 592, 593, 594, 595, 596, 597, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 729, 733, 734, 736, 737, 738, 739, 741, 743, 746, 748, 749, 751, 752, 754, 758, 759, 760, 761, 762, 763, 771, 773, 775, 776, 778, 781, 782, 786, 787, 789, 791, 793, 794, 797, 798, 808, 844, 847, 848, 850, 852, 853, 854, 866, 871, 873, 880, 881, 887, 892, 894, 898, 922, 928, 1048, 1052, 1134, 1216, 1218, 1247, 1251, 1270, 1316, 1347], "col0": [165, 1347], "col1": [165, 245, 320, 922, 1347], "col2": [165, 245, 320, 922, 1347], "col3": [245, 320, 1347], "col4": 1347, "col_nam": [244, 320, 559, 798, 808, 866, 922], "cole": 132, "coli": [40, 320, 590, 591, 928, 1347], "collaps": [46, 47, 48, 49, 57, 58, 829, 830, 840, 867, 878, 922], "collapse_join": [46, 47, 48, 49, 57, 58, 829, 830, 840, 867, 878, 922], "collect": [54, 57, 58, 149, 150, 151, 155, 165, 166, 169, 193, 194, 228, 245, 267, 272, 285, 286, 320, 469, 500, 559, 738, 756, 760, 786, 787, 790, 808, 823, 824, 826, 827, 830, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 868, 869, 870, 871, 873, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 898, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 919, 921, 922, 928, 1110, 1316, 1326, 1327, 1328, 1331, 1332, 1344, 1345, 1347], "collect_al": [54, 58, 829, 830, 922], "collect_all_async": [830, 922], "collect_async": [58, 922], "collect_schema": [54, 228, 320, 832, 839, 866, 872, 891, 922], "collis": 59, "colnam": [24, 40, 149, 320], "color": [50, 89, 90, 306, 320, 323, 373, 374, 375, 376, 379, 660, 721, 808, 905, 974, 975, 976, 977, 980, 1237, 1305, 1316, 1339], "column": [10, 16, 17, 18, 21, 22, 24, 39, 40, 45, 49, 50, 51, 52, 59, 66, 81, 90, 94, 98, 122, 124, 125, 126, 127, 128, 129, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 165, 179, 181, 182, 185, 187, 188, 191, 192, 193, 194, 195, 198, 202, 203, 206, 207, 209, 210, 211, 215, 216, 221, 222, 223, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 255, 257, 258, 259, 261, 266, 268, 269, 270, 273, 275, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 299, 305, 320, 323, 324, 331, 332, 334, 345, 354, 363, 365, 368, 377, 390, 399, 403, 404, 410, 420, 421, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 441, 442, 445, 446, 447, 449, 458, 459, 461, 469, 471, 475, 477, 490, 495, 496, 511, 517, 523, 525, 545, 549, 550, 559, 565, 566, 568, 570, 572, 583, 585, 586, 587, 588, 589, 590, 591, 600, 607, 611, 613, 614, 615, 616, 618, 619, 620, 623, 625, 627, 629, 631, 634, 636, 638, 645, 646, 652, 653, 656, 664, 669, 671, 672, 681, 685, 686, 693, 694, 695, 696, 697, 698, 700, 705, 708, 716, 721, 723, 725, 726, 727, 728, 729, 730, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 769, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 808, 824, 826, 833, 836, 837, 838, 839, 841, 844, 847, 848, 852, 853, 854, 858, 859, 860, 861, 862, 864, 865, 868, 869, 871, 872, 873, 874, 876, 880, 882, 883, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 898, 904, 905, 922, 927, 928, 935, 936, 956, 965, 967, 970, 978, 994, 998, 1004, 1009, 1010, 1016, 1025, 1028, 1029, 1030, 1033, 1034, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1054, 1055, 1056, 1058, 1067, 1068, 1070, 1082, 1100, 1104, 1129, 1135, 1137, 1157, 1161, 1191, 1198, 1199, 1202, 1222, 1233, 1241, 1246, 1249, 1262, 1263, 1270, 1272, 1273, 1274, 1275, 1277, 1283, 1286, 1292, 1293, 1305, 1316, 1332, 1334, 1336, 1338, 1339, 1341, 1342, 1345, 1346, 1347], "column_0": [1, 230, 284, 320], "column_1": [230, 284, 320, 1341], "column_2": [284, 320, 1341], "column_abc": 15, "column_format": [40, 320], "column_nam": [249, 284, 320, 869, 922], "column_tot": [40, 320], "column_width": [40, 320], "column_x": [135, 136, 140, 146, 149], "column_xyz": 15, "columnar": [126, 128, 223, 254, 320], "columnformatdict": [40, 320], "columnnameorselector": [182, 191, 193, 194, 236, 243, 245, 255, 275, 285, 286, 287, 288, 320, 826, 836, 837, 838, 862, 886, 887, 888, 922], "columnnotfounderror": [206, 207, 320], "columntotalsdefinit": [40, 320], "columnwidthsdefinit": [40, 320], "colx": [40, 320, 590, 591, 928, 1331, 1347], "colz": [928, 1347], "com": [32, 40, 138, 320, 465, 467, 468, 665, 666, 667, 808, 1077, 1079, 1080, 1242, 1243, 1244, 1316], "combin": [45, 49, 57, 58, 59, 202, 211, 212, 226, 245, 252, 290, 320, 333, 346, 457, 466, 479, 574, 599, 615, 620, 688, 689, 690, 749, 750, 752, 753, 795, 796, 798, 808, 829, 830, 840, 848, 853, 867, 871, 878, 922, 1053, 1066, 1078, 1198, 1265, 1266, 1267, 1316, 1332, 1345], "come": [117, 138, 211, 285, 287, 320, 417, 436, 437, 508, 550, 735, 808, 848, 886, 888, 922, 1022, 1045, 1046, 1120, 1316], "comm_subexpr_elim": [57, 58, 829, 830, 840, 867, 878, 922], "comm_subplan_elim": [57, 58, 829, 830, 840, 867, 878, 922], "comma": [36, 37, 135, 136, 149, 320], "comment": [135, 136, 149], "comment_prefix": [135, 136, 149], "common": [51, 57, 58, 59, 97, 135, 136, 149, 289, 320, 584, 814, 829, 830, 840, 867, 878, 889, 922, 1320], "compact": 1342, "compani": 138, "compar": [154, 158, 159, 160, 161, 196, 202, 320, 463, 464, 484, 486, 496, 510, 557, 594, 595, 808, 844, 922, 998, 1074, 1075, 1182, 1316], "comparison": [155, 202, 320, 844, 922], "compat": [20, 40, 41, 42, 45, 49, 92, 272, 320, 657, 659, 665, 666, 667, 669, 679, 680, 922, 928, 1058, 1234, 1236, 1242, 1243, 1244, 1246, 1256, 1257, 1291, 1316, 1326, 1339, 1340, 1344], "compat_level": [41, 42, 272, 320, 1291, 1316], "compatibleframetyp": [1327, 1329, 1344], "compatlevel": [41, 42, 272, 320, 1291, 1316], "competit": [610, 808, 1193, 1316], "compil": [56, 350, 351, 515, 516, 952, 953, 1127, 1128], "complement": 928, "complet": [135, 137, 149, 1345], "complex": [166, 389, 390, 409, 715, 716, 808, 990, 1015, 1301, 1316], "compliant": [40, 320, 449, 1058], "compon": [421, 445, 449, 693, 696, 754, 1026, 1054, 1058, 1270, 1273], "compos": 1345, "composit": [81, 1347], "compound": [129, 255, 320, 928], "comprehens": 163, "compress": [35, 41, 42, 45, 47, 49, 320, 618, 808, 922, 1201, 1316], "compression_level": [45, 49, 320, 922], "comput": [57, 59, 95, 197, 210, 226, 245, 279, 285, 299, 312, 320, 328, 337, 338, 339, 340, 341, 342, 359, 360, 361, 366, 367, 371, 397, 400, 401, 402, 405, 406, 407, 408, 414, 462, 465, 466, 467, 468, 470, 508, 532, 533, 534, 535, 539, 540, 541, 542, 546, 552, 553, 554, 555, 580, 600, 601, 606, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 647, 648, 649, 650, 654, 712, 713, 721, 726, 728, 731, 732, 733, 740, 742, 755, 774, 784, 785, 798, 808, 829, 847, 850, 852, 853, 886, 894, 898, 911, 922, 933, 939, 940, 941, 942, 943, 944, 961, 962, 963, 968, 969, 973, 1000, 1006, 1007, 1008, 1011, 1012, 1013, 1014, 1019, 1072, 1076, 1077, 1078, 1079, 1080, 1081, 1120, 1144, 1145, 1146, 1147, 1151, 1152, 1153, 1154, 1158, 1164, 1165, 1166, 1167, 1175, 1186, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1225, 1226, 1227, 1228, 1231, 1289, 1290, 1298, 1305, 1316, 1338, 1341], "computeerror": [570, 698, 1275], "concat": [50, 89, 90, 98, 136, 226, 320, 853, 894, 922, 1002, 1094, 1176, 1194, 1316, 1337], "concat_list": [522, 755], "concat_w": [267, 320, 787, 881, 922, 1337, 1344], "concaten": [50, 59, 89, 90, 204, 244, 320, 604, 656, 672, 737, 738, 739, 808, 866, 922, 1002, 1176, 1233, 1249, 1316, 1339], "concatmethod": 59, "conclus": [126, 128, 320, 922], "concret": [165, 169], "condit": [40, 194, 202, 227, 253, 320, 392, 396, 475, 496, 662, 687, 734, 758, 798, 808, 844, 854, 922, 1105, 1316, 1332, 1337, 1343], "conditional_format": [40, 320], "conditionalformatdict": [40, 320], "config": [0, 51, 189, 258, 277, 294, 320, 658, 668, 670, 681, 749, 750, 752, 753, 754, 820, 829, 834, 873, 892, 922, 1235, 1247, 1258], "configur": [5, 32, 39, 139, 150, 151, 174, 320, 323, 821, 829, 897, 922, 1316, 1321], "configure_axisx": [320, 323, 1316, 1321], "configure_point": [320, 323, 1316, 1321], "conflat": [496, 808], "conform": 1347, "confus": [97, 332, 503, 504, 681, 808], "conjunct": [40, 89, 137, 140, 146, 163, 320, 764, 767, 922], "conn": 137, "connect": [37, 38, 41, 45, 46, 47, 48, 49, 69, 135, 137, 138, 141, 143, 145, 147, 149, 152, 153, 154, 155, 320, 821, 922], "connectionorcursor": [38, 137, 320], "connector": 138, "connectorx": [137, 138, 157], "consecut": [201, 320, 372, 474, 480, 656, 672, 679, 808, 843, 922, 1086, 1233, 1249, 1257, 1316], "consid": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 72, 89, 90, 132, 135, 136, 137, 145, 147, 149, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 181, 193, 194, 196, 222, 227, 230, 236, 254, 267, 277, 282, 283, 285, 287, 288, 289, 320, 323, 324, 390, 399, 409, 410, 444, 479, 490, 558, 559, 566, 582, 583, 586, 588, 590, 591, 607, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 716, 737, 744, 758, 784, 785, 804, 808, 824, 829, 830, 837, 838, 840, 854, 862, 881, 885, 886, 888, 889, 905, 922, 928, 994, 999, 1004, 1015, 1016, 1053, 1075, 1100, 1170, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1216, 1218, 1295, 1300, 1316, 1321, 1326], "consider": 132, "consist": [210, 243, 278, 320, 693, 749, 750, 847, 922, 928, 937, 1083, 1270, 1297, 1316], "consola": [40, 320], "const": 10, "constant": [197, 252, 320, 418, 466, 472, 808, 871, 922, 1023, 1076, 1078, 1084, 1316], "constrain": [51, 149, 193, 194, 320, 837, 838, 922, 928], "constraint": [202, 320, 475, 583, 584, 586, 588, 590, 591, 798, 808, 844, 922, 928], "construct": [50, 89, 90, 97, 122, 124, 125, 126, 127, 128, 129, 132, 137, 320, 481, 780, 783, 799, 804, 808, 835, 922, 994, 1316, 1331], "construct_categor": 50, "constructor": [132, 140, 169], "contain": [5, 37, 38, 39, 40, 46, 51, 56, 93, 124, 127, 129, 137, 138, 139, 147, 150, 151, 154, 164, 165, 167, 169, 181, 186, 193, 194, 195, 211, 219, 224, 241, 277, 278, 282, 283, 289, 301, 320, 332, 334, 357, 376, 379, 392, 396, 412, 487, 500, 529, 559, 656, 658, 662, 665, 667, 669, 672, 674, 686, 687, 703, 725, 726, 727, 728, 739, 770, 808, 824, 832, 835, 837, 838, 839, 848, 867, 885, 889, 900, 922, 926, 928, 935, 936, 959, 992, 997, 1096, 1097, 1141, 1176, 1233, 1235, 1239, 1242, 1244, 1246, 1249, 1251, 1263, 1264, 1280, 1291, 1297, 1316, 1334], "contains_with_expr": 373, "contains_with_lit": 373, "content": [13, 646, 808, 1224, 1316], "context": [50, 89, 90, 171, 241, 267, 320, 330, 475, 522, 558, 559, 570, 652, 653, 721, 741, 757, 760, 766, 767, 770, 779, 783, 786, 807, 808, 819, 820, 881, 894, 922, 1134, 1305, 1316, 1331, 1344, 1346], "contigu": [59, 122, 127, 135, 136, 139, 141, 143, 145, 147, 149, 150, 152, 153, 154, 248, 278, 320], "continu": [135, 410, 607, 650, 808, 1016, 1191, 1228, 1316, 1333], "contrast": 754, "control": [10, 11, 40, 58, 59, 140, 163, 165, 266, 267, 277, 320, 615, 653, 787, 808, 829, 830, 840, 880, 881, 897, 919, 922, 1198, 1295, 1316, 1328, 1331, 1344], "conveni": [199, 282, 320, 914, 937, 1083, 1316, 1326], "convers": [123, 140, 178, 223, 224, 254, 255, 274, 278, 279, 320, 422, 693, 695, 696, 700, 820, 1027, 1270, 1272, 1273, 1277, 1297, 1298, 1316, 1342, 1344], "convert": [39, 93, 123, 127, 139, 140, 146, 150, 178, 255, 273, 274, 275, 276, 277, 278, 279, 281, 282, 320, 368, 369, 411, 422, 446, 449, 549, 550, 558, 584, 609, 667, 693, 695, 696, 697, 698, 700, 705, 808, 922, 926, 970, 971, 998, 1027, 1055, 1058, 1161, 1162, 1244, 1270, 1272, 1273, 1274, 1275, 1277, 1283, 1286, 1294, 1295, 1296, 1297, 1298, 1300, 1316, 1339, 1341, 1342, 1344], "convert_time_zon": [443, 1052], "coo": [249, 320, 869, 922], "coord": 708, "coordin": [40, 320], "copi": [36, 122, 123, 134, 176, 178, 183, 184, 224, 272, 278, 279, 294, 320, 472, 808, 827, 828, 892, 922, 930, 1003, 1005, 1084, 1291, 1296, 1297, 1298, 1316, 1344], "corasick": [658, 668, 670, 681, 1235, 1245, 1247, 1258], "core": [1, 227, 320, 854, 922, 1344, 1347], "cores_right": [227, 320, 854, 922], "corner": [20, 40, 129, 320], "corr": 320, "corrcoef": [187, 320], "correct": [140, 146, 467, 468, 508, 550, 632, 650, 808, 858, 922, 926, 1079, 1080, 1120, 1209, 1228, 1316], "correctli": [40, 320, 558, 808], "correl": [187, 320, 740, 784], "correlationmethod": 740, "correspond": [211, 226, 252, 278, 290, 320, 390, 430, 439, 444, 457, 559, 610, 620, 623, 625, 627, 629, 631, 634, 636, 638, 716, 749, 750, 752, 753, 795, 796, 808, 829, 848, 853, 871, 922, 1035, 1048, 1053, 1066, 1193, 1316, 1333], "cosd": 1337, "cosh": [808, 1316], "cosin": [337, 338, 400, 401, 558, 808, 939, 940, 1006, 1007, 1316, 1341], "cost": [227, 255, 320, 679, 854, 922, 1257], "cost_usd": [679, 1257], "cot": [808, 1316, 1337], "cotang": [402, 808, 1008, 1316, 1341], "cotd": 1337, "could": [39, 87, 95, 320, 647, 744, 754, 758, 808, 826, 834, 922, 1225, 1316], "count": [40, 155, 180, 189, 211, 241, 242, 252, 284, 290, 296, 311, 320, 336, 353, 362, 404, 417, 466, 490, 511, 519, 531, 536, 559, 582, 598, 620, 623, 625, 627, 629, 631, 634, 636, 638, 659, 719, 721, 729, 735, 743, 767, 778, 808, 823, 834, 848, 865, 871, 895, 910, 922, 928, 938, 955, 964, 1010, 1017, 1022, 1078, 1100, 1123, 1131, 1143, 1148, 1177, 1185, 1236, 1303, 1305, 1316, 1321, 1325, 1337], "count_digit": 659, "count_num": [40, 320], "counterpart": 132, "countri": [226, 320, 418, 853, 922, 1023], "country_holidai": [417, 735, 1022], "covari": [742, 785, 808, 926], "cover": 10, "cow": [677, 678, 1254, 1255], "cpu": [135, 136, 157, 277, 320, 829, 897, 922, 1295, 1316], "crab": [657, 669, 1234, 1246], "crate": [37, 46, 93, 320, 657, 659, 665, 666, 667, 669, 679, 680, 693, 695, 696, 700, 922, 928, 1234, 1236, 1242, 1243, 1244, 1246, 1256, 1257, 1270, 1272, 1273, 1277], "creat": [38, 40, 50, 90, 122, 126, 128, 135, 136, 137, 138, 141, 143, 147, 150, 151, 163, 164, 165, 166, 167, 168, 169, 170, 174, 183, 184, 211, 242, 245, 252, 277, 278, 290, 294, 297, 320, 323, 324, 421, 444, 457, 466, 550, 558, 611, 620, 623, 625, 627, 629, 631, 634, 636, 638, 738, 748, 749, 750, 751, 752, 753, 754, 794, 795, 796, 804, 808, 827, 828, 834, 840, 848, 871, 892, 896, 922, 927, 1003, 1005, 1016, 1026, 1053, 1066, 1078, 1183, 1191, 1194, 1295, 1297, 1316, 1321, 1343, 1344, 1347], "create_async_engin": 137, "create_engin": [38, 320], "creation": 136, "credenti": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 820, 922], "credential_provid": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "credentialproviderfunct": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "cross": [225, 320, 852, 922, 1332], "crustacean": [669, 1246], "cst": [444, 457, 1053, 1066], "csv": [36, 37, 46, 47, 48, 49, 134, 135, 136, 140, 149, 320, 820, 922], "csvencod": [135, 136, 149], "csvquotestyl": [37, 46, 320, 922], "ctx": [1325, 1327, 1328, 1329, 1330, 1331, 1344], "cube": [1, 55, 397, 605, 808, 1000, 1316, 1338], "cuda": 897, "cum_count": [808, 1316], "cum_count_revers": [404, 808], "cum_max": [808, 1316], "cum_max_all_fil": [405, 808], "cum_max_revers": [405, 808], "cum_min": [808, 1316], "cum_min_revers": [406, 808], "cum_prod": [329, 808, 1316], "cum_prod_revers": [407, 808], "cum_reduc": 744, "cum_sum": [493, 600, 709, 747, 808, 850, 922, 1119, 1316], "cum_sum_revers": [408, 808], "cumsum_horizont": 746, "cumul": [404, 405, 406, 407, 408, 743, 744, 745, 746, 747, 808, 1010, 1011, 1012, 1013, 1014, 1316], "cumulative_ev": [808, 1316], "cumulative_sal": [600, 808], "current": [2, 3, 5, 6, 30, 37, 38, 41, 45, 46, 47, 48, 49, 129, 137, 138, 145, 147, 149, 152, 153, 154, 162, 163, 165, 166, 167, 168, 169, 170, 183, 184, 191, 225, 226, 249, 267, 277, 282, 320, 323, 324, 426, 550, 601, 808, 827, 828, 836, 852, 853, 869, 881, 897, 922, 928, 1003, 1005, 1023, 1031, 1186, 1295, 1300, 1316, 1321, 1328, 1344], "cursor": [38, 137, 320], "custom": [1, 27, 39, 40, 52, 53, 54, 55, 96, 168, 170, 189, 230, 245, 306, 320, 369, 417, 446, 449, 550, 558, 559, 621, 721, 735, 769, 770, 808, 834, 858, 905, 922, 971, 1022, 1055, 1058, 1162, 1170, 1203, 1305, 1316, 1347], "customis": [40, 320], "cut": [607, 808, 1191, 1316], "cxx": 1339, "cypher": 137, "d": [28, 35, 37, 39, 40, 41, 42, 45, 125, 155, 179, 202, 209, 211, 212, 213, 216, 225, 229, 271, 272, 282, 288, 292, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 329, 331, 404, 427, 446, 449, 496, 565, 604, 645, 659, 666, 679, 680, 685, 693, 695, 696, 736, 737, 754, 760, 787, 808, 844, 848, 852, 881, 901, 903, 906, 907, 908, 909, 910, 911, 912, 922, 928, 998, 1010, 1032, 1055, 1058, 1105, 1129, 1236, 1243, 1256, 1257, 1262, 1270, 1272, 1273, 1284, 1316, 1332, 1334, 1336, 1339, 1340], "d1": [40, 320, 421], "d2": 421, "d3": 421, "d789": [40, 320], "d_4": [685, 1262], "dai": [65, 66, 82, 211, 224, 226, 252, 290, 320, 323, 417, 436, 437, 439, 440, 442, 444, 446, 449, 450, 457, 459, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 735, 748, 749, 750, 751, 752, 753, 754, 795, 796, 808, 848, 853, 871, 922, 928, 1022, 1045, 1046, 1048, 1049, 1051, 1053, 1055, 1058, 1059, 1066, 1068, 1078, 1316, 1340], "dark": 1325, "data": [0, 1, 10, 18, 19, 21, 24, 28, 35, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 64, 65, 66, 68, 78, 79, 81, 82, 90, 93, 97, 99, 102, 116, 122, 123, 124, 125, 126, 127, 128, 129, 130, 132, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 176, 178, 184, 185, 195, 198, 199, 209, 210, 211, 223, 224, 225, 228, 230, 243, 244, 248, 253, 254, 255, 257, 261, 264, 272, 277, 278, 279, 282, 284, 294, 298, 318, 320, 324, 332, 333, 334, 337, 338, 339, 340, 341, 342, 345, 348, 349, 350, 351, 352, 354, 357, 359, 360, 361, 366, 367, 368, 370, 371, 373, 374, 375, 376, 377, 378, 379, 391, 393, 394, 395, 399, 400, 401, 402, 403, 410, 411, 412, 417, 418, 419, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 471, 482, 484, 485, 486, 490, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 510, 511, 515, 516, 518, 523, 529, 531, 538, 549, 551, 557, 559, 594, 595, 599, 600, 607, 609, 610, 613, 614, 615, 616, 618, 619, 623, 625, 627, 629, 631, 634, 636, 638, 639, 641, 643, 648, 649, 650, 656, 659, 660, 661, 664, 665, 666, 667, 671, 672, 673, 674, 675, 676, 683, 684, 685, 686, 693, 694, 695, 696, 698, 700, 703, 712, 713, 714, 717, 718, 721, 724, 730, 738, 741, 748, 749, 750, 751, 752, 753, 754, 764, 765, 767, 768, 769, 770, 780, 783, 794, 795, 796, 799, 804, 808, 820, 827, 828, 829, 830, 835, 839, 841, 847, 848, 872, 876, 892, 922, 927, 930, 935, 936, 948, 950, 951, 952, 953, 954, 956, 958, 959, 970, 972, 974, 975, 976, 978, 979, 991, 993, 995, 996, 1003, 1004, 1005, 1016, 1017, 1022, 1023, 1024, 1025, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1075, 1078, 1082, 1083, 1100, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1125, 1126, 1127, 1128, 1130, 1135, 1141, 1143, 1150, 1161, 1163, 1170, 1184, 1191, 1193, 1197, 1198, 1199, 1201, 1202, 1213, 1215, 1223, 1228, 1233, 1234, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1248, 1249, 1250, 1251, 1252, 1253, 1260, 1261, 1262, 1263, 1270, 1271, 1272, 1273, 1275, 1277, 1280, 1291, 1296, 1297, 1298, 1299, 1302, 1315, 1316, 1325, 1332, 1339, 1344, 1346], "data_bar": [40, 320], "data_bar_2010": [40, 320], "data_label": [40, 320], "data_page_s": [45, 49, 320, 922], "databas": [38, 121, 137, 138, 320, 820], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 77, 94, 97, 98, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 158, 159, 162, 163, 174, 318, 319, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 786, 787, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 804, 808, 820, 829, 830, 832, 834, 836, 839, 841, 845, 848, 852, 853, 854, 855, 856, 858, 862, 863, 867, 870, 872, 879, 881, 886, 887, 888, 889, 891, 894, 898, 899, 901, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 922, 927, 928, 1016, 1017, 1052, 1078, 1100, 1170, 1191, 1247, 1251, 1262, 1263, 1286, 1292, 1293, 1305, 1316, 1325, 1326, 1327, 1328, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1347], "dataframeplot": [320, 323], "dataload": [282, 320], "datapoint": [211, 320, 848, 922], "dataset": [14, 45, 69, 135, 136, 139, 140, 146, 149, 150, 155, 225, 282, 320, 508, 808, 820, 852, 858, 922, 1120, 1316, 1345], "datat": [40, 320], "datatyp": [37, 46, 122, 124, 125, 126, 128, 130, 142, 144, 145, 147, 148, 153, 154, 166, 167, 169, 195, 204, 320, 391, 469, 645, 714, 737, 756, 768, 804, 808, 820, 839, 922, 927, 928, 991, 1017, 1071, 1170, 1222, 1299, 1316, 1342], "date": [16, 40, 51, 66, 135, 136, 138, 140, 146, 147, 149, 152, 154, 155, 182, 189, 209, 211, 224, 226, 252, 267, 320, 323, 352, 417, 419, 420, 421, 422, 425, 427, 429, 430, 432, 435, 436, 437, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 466, 518, 600, 620, 623, 625, 627, 629, 631, 634, 636, 638, 693, 695, 714, 735, 749, 750, 752, 753, 760, 768, 794, 808, 826, 834, 848, 853, 871, 922, 928, 954, 1022, 1024, 1025, 1026, 1027, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1078, 1130, 1179, 1180, 1270, 1272, 1299, 1316, 1337, 1340, 1342], "date32": [224, 320], "date_format": [37, 46, 320, 922], "date_min": 439, "date_minus_1y_2mon": 1048, "date_part": 1337, "date_plus_1i": [439, 1048], "date_rang": [226, 290, 320, 425, 427, 440, 448, 459, 752, 753, 853, 922, 1030, 1044, 1049, 1050, 1067, 1068], "date_right": [226, 320, 853, 922], "datetim": [16, 37, 40, 46, 51, 93, 129, 139, 147, 150, 152, 154, 165, 166, 167, 169, 182, 189, 209, 211, 224, 226, 252, 267, 290, 320, 323, 352, 417, 418, 419, 420, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 466, 518, 567, 600, 620, 623, 625, 627, 629, 631, 634, 636, 638, 693, 696, 714, 735, 748, 749, 750, 752, 753, 754, 760, 768, 795, 796, 808, 826, 834, 848, 853, 871, 922, 927, 928, 954, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1078, 1130, 1179, 1180, 1270, 1273, 1297, 1299, 1316, 1339, 1340], "datetime_format": [37, 46, 320, 922], "datetime_rang": [211, 320, 419, 422, 436, 437, 439, 443, 444, 450, 451, 452, 453, 454, 455, 456, 457, 460, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 808, 848, 922, 1023, 1024, 1027, 1031, 1032, 1033, 1038, 1039, 1041, 1043, 1045, 1046, 1047, 1048, 1052, 1053, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066], "datetime_str": 446, "datetimeindex": 127, "david": 1345, "day_nam": [446, 449], "day_of_month": [425, 440, 459], "day_of_year": [425, 440, 459], "daylight": [211, 226, 252, 290, 320, 418, 426, 439, 444, 457, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 754, 795, 796, 808, 848, 853, 871, 922, 1031, 1048, 1053, 1066], "dayofweek": 1340, "dayofyear": 1340, "days_diff": 450, "db": [38, 137, 138, 320], "dbapi2": 137, "dbc": [659, 1236], "dbreadengin": 138, "dbwriteengin": [38, 320], "dbwritemod": [38, 320], "dd": [40, 320, 1339], "ddd": [1, 40, 320, 704, 706, 707], "dddd": 1339, "ddof": [268, 291, 320, 366, 371, 546, 552, 633, 634, 637, 638, 655, 722, 740, 742, 784, 785, 789, 797, 808, 882, 890, 922, 968, 973, 1158, 1164, 1210, 1212, 1232, 1306, 1316], "ddww": 1339, "de": 1339, "deal": [45, 49, 223, 320, 332, 334, 442, 443, 610, 693, 696, 725, 726, 727, 728, 751, 808, 922, 935, 936, 1051, 1052, 1193, 1270, 1273, 1316], "debug": [29, 858, 922, 1347], "decad": [1325, 1340], "decai": [465, 466, 467, 468, 808, 1077, 1078, 1079, 1080, 1316], "decemb": [449, 1058], "decim": [9, 10, 11, 27, 28, 37, 40, 46, 135, 136, 149, 320, 324, 639, 697, 808, 922, 928, 1213, 1274, 1316, 1338], "decimal_comma": [135, 136, 149], "decimal_separ": [9, 27], "declar": [122, 124, 125, 126, 128, 137, 144, 145, 153, 277, 282, 320, 922, 928, 1325], "decod": [135, 136, 673], "decompos": [286, 320, 887, 922], "decompress": [45, 47, 49, 320, 922], "decor": [50, 52, 53, 54, 55, 165, 169, 230, 320, 559, 808, 819, 820, 1170, 1316], "dedic": [1, 123, 223, 254, 320, 928, 1344], "deem": [189, 320, 834, 922], "deepcopi": [183, 320, 827, 922, 1003, 1316], "def": [1, 50, 52, 53, 54, 55, 137, 163, 165, 169, 174, 244, 284, 320, 329, 604, 663, 666, 690, 724, 769, 808, 830, 866, 922, 928, 1240, 1243, 1347], "default": [4, 5, 9, 10, 14, 27, 30, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 57, 58, 59, 63, 66, 67, 68, 122, 124, 125, 126, 127, 128, 129, 135, 136, 138, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 158, 160, 162, 163, 164, 165, 166, 167, 168, 169, 174, 189, 190, 193, 194, 197, 206, 210, 211, 212, 223, 225, 226, 234, 236, 243, 245, 252, 253, 254, 255, 256, 260, 263, 267, 268, 270, 275, 277, 278, 282, 285, 287, 288, 289, 291, 296, 305, 320, 331, 332, 334, 357, 364, 369, 377, 410, 412, 417, 442, 443, 449, 462, 464, 465, 467, 468, 488, 525, 529, 538, 543, 544, 546, 550, 552, 553, 558, 566, 567, 570, 573, 592, 593, 595, 600, 601, 607, 610, 614, 615, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 644, 646, 655, 656, 665, 672, 683, 688, 689, 690, 693, 695, 696, 698, 700, 721, 722, 725, 727, 730, 734, 735, 739, 740, 742, 749, 750, 751, 752, 753, 754, 757, 760, 764, 765, 766, 768, 774, 780, 783, 786, 789, 790, 792, 795, 796, 797, 799, 808, 829, 830, 834, 835, 837, 838, 840, 847, 848, 852, 853, 862, 871, 875, 877, 881, 882, 886, 888, 889, 890, 895, 897, 904, 922, 928, 935, 936, 959, 966, 971, 978, 1004, 1016, 1017, 1022, 1051, 1052, 1058, 1072, 1076, 1077, 1079, 1080, 1098, 1137, 1141, 1150, 1155, 1156, 1162, 1179, 1180, 1186, 1191, 1193, 1197, 1198, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1215, 1221, 1224, 1232, 1233, 1234, 1242, 1246, 1249, 1260, 1265, 1266, 1267, 1270, 1272, 1273, 1275, 1277, 1295, 1297, 1305, 1306, 1316, 1338, 1347], "default_match": [657, 669], "default_scop": 34, "defaultazurecredenti": 33, "defaultdict": [255, 320], "defer": [174, 320, 323, 324, 1316, 1321], "defin": [37, 40, 46, 66, 69, 137, 144, 162, 163, 165, 182, 193, 194, 198, 211, 230, 241, 244, 252, 289, 306, 320, 395, 496, 525, 559, 604, 607, 619, 620, 623, 625, 627, 629, 631, 634, 636, 638, 671, 676, 683, 694, 701, 749, 750, 752, 753, 770, 790, 795, 796, 808, 826, 837, 838, 841, 848, 866, 871, 889, 905, 922, 927, 928, 996, 1105, 1137, 1170, 1191, 1202, 1248, 1253, 1260, 1271, 1278, 1316], "definit": [40, 320, 508, 808, 927, 928, 1120, 1316], "deflat": [35, 320], "deg": 1341, "degre": [268, 291, 320, 546, 552, 609, 633, 634, 637, 638, 655, 722, 732, 742, 784, 785, 789, 797, 808, 882, 890, 922, 1210, 1212, 1232, 1306, 1316, 1337], "delet": [69, 1332, 1346], "delimit": [44, 46, 145, 153, 245, 275, 320, 656, 672, 922, 1233, 1249, 1292, 1316], "delta": [39, 139, 150, 268, 291, 320, 546, 552, 633, 634, 637, 638, 655, 722, 742, 784, 785, 789, 797, 808, 820, 882, 890, 922, 1210, 1212, 1232, 1306, 1316], "delta_merge_opt": [39, 320], "delta_table_opt": [139, 150], "delta_write_opt": [39, 320], "deltalak": [39, 139, 150, 157, 320], "deltat": [39, 139, 150, 320], "demo": [40, 320], "demonstr": [135, 479, 808, 928], "dens": [20, 209, 320, 610, 808, 1193, 1316], "densiti": [1316, 1321], "depend": [45, 50, 56, 90, 137, 140, 146, 157, 179, 320, 350, 351, 515, 516, 559, 570, 607, 610, 754, 757, 760, 766, 808, 932, 952, 953, 1127, 1128, 1191, 1193, 1316, 1347], "deploi": [165, 169], "deprec": [39, 135, 136, 162, 163, 164, 165, 169, 172, 180, 236, 278, 296, 301, 320, 424, 460, 481, 577, 614, 656, 664, 723, 732, 740, 741, 808, 823, 840, 862, 875, 888, 894, 895, 900, 922, 1029, 1037, 1038, 1069, 1097, 1197, 1233, 1241, 1297, 1316], "depth": 132, "desc": [928, 1325, 1328, 1332, 1334], "descend": [51, 261, 266, 320, 345, 365, 545, 610, 643, 652, 653, 721, 733, 808, 876, 880, 922, 947, 967, 1117, 1157, 1193, 1219, 1230, 1305, 1316], "describ": [165, 209, 320, 922, 1316], "descript": [211, 320, 848, 922, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1342, 1345, 1346], "deseri": [132, 260, 320, 481, 573, 808, 875, 922], "deserializ": [190, 260, 320, 412, 573, 808, 835, 875, 922], "design": [277, 282, 320], "desir": [165, 225, 320, 369, 460, 550, 852, 922, 971, 1069, 1162], "destin": 138, "detail": [56, 123, 137, 138, 158, 160, 178, 211, 320, 449, 714, 808, 848, 897, 922, 1058, 1299, 1316, 1347], "determin": [14, 37, 40, 46, 51, 59, 87, 132, 135, 136, 137, 140, 146, 147, 149, 154, 156, 181, 185, 204, 211, 223, 224, 230, 252, 283, 284, 290, 320, 390, 429, 442, 443, 490, 550, 570, 607, 613, 615, 650, 658, 671, 693, 694, 696, 697, 716, 751, 780, 783, 799, 808, 824, 831, 832, 839, 848, 871, 885, 891, 922, 1034, 1051, 1052, 1100, 1162, 1191, 1197, 1198, 1228, 1235, 1270, 1273, 1274, 1316], "dev": [177, 931, 1210, 1316], "develop": [138, 165, 169], "deviat": [268, 320, 467, 633, 634, 655, 789, 808, 882, 922, 1079, 1232, 1316, 1333], "devic": [277, 320, 829, 897, 922, 1295, 1316], "devicememoryresourc": 897, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 77, 94, 98, 123, 124, 125, 126, 127, 128, 129, 136, 137, 138, 149, 162, 163, 165, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 200, 201, 202, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 377, 378, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 626, 628, 630, 632, 633, 635, 637, 639, 640, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 782, 786, 788, 789, 790, 791, 792, 793, 794, 796, 797, 798, 804, 808, 848, 871, 887, 889, 902, 905, 913, 922, 928, 1052, 1078, 1247, 1251, 1262, 1263, 1293, 1316, 1321, 1325, 1326, 1327, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1347], "df0": [237, 320, 863, 922, 1331], "df1": [51, 59, 158, 159, 196, 199, 237, 267, 292, 320, 863, 922, 1328, 1330, 1331, 1332, 1344], "df2": [51, 59, 158, 159, 196, 199, 292, 320, 1328, 1330, 1331, 1332, 1344], "df3": [51, 320], "df4": 320, "df5": 320, "df6": 320, "df_a": 1344, "df_a1": 59, "df_a2": 59, "df_a3": 59, "df_agg_nuniqu": [241, 320], "df_b": 1344, "df_current_batch": 136, "df_d1": 59, "df_d2": 59, "df_from_str_repr": [276, 320], "df_h1": 59, "df_h2": 59, "df_new_grid": [494, 808], "df_nuniqu": [241, 320], "df_original_grid": [494, 808], "df_panda": 1326, "df_pd": 123, "df_tempor": [623, 625, 627, 629, 631, 634, 636, 638, 808], "dfi": [123, 178], "diagon": [59, 284, 320], "diagonal_relax": 59, "dict": [30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 56, 122, 124, 125, 126, 127, 128, 132, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 165, 203, 223, 243, 249, 253, 254, 255, 273, 274, 277, 282, 284, 320, 808, 869, 922, 926, 927, 928, 1089, 1316, 1329], "dictat": [439, 808, 926, 1048], "dictionari": [30, 37, 40, 41, 45, 46, 47, 48, 49, 56, 81, 122, 124, 125, 126, 128, 132, 135, 136, 137, 138, 142, 144, 145, 147, 148, 149, 152, 153, 154, 223, 243, 253, 254, 255, 273, 274, 277, 282, 320, 922, 927], "did": [418, 1023], "diff": [294, 320, 450, 451, 452, 453, 454, 455, 456, 539, 808, 892, 922, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1151, 1316], "differ": [40, 45, 93, 96, 117, 135, 140, 155, 158, 160, 174, 193, 199, 211, 212, 223, 225, 245, 252, 254, 255, 274, 277, 278, 284, 320, 413, 425, 439, 440, 443, 449, 458, 464, 479, 488, 520, 539, 541, 550, 559, 592, 593, 595, 600, 614, 615, 693, 719, 757, 760, 766, 808, 837, 838, 840, 848, 852, 871, 922, 928, 998, 1018, 1030, 1048, 1049, 1052, 1058, 1067, 1074, 1083, 1098, 1132, 1151, 1153, 1170, 1179, 1180, 1182, 1197, 1198, 1270, 1316, 1340, 1342, 1344], "digit": [67, 604, 639, 640, 666, 808, 928, 1213, 1214, 1236, 1243, 1316, 1347], "dimens": [122, 124, 126, 128, 144, 145, 153, 320, 616, 808, 922, 1199, 1297, 1316], "dimension": [124, 126, 128, 278, 320, 922, 1316], "direct": [40, 138, 147, 151, 154, 263, 277, 288, 320, 364, 543, 644, 808, 877, 922, 966, 1155, 1221, 1316], "directli": [6, 30, 40, 58, 137, 165, 169, 174, 255, 277, 320, 465, 467, 468, 615, 783, 808, 830, 922, 1077, 1079, 1080, 1198, 1295, 1316, 1328, 1344, 1347], "directori": [40, 45, 147, 149, 152, 154, 320, 926], "dirpath": [35, 37, 41, 42, 45, 149, 320], "disabl": [45, 49, 50, 89, 90, 147, 152, 166, 223, 320, 829, 922], "disable_string_cach": 90, "disallow": 165, "discard": [202, 320, 475, 808, 844, 922, 1087, 1316], "disco": [668, 670, 1245, 1247], "discont": [668, 670, 1245, 1247], "discourag": [559, 808], "discoveri": [245, 320], "discret": [410, 413, 462, 490, 520, 539, 607, 808, 1016, 1018, 1072, 1100, 1132, 1151, 1191, 1316], "disk": [45, 46, 47, 48, 49, 141, 320, 574, 878, 922], "dispatch": 928, "displai": [7, 10, 11, 12, 13, 17, 18, 19, 23, 24, 25, 40, 189, 209, 320, 834, 840, 922], "distanc": [226, 320, 490, 808, 853, 922, 1100, 1316], "distinct": [40, 169, 243, 245, 298, 320, 370, 499, 502, 551, 610, 619, 754, 808, 972, 1109, 1112, 1163, 1193, 1202, 1316, 1333, 1343, 1345, 1347], "distinct_count": [45, 49, 320, 922], "distinguish": [449, 1058], "distribut": [508, 650, 808, 1120, 1228, 1316], "div": 1337, "divid": [20, 410, 444, 457, 465, 467, 468, 479, 508, 607, 808, 1016, 1053, 1066, 1077, 1079, 1080, 1120, 1191, 1316, 1333, 1338], "divis": [479, 717, 808, 1338], "divisor": [268, 291, 320, 546, 552, 633, 634, 637, 638, 655, 722, 742, 784, 785, 789, 797, 808, 882, 890, 922, 1210, 1212, 1232, 1306, 1316], "dl": [282, 320], "do": [1, 40, 46, 47, 48, 49, 51, 57, 58, 124, 125, 128, 135, 147, 149, 154, 158, 159, 160, 161, 179, 189, 191, 199, 222, 225, 226, 245, 249, 272, 284, 288, 320, 323, 409, 417, 522, 558, 679, 680, 688, 689, 690, 740, 780, 783, 799, 808, 825, 829, 830, 834, 836, 840, 852, 853, 858, 867, 869, 878, 897, 922, 928, 1015, 1022, 1083, 1134, 1256, 1257, 1265, 1266, 1267, 1300, 1316, 1321], "do_polars_oper": 29, "do_someth": 137, "do_various_th": 174, "doc": [39, 41, 42, 138, 141, 143, 158, 160, 176, 177, 187, 320, 930, 931], "document": [32, 93, 138, 176, 320, 324, 446, 449, 674, 693, 695, 696, 700, 804, 897, 930, 998, 1055, 1058, 1251, 1270, 1272, 1273, 1277], "doe": [10, 37, 39, 46, 51, 59, 111, 122, 124, 125, 126, 128, 129, 135, 136, 137, 138, 139, 140, 144, 145, 149, 150, 153, 155, 184, 199, 202, 206, 211, 212, 224, 225, 253, 254, 255, 285, 294, 297, 320, 323, 324, 460, 475, 479, 488, 550, 559, 658, 668, 670, 681, 689, 690, 719, 804, 808, 828, 829, 834, 844, 848, 852, 858, 886, 892, 896, 922, 1005, 1069, 1083, 1087, 1098, 1223, 1235, 1245, 1247, 1258, 1316, 1321, 1339], "doesn": [39, 135, 149, 211, 226, 320, 462, 808, 848, 853, 922, 1072, 1316], "dog": [657, 699, 702, 739, 1234, 1276, 1279], "doi": 1340, "dollar": [679, 680, 1256, 1257], "domain": [1, 666, 1243], "don": [59, 211, 226, 230, 285, 288, 320, 409, 522, 559, 600, 808, 848, 853, 886, 922, 928, 1015, 1134, 1170, 1316], "done": [136, 155, 174, 180, 226, 320, 335, 336, 600, 808, 823, 826, 853, 922, 938, 1316], "dot": [51, 574, 804, 808, 878, 922, 1316], "doubl": [279, 320, 679, 680, 1256, 1257], "dow": 1340, "down": [149, 152, 153, 154, 155, 182, 320, 391, 478, 808, 1090, 1316], "download": [145, 149, 152, 153, 574, 878, 922], "downstream": [278, 320, 643, 808, 1219, 1316], "dr": 151, "drago": [671, 1248], "dragon": 671, "dragonfr": 1248, "dragonfruit": [671, 683, 694, 1248, 1260, 1271], "dramat": 140, "draw": [20, 25, 165, 169, 1347], "drawback": 804, "drawfn": 1347, "drawing_charact": 20, "dremio": 137, "driver": [38, 137, 138, 320], "drop": [1, 125, 192, 193, 194, 230, 285, 294, 320, 413, 415, 416, 520, 521, 607, 808, 837, 838, 886, 892, 922, 1018, 1020, 1021, 1132, 1133, 1191, 1316, 1343], "drop_dupl": [285, 320, 886, 922], "drop_empty_col": [140, 146], "drop_empty_row": [140, 146], "drop_first": [275, 320, 1292, 1316], "drop_in_plac": 320, "drop_nan": [320, 416, 808, 922, 1021, 1316], "drop_nul": [320, 415, 808, 922, 1020, 1316], "dset": 155, "dst": [444, 457, 1053, 1066], "dst_offset": [418, 1023], "dt": [1, 40, 51, 140, 146, 252, 320, 620, 754, 808, 817, 871, 922, 928, 1324, 1339, 1340], "dt1": 1339, "dt2": 1339, "dtm": [40, 320, 421, 449, 928, 1026, 1058, 1339], "dtm_iso": 449, "dtm_iso_strict": 449, "dtype": [10, 40, 50, 54, 60, 66, 81, 89, 90, 100, 122, 124, 126, 128, 129, 135, 136, 137, 138, 140, 144, 145, 146, 149, 153, 162, 163, 164, 165, 169, 176, 178, 182, 185, 211, 226, 252, 276, 277, 278, 279, 282, 288, 297, 320, 377, 391, 392, 393, 394, 395, 396, 407, 408, 449, 460, 469, 482, 517, 525, 556, 558, 559, 566, 605, 612, 613, 620, 645, 647, 673, 693, 710, 714, 720, 730, 737, 756, 760, 764, 765, 767, 768, 769, 770, 780, 783, 790, 799, 808, 826, 831, 848, 853, 871, 896, 922, 927, 928, 930, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 978, 991, 992, 993, 994, 995, 996, 997, 998, 1003, 1013, 1014, 1017, 1018, 1058, 1069, 1076, 1107, 1125, 1126, 1129, 1137, 1161, 1168, 1170, 1189, 1200, 1222, 1225, 1250, 1270, 1287, 1294, 1295, 1297, 1298, 1299, 1300, 1304, 1316, 1344, 1347], "dtype_format": [40, 320], "dtypekind": 178, "dtypelik": [176, 930], "dtypeoper": [1, 54], "dubiou": 93, "due": [211, 226, 252, 255, 290, 320, 331, 426, 439, 444, 457, 583, 584, 586, 588, 590, 591, 620, 623, 625, 627, 629, 631, 634, 636, 638, 735, 749, 750, 752, 753, 795, 796, 808, 826, 848, 853, 871, 922, 1031, 1048, 1053, 1066], "dummi": [275, 320, 1292, 1316], "duplic": [51, 98, 218, 225, 226, 227, 285, 289, 320, 331, 497, 583, 607, 808, 852, 853, 854, 886, 889, 922, 1106, 1191, 1316, 1345], "duplicateerror": [607, 808, 1191, 1316], "dur": [227, 320, 854, 922], "durat": [174, 226, 290, 320, 418, 426, 449, 450, 451, 452, 453, 454, 455, 456, 460, 466, 714, 749, 750, 752, 753, 795, 796, 808, 853, 922, 927, 928, 1023, 1031, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1069, 1078, 1297, 1299, 1316], "dure": [50, 97, 135, 136, 149, 174, 199, 320, 1083, 1316], "dutch": [417, 735, 1022], "dynam": [211, 320, 369, 550, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 808, 848, 922, 926, 971, 1162], "dynamicgroupbi": [211, 320], "e": [10, 35, 37, 39, 41, 42, 45, 46, 123, 132, 135, 141, 143, 147, 152, 154, 155, 167, 190, 202, 209, 213, 222, 229, 271, 272, 278, 288, 320, 329, 412, 462, 466, 469, 496, 553, 559, 564, 565, 566, 567, 568, 570, 571, 572, 574, 575, 576, 645, 650, 669, 689, 690, 701, 756, 770, 787, 798, 808, 835, 844, 856, 869, 922, 928, 1072, 1078, 1105, 1228, 1246, 1278, 1316, 1334, 1339, 1347], "e101": [40, 320], "e_filt": [570, 572], "e_sum_ov": [570, 572], "e_sum_slic": [570, 572], "each": [37, 40, 46, 51, 60, 67, 77, 136, 137, 140, 145, 153, 158, 159, 160, 161, 163, 186, 188, 195, 202, 209, 210, 211, 224, 226, 230, 243, 245, 252, 254, 256, 277, 282, 286, 289, 290, 298, 299, 301, 303, 305, 306, 314, 320, 345, 390, 394, 395, 410, 444, 457, 475, 499, 502, 528, 531, 538, 548, 555, 559, 607, 610, 618, 619, 626, 630, 641, 646, 653, 666, 670, 671, 675, 676, 683, 685, 686, 694, 701, 716, 730, 733, 739, 764, 765, 790, 798, 808, 829, 832, 833, 839, 844, 848, 853, 867, 871, 887, 889, 898, 900, 902, 904, 905, 913, 922, 947, 995, 996, 1002, 1016, 1053, 1066, 1109, 1112, 1140, 1143, 1150, 1160, 1191, 1193, 1201, 1202, 1215, 1224, 1243, 1247, 1248, 1252, 1253, 1260, 1262, 1263, 1271, 1278, 1286, 1316, 1333, 1344, 1345, 1347], "eager": [211, 226, 245, 288, 320, 419, 422, 425, 427, 436, 437, 439, 440, 443, 444, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 623, 625, 627, 629, 631, 634, 636, 638, 730, 734, 749, 750, 752, 753, 760, 764, 765, 780, 783, 786, 787, 790, 795, 796, 799, 807, 808, 848, 853, 858, 922, 927, 1023, 1024, 1027, 1030, 1031, 1032, 1033, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1344], "eagerli": [550, 1325], "ear": [683, 694, 1260], "earlier": [226, 320, 853, 922], "earliest": [211, 320, 442, 443, 693, 696, 751, 848, 914, 922, 1051, 1052, 1270, 1273], "easi": 174, "easiest": 179, "easili": [51, 258, 282, 294, 299, 320, 790, 804, 873, 892, 898, 922], "east": [69, 154, 227, 320, 854, 922], "ebf1d": [40, 320], "eee": [1, 40, 320, 928], "ef": 680, "effect": [40, 204, 211, 320, 426, 479, 559, 585, 587, 589, 740, 808, 848, 895, 896, 922, 1023, 1031], "effici": [123, 137, 222, 224, 320, 558, 808], "efgh": 1339, "eg": [17, 25, 40, 59, 138, 174, 277, 320, 444, 693, 696, 717, 808, 928, 1270, 1273], "egnaro": 1339, "either": [81, 165, 221, 225, 226, 227, 243, 252, 253, 277, 278, 320, 466, 558, 605, 607, 620, 693, 725, 733, 737, 790, 808, 829, 852, 853, 854, 856, 871, 922, 926, 928, 1078, 1189, 1191, 1270, 1316, 1329, 1347], "element": [13, 14, 25, 160, 161, 164, 165, 167, 169, 179, 181, 188, 221, 245, 253, 266, 268, 283, 291, 320, 337, 338, 339, 340, 341, 342, 353, 354, 389, 390, 397, 400, 401, 402, 403, 405, 406, 407, 408, 409, 415, 416, 470, 471, 475, 488, 492, 500, 511, 519, 521, 522, 523, 526, 531, 539, 540, 541, 542, 546, 552, 554, 555, 558, 559, 600, 601, 610, 613, 621, 622, 624, 626, 628, 630, 632, 633, 635, 637, 642, 647, 648, 649, 653, 654, 655, 685, 686, 697, 712, 713, 715, 716, 722, 733, 742, 784, 785, 789, 797, 808, 824, 833, 880, 882, 885, 890, 922, 939, 940, 941, 942, 943, 944, 955, 956, 990, 1000, 1003, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1014, 1015, 1020, 1021, 1081, 1082, 1087, 1088, 1099, 1102, 1110, 1119, 1121, 1123, 1124, 1131, 1133, 1134, 1135, 1138, 1143, 1151, 1152, 1153, 1154, 1166, 1167, 1170, 1186, 1193, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1217, 1225, 1226, 1227, 1231, 1232, 1262, 1263, 1274, 1288, 1289, 1290, 1294, 1301, 1302, 1306, 1316, 1333, 1334], "elementwis": [558, 600, 621, 622, 624, 626, 628, 630, 633, 635, 637, 808, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1316], "elif": 798, "elig": [858, 922], "elimin": [508, 808, 1120, 1316], "elis": [237, 320, 863, 922], "ellips": 20, "ellipsi": [209, 320], "elppa": 1339, "els": [136, 798], "email": [666, 1243], "email_part": [666, 1243], "emphas": [320, 324], "emploi": 928, "empti": [13, 35, 37, 46, 102, 125, 135, 136, 140, 146, 149, 183, 184, 211, 236, 287, 320, 656, 664, 768, 786, 827, 828, 848, 862, 888, 922, 927, 928, 1003, 1005, 1088, 1107, 1121, 1233, 1241, 1316], "en": [20, 40, 320], "enabl": [28, 29, 45, 49, 50, 89, 90, 139, 147, 150, 152, 154, 158, 159, 160, 161, 173, 176, 258, 279, 294, 320, 332, 334, 614, 615, 643, 658, 668, 670, 681, 721, 804, 808, 829, 873, 892, 922, 930, 935, 936, 1197, 1198, 1219, 1235, 1245, 1247, 1258, 1298, 1305, 1316], "enable_string_cach": 89, "enclos": [481, 808], "encod": [63, 69, 80, 132, 135, 136, 149, 275, 320, 323, 374, 481, 618, 660, 705, 808, 975, 1201, 1237, 1292, 1316, 1321], "encount": [113, 135, 136, 149, 211, 320, 592, 593, 673, 674, 740, 744, 758, 808, 848, 922, 1179, 1180, 1250, 1251, 1316], "end": [37, 40, 46, 135, 136, 149, 211, 245, 320, 373, 376, 379, 392, 396, 418, 444, 469, 544, 657, 662, 666, 671, 677, 683, 687, 688, 689, 692, 730, 735, 748, 749, 750, 751, 752, 753, 756, 764, 765, 795, 796, 798, 804, 808, 848, 867, 922, 928, 977, 992, 997, 1023, 1053, 1117, 1156, 1239, 1243, 1248, 1254, 1260, 1264, 1265, 1266, 1271, 1316, 1339], "endian": [377, 978], "endpoint": [410, 607, 808, 1016, 1191, 1316], "ends_a": 1339, "ends_in_digit": 1339, "ends_with": [373, 379, 396, 657, 687, 928, 997, 1264, 1337], "ends_with_expr": 376, "ends_with_lit": 376, "engin": [14, 38, 137, 138, 140, 146, 171, 210, 225, 230, 278, 285, 306, 320, 558, 787, 808, 829, 847, 852, 858, 862, 886, 897, 905, 919, 922, 1170, 1297, 1316, 1328, 1344], "engine_opt": [38, 140, 320], "enginetyp": [829, 922], "enough": [522, 650, 808, 1134, 1228, 1316], "ensur": [10, 40, 138, 164, 167, 176, 202, 210, 243, 245, 253, 278, 320, 496, 558, 808, 844, 847, 858, 897, 922, 926, 928, 930, 1297, 1316], "enter": 174, "entir": [40, 57, 58, 140, 146, 320, 829, 830, 922], "entri": [174, 320, 922, 927, 1344], "entropi": [808, 1316], "enumer": [69, 127, 135, 136, 140, 146, 149, 224, 320], "env": [4, 170], "env_onli": 30, "environ": [4, 30, 37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 168, 171, 277, 320, 922], "eol_char": [135, 136, 149], "eparg": 1339, "epoch": [65, 66, 760, 1340], "epoch_": [427, 1032], "epoch_n": [427, 1032], "epochtimeunit": [427, 760, 1032], "eq": [202, 320, 464, 475, 808, 844, 922, 1074, 1316], "eq_miss": [808, 1182, 1316], "equal": [50, 90, 135, 136, 149, 158, 159, 160, 161, 211, 226, 227, 237, 266, 320, 410, 457, 463, 464, 484, 510, 550, 595, 607, 613, 621, 622, 624, 626, 628, 630, 633, 635, 637, 653, 677, 678, 681, 703, 733, 784, 785, 798, 804, 808, 848, 853, 854, 863, 880, 922, 1016, 1053, 1074, 1162, 1182, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1254, 1255, 1258, 1280, 1316, 1333, 1336, 1347], "equival": [40, 122, 124, 125, 126, 128, 144, 145, 153, 211, 221, 241, 320, 329, 333, 395, 463, 464, 466, 479, 484, 486, 510, 557, 579, 581, 594, 595, 596, 599, 605, 676, 699, 701, 702, 709, 717, 724, 808, 848, 922, 996, 1073, 1074, 1078, 1093, 1095, 1119, 1122, 1169, 1181, 1182, 1253, 1276, 1278, 1279, 1316, 1326, 1334], "err": 667, "error": [14, 39, 58, 108, 112, 114, 124, 125, 128, 135, 136, 147, 149, 154, 245, 253, 278, 320, 331, 356, 357, 374, 417, 525, 527, 529, 550, 583, 615, 657, 660, 665, 667, 669, 673, 674, 693, 695, 696, 700, 808, 826, 830, 897, 905, 922, 958, 959, 975, 1022, 1137, 1139, 1141, 1198, 1234, 1237, 1242, 1244, 1246, 1250, 1251, 1270, 1272, 1273, 1277, 1297, 1316, 1342], "escap": [91, 135, 136, 138, 149, 663, 679, 680, 1240, 1256, 1257], "esp": 14, "especi": [163, 619, 808, 922, 1202, 1316], "espresso": 928, "est": 752, "establish": [137, 174], "estim": [135, 136, 180, 197, 320, 336, 467, 468, 508, 729, 808, 823, 922, 938, 1076, 1079, 1080, 1120, 1316], "estimated_s": [320, 1316], "etc": [21, 39, 40, 135, 139, 140, 141, 143, 150, 151, 320, 559, 808, 926, 928, 1216, 1218, 1316, 1340], "eu": [150, 151], "eur": [209, 320, 1347], "europ": [422, 426, 443, 1027, 1031, 1052], "eval": [276, 320, 558, 559, 755, 808, 1170, 1294, 1316], "evalu": [46, 47, 48, 49, 154, 200, 202, 226, 320, 333, 346, 348, 349, 381, 382, 383, 384, 386, 387, 409, 475, 493, 513, 514, 550, 599, 600, 725, 727, 730, 734, 749, 750, 752, 753, 755, 764, 765, 780, 783, 786, 790, 795, 796, 798, 799, 808, 829, 844, 850, 852, 853, 922, 948, 950, 951, 982, 983, 984, 985, 987, 988, 1015, 1087, 1125, 1126, 1307, 1316, 1336], "even": [37, 46, 135, 225, 320, 466, 604, 607, 808, 852, 922, 928, 1078, 1191, 1316], "evenli": [211, 320, 848, 922], "event": [58, 830, 922], "eventu": [38, 320], "ever": [600, 808], "everi": [14, 37, 46, 135, 136, 140, 146, 149, 205, 211, 274, 290, 320, 348, 349, 350, 351, 354, 356, 362, 405, 406, 407, 408, 409, 444, 457, 471, 483, 515, 516, 520, 523, 526, 527, 528, 536, 539, 544, 548, 619, 664, 744, 745, 808, 846, 848, 922, 950, 951, 952, 953, 956, 958, 964, 1011, 1012, 1013, 1014, 1015, 1053, 1066, 1082, 1092, 1127, 1128, 1132, 1135, 1138, 1139, 1140, 1148, 1151, 1156, 1160, 1202, 1241, 1316], "everybodi": [658, 681, 1235, 1258], "everyth": 928, "ew": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "ewm_mean": [808, 1316], "ewm_mean_bi": [808, 1316], "ewm_std": [808, 1316], "ewm_var": [808, 1316], "ewma": [466, 808, 1078, 1316], "exact": [160, 163, 165, 169, 226, 264, 320, 336, 479, 664, 691, 692, 693, 695, 696, 717, 808, 853, 922, 1241, 1270, 1272, 1273], "exactli": [124, 125, 128, 158, 159, 160, 161, 164, 165, 169, 320, 685, 686, 691, 692, 754, 922, 1223, 1262, 1263, 1268, 1269, 1316], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 77, 81, 89, 90, 94, 97, 98, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 144, 145, 146, 149, 150, 151, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 808, 820, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 926, 927, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1316, 1321, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1345, 1346], "exc_tb": 1344, "exc_typ": 1344, "exc_val": 1344, "exce": [209, 320], "excel": [36, 40, 134, 140, 320, 820], "excelread": 140, "excelspreadsheetengin": 140, "except": [0, 191, 206, 213, 226, 229, 249, 271, 320, 615, 671, 694, 756, 808, 820, 836, 853, 869, 922, 928, 991, 1099, 1124, 1198, 1248, 1271, 1288, 1297, 1316, 1343], "exclud": [165, 169, 211, 320, 390, 405, 408, 417, 496, 566, 716, 735, 804, 808, 848, 922, 928, 1022, 1105, 1316], "excluded_dtyp": [165, 166, 169], "exclus": [253, 320, 724, 730, 764, 765, 808], "execut": [39, 50, 59, 137, 138, 228, 267, 320, 412, 522, 721, 787, 808, 825, 829, 835, 858, 867, 881, 897, 922, 926, 1134, 1305, 1316, 1326, 1327, 1328, 1330, 1344, 1346], "execute_glob": 1344, "execute_opt": [137, 138], "exist": [1, 38, 39, 40, 51, 69, 98, 139, 147, 150, 154, 165, 191, 206, 245, 249, 284, 289, 294, 295, 320, 331, 373, 376, 379, 421, 443, 679, 680, 738, 808, 832, 836, 839, 869, 872, 889, 891, 892, 893, 922, 928, 1026, 1052, 1256, 1257, 1346], "existing_t": 1346, "existing_table_path": [39, 320], "exit": [50, 89, 174, 1331, 1344], "exp": [465, 466, 467, 468, 808, 1077, 1078, 1079, 1080, 1316, 1337], "exp_a": 1338, "expand": [135, 147, 149, 154, 471, 564, 568, 613, 707, 808, 926, 928, 1082, 1316], "expand_selector": 928, "expans": 704, "expect": [37, 41, 45, 46, 47, 48, 49, 67, 69, 72, 103, 111, 119, 135, 137, 145, 147, 149, 152, 153, 154, 159, 161, 320, 550, 559, 768, 808, 856, 858, 922], "expens": [135, 136, 145, 147, 149, 153, 154, 168, 170, 223, 230, 253, 254, 255, 284, 285, 320, 559, 808, 832, 834, 839, 872, 886, 891, 922, 1083, 1170, 1316, 1347], "experiment": [227, 282, 320, 854, 892, 922], "expiri": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "explain": [57, 58, 179, 228, 320, 829, 830, 922, 1343], "explainformat": [840, 922], "explicit": [40, 97, 137, 149, 163, 267, 289, 320, 449, 782, 881, 889, 922, 1058], "explicitli": [69, 97, 138, 163, 165, 174, 206, 225, 320, 614, 790, 808, 819, 852, 922, 1344], "explod": [320, 390, 477, 600, 616, 716, 808, 922, 926, 1199, 1316, 1334], "explor": [189, 320, 834, 922], "expon": [605, 808, 1189, 1316, 1338], "exponenti": [465, 466, 467, 468, 470, 605, 808, 1077, 1078, 1079, 1080, 1081, 1316, 1338], "export": [40, 41, 42, 177, 223, 224, 254, 255, 272, 274, 277, 320, 804, 928, 931, 1291, 1316], "expos": 820, "expr": [1, 51, 52, 53, 54, 55, 198, 200, 201, 225, 226, 227, 241, 245, 253, 258, 259, 277, 282, 294, 295, 320, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 803, 804, 808, 809, 810, 813, 814, 815, 816, 817, 841, 842, 843, 852, 853, 854, 868, 873, 874, 892, 893, 922, 926, 928, 1015, 1048, 1073, 1074, 1078, 1085, 1086, 1091, 1093, 1095, 1122, 1134, 1140, 1156, 1160, 1169, 1181, 1182, 1234, 1239, 1246, 1264, 1316, 1342], "expr1": [1336, 1344], "expr2": [1336, 1344], "expr_unique_subset": [241, 320], "express": [0, 8, 46, 47, 48, 49, 57, 58, 162, 165, 169, 181, 198, 200, 202, 210, 216, 225, 226, 230, 241, 245, 253, 258, 259, 263, 266, 277, 282, 283, 294, 295, 297, 299, 306, 320, 329, 331, 332, 333, 334, 335, 337, 338, 339, 340, 341, 342, 345, 346, 350, 351, 352, 353, 354, 357, 368, 373, 374, 375, 376, 377, 378, 379, 390, 392, 394, 395, 396, 399, 400, 401, 402, 403, 409, 410, 411, 412, 414, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 466, 469, 471, 472, 474, 475, 479, 481, 482, 484, 485, 486, 487, 493, 496, 497, 498, 499, 500, 501, 502, 510, 511, 515, 516, 518, 519, 522, 523, 529, 531, 549, 550, 556, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 575, 577, 579, 581, 583, 584, 586, 588, 590, 591, 594, 595, 597, 599, 600, 604, 605, 606, 607, 609, 613, 614, 615, 616, 618, 619, 641, 642, 643, 646, 648, 649, 651, 653, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 679, 680, 681, 683, 684, 685, 686, 694, 698, 708, 709, 712, 713, 716, 717, 718, 720, 721, 723, 724, 725, 726, 728, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 764, 765, 766, 767, 768, 769, 770, 772, 774, 777, 780, 782, 783, 784, 785, 786, 788, 790, 792, 794, 795, 796, 798, 799, 804, 807, 820, 824, 829, 830, 840, 841, 844, 847, 852, 853, 867, 873, 874, 877, 878, 880, 885, 892, 893, 894, 896, 898, 905, 922, 926, 928, 955, 1004, 1015, 1022, 1026, 1058, 1073, 1074, 1078, 1084, 1093, 1095, 1105, 1122, 1131, 1134, 1169, 1170, 1181, 1182, 1197, 1198, 1217, 1221, 1234, 1235, 1236, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1250, 1251, 1256, 1257, 1258, 1271, 1275, 1316, 1334, 1336, 1338, 1339, 1343], "exprmetanamespac": [563, 569], "ext": 137, "extend": [0, 125, 292, 320, 472, 808, 820, 926, 937, 1084, 1316], "extend_const": [808, 1316], "extens": [279, 320, 1298, 1316], "extern": [894, 922], "extra": [39, 135, 136, 139, 141, 143, 147, 149, 150, 151, 154, 199, 211, 320, 808, 848, 922, 926, 1083, 1316], "extract": [129, 179, 267, 320, 420, 423, 425, 428, 430, 431, 432, 433, 434, 435, 438, 440, 441, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 458, 459, 461, 604, 666, 667, 668, 673, 674, 683, 685, 808, 1025, 1028, 1029, 1030, 1033, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1054, 1056, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1070, 1243, 1244, 1245, 1250, 1251, 1260, 1337], "extract_mani": [670, 1247], "extract_numb": [604, 808], "extracted_nr": 666, "extrem": [472, 621, 808, 1084, 1203, 1316], "extrema": [645, 808, 1222, 1316], "f": [52, 136, 137, 202, 209, 224, 272, 278, 284, 288, 320, 329, 369, 378, 550, 645, 664, 693, 696, 738, 808, 844, 922, 928, 971, 1162, 1241, 1270, 1273, 1316, 1321, 1334], "f32": [1, 54, 182, 267, 276, 282, 320, 645, 787, 808, 826, 881, 922, 928, 1168, 1316, 1342], "f4": [278, 320], "f5ed2452": [40, 320], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 51, 53, 55, 59, 77, 123, 125, 144, 155, 162, 165, 182, 183, 184, 187, 189, 190, 191, 193, 195, 200, 201, 204, 208, 209, 210, 211, 216, 217, 225, 226, 232, 233, 234, 235, 239, 245, 246, 247, 265, 266, 268, 270, 282, 291, 294, 299, 302, 304, 307, 308, 309, 310, 312, 313, 320, 328, 331, 337, 338, 339, 340, 341, 342, 360, 366, 371, 378, 391, 397, 398, 400, 401, 402, 410, 411, 415, 416, 445, 462, 463, 464, 465, 466, 467, 468, 469, 470, 473, 474, 478, 479, 484, 486, 494, 495, 503, 504, 505, 506, 508, 510, 522, 533, 534, 546, 552, 553, 554, 555, 557, 560, 561, 562, 578, 581, 583, 592, 593, 594, 595, 601, 605, 607, 608, 609, 610, 614, 615, 621, 622, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 647, 648, 649, 650, 654, 655, 708, 712, 713, 717, 722, 731, 732, 736, 738, 740, 742, 755, 756, 770, 773, 774, 775, 787, 789, 797, 804, 808, 826, 827, 834, 836, 837, 842, 843, 847, 848, 851, 852, 853, 860, 861, 868, 880, 882, 890, 892, 894, 898, 901, 903, 906, 907, 908, 909, 911, 912, 922, 928, 939, 940, 941, 942, 943, 944, 962, 968, 973, 979, 1000, 1001, 1006, 1007, 1008, 1016, 1017, 1020, 1021, 1054, 1077, 1078, 1079, 1080, 1081, 1085, 1090, 1100, 1103, 1104, 1134, 1145, 1146, 1158, 1164, 1165, 1166, 1167, 1186, 1189, 1191, 1193, 1198, 1203, 1205, 1206, 1208, 1209, 1210, 1212, 1213, 1214, 1225, 1226, 1227, 1231, 1289, 1290, 1304, 1316, 1325, 1333, 1334, 1338, 1341, 1344, 1347], "f_string": 759, "fa1e": [698, 1275], "face": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "facil": 137, "facilit": [185, 320], "factor": [465, 467, 468, 714, 808, 1077, 1079, 1080, 1299, 1316], "fail": [37, 38, 39, 41, 45, 46, 47, 48, 49, 123, 139, 141, 145, 147, 149, 150, 152, 153, 154, 178, 278, 285, 320, 346, 447, 550, 693, 695, 696, 700, 808, 886, 922, 1170, 1270, 1272, 1273, 1277, 1297, 1316, 1342], "fall": [154, 410, 607, 808, 829, 897, 922, 1016, 1191, 1316, 1333], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 123, 124, 125, 127, 128, 129, 135, 136, 137, 139, 140, 141, 143, 145, 146, 147, 149, 150, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 178, 181, 182, 183, 184, 189, 196, 204, 208, 209, 210, 211, 215, 216, 218, 219, 220, 223, 225, 226, 228, 233, 234, 240, 241, 243, 245, 246, 253, 254, 255, 256, 258, 261, 264, 266, 267, 270, 273, 275, 278, 279, 283, 284, 285, 289, 290, 292, 294, 302, 304, 307, 308, 310, 313, 320, 332, 333, 334, 345, 348, 349, 352, 356, 357, 365, 370, 373, 376, 379, 390, 391, 392, 396, 404, 405, 406, 407, 408, 409, 410, 417, 429, 445, 462, 463, 464, 465, 467, 468, 486, 487, 490, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 513, 514, 518, 522, 525, 527, 529, 538, 545, 550, 551, 557, 558, 559, 563, 565, 566, 567, 569, 571, 574, 575, 594, 595, 597, 599, 602, 603, 607, 610, 621, 622, 624, 626, 628, 630, 632, 633, 635, 637, 641, 643, 645, 650, 652, 653, 656, 657, 658, 659, 662, 668, 669, 670, 672, 673, 679, 680, 681, 684, 685, 687, 693, 695, 696, 698, 716, 718, 721, 724, 725, 726, 727, 728, 730, 733, 734, 735, 739, 740, 743, 744, 749, 750, 752, 753, 764, 765, 768, 774, 780, 783, 786, 787, 790, 792, 795, 796, 798, 799, 808, 824, 826, 827, 828, 829, 830, 834, 840, 847, 848, 852, 853, 856, 858, 867, 873, 876, 878, 880, 881, 885, 886, 889, 892, 897, 901, 903, 906, 907, 909, 912, 922, 926, 927, 928, 935, 936, 947, 950, 951, 954, 958, 959, 967, 972, 974, 975, 977, 980, 991, 992, 994, 997, 999, 1002, 1003, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1022, 1034, 1054, 1074, 1075, 1077, 1079, 1080, 1087, 1089, 1094, 1096, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1125, 1126, 1130, 1134, 1137, 1139, 1141, 1150, 1157, 1163, 1176, 1182, 1184, 1187, 1188, 1191, 1193, 1194, 1195, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1219, 1223, 1228, 1230, 1233, 1234, 1235, 1236, 1239, 1245, 1246, 1247, 1249, 1250, 1256, 1257, 1258, 1261, 1262, 1264, 1270, 1272, 1273, 1275, 1292, 1297, 1298, 1302, 1305, 1307, 1316, 1326, 1328, 1334, 1339, 1344], "far": [40, 320], "fashion": [225, 320, 840, 867, 878, 922], "fast": [45, 47, 49, 168, 170, 320, 472, 643, 808, 922, 926, 1084, 1219, 1316, 1347], "fast_executemani": [38, 320], "faster": [46, 47, 48, 49, 57, 58, 137, 140, 199, 278, 288, 320, 559, 719, 808, 829, 830, 840, 867, 878, 922, 1083, 1170, 1316], "fastexcel": [140, 157], "favor": [38, 320], "fay": 132, "feat1": [277, 282, 320], "feat2": [277, 282, 320], "feather": [41, 141, 152, 320, 820], "featur": [1, 45, 56, 67, 69, 72, 277, 282, 320], "feature_0": [894, 922], "feature_0_train": [894, 922], "feature_1": [894, 922], "feature_nam": [282, 320], "feb": [157, 1339], "februari": 1339, "fed": 689, "feel": [658, 681, 1235, 1258], "fetch": [131, 829, 922], "fetch_california_h": [282, 320], "few": [209, 320], "fewer": [671, 694, 922, 1248, 1271], "ff": 1333, "ff00": [698, 1275], "fff": 1, "ffff00": [374, 375, 660, 975, 976, 1237], "ffffff": [40, 320], "ffi": [197, 320, 1076, 1316], "fgg": 928, "fghi": 1339, "fh": 136, "fiction": 1325, "field": [36, 37, 39, 46, 81, 115, 118, 125, 286, 320, 369, 550, 558, 559, 585, 587, 589, 618, 666, 667, 673, 685, 686, 706, 707, 708, 714, 721, 744, 745, 769, 790, 808, 887, 922, 971, 1162, 1170, 1201, 1244, 1262, 1263, 1284, 1286, 1299, 1316, 1340], "field_0": [369, 550, 971, 1162], "field_1": [369, 550, 971, 1162], "field_2": [971, 1162], "field_n": [369, 550, 971, 1162], "field_nam": [559, 808, 1170, 1316], "fiftyf": [492, 808], "figsiz": [574, 867, 878, 922], "figur": [574, 640, 808, 878, 922, 1214, 1316], "file": [2, 3, 5, 6, 32, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 133, 134, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 190, 199, 260, 320, 412, 481, 573, 577, 808, 835, 875, 922, 926, 1083, 1316], "file_cache_ttl": [145, 149, 152, 153], "filenam": 141, "filesourc": [140, 146, 147, 154], "filesystem": [39, 139, 150, 151, 320], "fill": [51, 59, 183, 200, 201, 263, 288, 320, 324, 372, 405, 408, 473, 474, 480, 494, 495, 622, 624, 626, 628, 630, 633, 635, 637, 644, 759, 780, 783, 799, 808, 842, 843, 877, 894, 922, 1085, 1086, 1103, 1104, 1183, 1204, 1205, 1207, 1210, 1211, 1212, 1221, 1316], "fill_char": [677, 678, 1254, 1255], "fill_nan": [201, 320, 474, 808, 843, 922, 1086, 1316], "fill_nul": [51, 200, 320, 473, 808, 842, 894, 922, 1085, 1316], "fill_valu": [263, 288, 320, 644, 808, 877, 922, 1221, 1316], "fillnullstrategi": [201, 320, 474, 808, 843, 922, 1086, 1316], "film": 1325, "filter": [1, 46, 47, 48, 49, 52, 57, 58, 149, 150, 154, 155, 193, 194, 218, 219, 220, 245, 306, 320, 392, 396, 570, 572, 662, 687, 723, 748, 751, 758, 786, 787, 798, 808, 829, 830, 837, 838, 840, 850, 867, 878, 881, 905, 922, 928, 1218, 1316, 1332], "final": [13, 40, 51, 154, 226, 228, 320, 465, 467, 468, 808, 834, 853, 922, 926, 1077, 1079, 1080, 1316, 1345], "find": [59, 207, 320, 492, 642, 657, 658, 670, 808, 1102, 1217, 1235, 1247, 1256, 1316], "find_pat": 669, "fine": [829, 919, 922], "finish": [199, 320, 1083, 1316], "finit": [498, 717, 740, 808, 1108, 1316], "first": [45, 51, 135, 136, 140, 141, 143, 146, 147, 149, 154, 158, 159, 160, 161, 179, 209, 211, 213, 225, 226, 229, 230, 240, 244, 245, 252, 271, 275, 276, 284, 285, 290, 297, 303, 320, 345, 347, 356, 409, 413, 437, 439, 444, 460, 479, 489, 492, 499, 512, 520, 522, 527, 528, 550, 558, 559, 571, 580, 604, 605, 620, 642, 653, 657, 664, 665, 669, 671, 673, 674, 679, 680, 694, 701, 736, 737, 744, 758, 762, 798, 804, 808, 848, 849, 852, 853, 857, 866, 871, 886, 894, 896, 902, 922, 928, 947, 958, 1015, 1017, 1018, 1046, 1048, 1053, 1069, 1099, 1102, 1109, 1124, 1132, 1134, 1139, 1140, 1162, 1170, 1217, 1230, 1241, 1242, 1244, 1246, 1248, 1250, 1251, 1256, 1257, 1271, 1278, 1288, 1292, 1294, 1297, 1316, 1336, 1337, 1339, 1345, 1347], "first_column": [40, 320], "first_non_nul": [550, 1162], "first_part": [685, 686, 1262, 1263], "fisher": [508, 650, 808, 1120, 1228, 1316], "fit": [132, 223, 264, 288, 320, 645, 783, 808, 1222, 1223, 1316], "five": [281, 320, 1347], "fix": [10, 60, 69, 163, 460, 754, 1069], "flag": [56, 139, 150, 162, 278, 320, 643, 657, 665, 666, 669, 679, 680, 808, 840, 858, 922, 928, 1219, 1234, 1242, 1243, 1246, 1256, 1257, 1297, 1316, 1339], "flat": [132, 255, 320, 523, 616, 808, 1135, 1199, 1316], "flatten": 808, "flavour": [40, 137, 320], "flight": 137, "flight_sql": 137, "flightsql": 137, "float": [10, 11, 37, 40, 46, 70, 71, 135, 136, 149, 155, 158, 159, 160, 161, 162, 165, 169, 178, 189, 193, 197, 200, 226, 247, 256, 277, 278, 312, 320, 352, 398, 410, 415, 416, 445, 462, 463, 464, 465, 467, 468, 473, 478, 479, 484, 486, 494, 498, 501, 503, 504, 505, 506, 510, 518, 538, 553, 557, 560, 574, 578, 592, 593, 594, 595, 605, 607, 608, 621, 622, 624, 626, 628, 630, 631, 633, 635, 637, 639, 641, 647, 717, 781, 783, 808, 834, 837, 842, 853, 868, 878, 911, 922, 928, 954, 991, 1001, 1016, 1017, 1019, 1020, 1021, 1054, 1072, 1076, 1077, 1079, 1080, 1085, 1090, 1100, 1120, 1130, 1150, 1165, 1179, 1180, 1189, 1190, 1191, 1192, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1215, 1218, 1225, 1228, 1232, 1287, 1297, 1306, 1316, 1344, 1347], "float16": [282, 320], "float32": [1, 10, 37, 46, 54, 182, 204, 276, 277, 278, 282, 320, 466, 808, 826, 922, 928, 1078, 1107, 1168, 1295, 1297, 1300, 1316], "float4": [267, 320, 787, 881, 922, 1342], "float64": [10, 37, 40, 46, 125, 135, 144, 162, 165, 185, 195, 197, 204, 257, 282, 294, 320, 337, 338, 339, 340, 341, 342, 378, 391, 400, 401, 402, 411, 445, 466, 469, 503, 504, 609, 648, 649, 712, 713, 756, 770, 780, 783, 799, 804, 808, 831, 839, 872, 892, 922, 927, 928, 1054, 1078, 1298, 1304, 1316], "float_list": 77, "float_precis": [9, 10, 27, 37, 40, 46, 320, 922], "float_scientif": [37, 46, 320, 922], "floatfmt": 11, "floor": [53, 479, 808, 1316, 1337], "floor_a": 1338, "floordiv": [717, 808], "fmt": [11, 226, 320, 493, 759, 808, 850, 853, 922], "fmt_number": [320, 324], "fmt_str_length": [12, 749, 750, 752, 753], "fmt_table_cell_list_len": 13, "fmt_titl": [40, 320], "fn": [744, 745, 758, 782], "foggi": [679, 680, 1256, 1257], "fold": [320, 571, 736, 744, 745, 782], "folder": 155, "follow": [40, 45, 56, 135, 136, 137, 139, 140, 146, 149, 150, 151, 211, 226, 230, 244, 252, 278, 290, 320, 439, 444, 457, 466, 558, 604, 605, 610, 620, 623, 625, 627, 629, 631, 632, 634, 636, 638, 647, 706, 717, 732, 749, 750, 752, 753, 770, 795, 796, 798, 800, 801, 803, 808, 809, 810, 813, 815, 816, 817, 848, 853, 866, 871, 922, 928, 1048, 1053, 1066, 1078, 1189, 1193, 1216, 1218, 1225, 1297, 1308, 1310, 1312, 1316, 1317, 1322, 1323, 1324, 1342, 1347], "font": [40, 320], "font_color": [40, 320], "font_siz": [40, 320], "foo": [35, 37, 39, 41, 42, 43, 44, 45, 132, 144, 145, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 199, 202, 204, 206, 207, 208, 212, 213, 214, 215, 216, 217, 219, 225, 229, 230, 231, 232, 233, 234, 235, 238, 239, 242, 245, 247, 249, 250, 253, 256, 257, 258, 260, 262, 265, 268, 269, 270, 271, 272, 274, 275, 276, 278, 279, 280, 284, 285, 286, 291, 292, 293, 298, 320, 393, 410, 412, 439, 483, 489, 493, 512, 563, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 607, 616, 656, 659, 661, 664, 666, 667, 672, 682, 684, 686, 688, 689, 690, 691, 692, 699, 702, 711, 729, 740, 741, 742, 757, 761, 762, 763, 766, 767, 771, 773, 775, 776, 778, 779, 781, 786, 789, 793, 797, 798, 804, 808, 826, 831, 832, 836, 837, 838, 839, 844, 850, 851, 852, 865, 869, 872, 873, 886, 887, 891, 894, 922, 927, 928, 993, 1016, 1048, 1141, 1189, 1191, 1199, 1236, 1238, 1241, 1243, 1244, 1259, 1263, 1268, 1269, 1276, 1279, 1316, 1330, 1332, 1333, 1334, 1336, 1339, 1342], "foo1": 1339, "foo11": [204, 320], "foo_": [568, 684, 759], "foo_1": [275, 320], "foo_2": [275, 320], "foo_3_4": 1339, "foo_a": [245, 320], "foo_a_bar_1": 759, "foo_at_1": 1334, "foo_b": [245, 320], "foo_b_bar_2": 759, "foo_bar": [563, 569, 684, 768, 1330], "foo_bar2": [563, 569], "foo_bar_baz": 684, "foo_c_bar_3": 759, "foo_low": [699, 1339], "foo_mean": 1334, "foo_q25": 1333, "foo_q50": 1333, "foo_q75": 1333, "foo_std": 1333, "foo_strip": 688, "foo_strip_end": 689, "foo_strip_start": 690, "foo_sum": [1333, 1334], "foo_uniqu": 1334, "foo_upp": [702, 1339], "foo_var": 1333, "foobar": [691, 692, 1268, 1269, 1339], "foobarbar": [692, 1269], "foofoobar": [691, 1268], "foral": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "forc": [226, 230, 278, 306, 320, 550, 852, 853, 905, 922, 1170, 1297, 1316], "force_parallel": [226, 320, 852, 853, 922], "form": [37, 46, 122, 124, 125, 126, 128, 144, 145, 153, 223, 254, 288, 320, 449, 601, 701, 808, 922, 1058, 1186, 1278, 1316, 1339], "format": [7, 11, 15, 16, 20, 36, 37, 40, 41, 42, 45, 46, 93, 133, 135, 136, 137, 140, 141, 143, 146, 149, 155, 177, 190, 198, 209, 223, 236, 245, 254, 255, 260, 274, 287, 318, 320, 324, 412, 444, 446, 449, 573, 574, 575, 693, 695, 696, 700, 754, 808, 835, 840, 841, 862, 875, 888, 922, 931, 1055, 1058, 1270, 1272, 1273, 1277, 1315, 1339, 1340], "formul": [193, 320, 837, 838, 922], "formula": [40, 320, 462, 808, 1072, 1316], "fortran": [277, 278, 320], "forward": [201, 226, 263, 320, 364, 417, 436, 474, 480, 543, 644, 808, 843, 853, 877, 922, 966, 1022, 1045, 1086, 1155, 1221, 1316], "forward_fil": [290, 320, 372, 405, 408, 644, 808], "found": [20, 37, 40, 46, 94, 115, 118, 125, 129, 147, 154, 195, 267, 320, 492, 642, 669, 674, 691, 692, 693, 696, 808, 881, 922, 1102, 1217, 1246, 1251, 1268, 1269, 1270, 1273, 1316, 1328, 1344], "four": [281, 320, 1344], "fourth": [508, 808, 1120, 1316], "frac": [465, 466, 467, 468, 650, 808, 1077, 1078, 1079, 1080, 1228, 1316], "fraction": [37, 46, 158, 159, 160, 161, 256, 320, 445, 538, 601, 641, 693, 696, 808, 922, 1054, 1150, 1186, 1215, 1270, 1273, 1316], "fragment": 1344, "frame": [37, 38, 40, 46, 51, 58, 59, 125, 136, 140, 146, 158, 159, 182, 183, 189, 223, 224, 228, 230, 237, 241, 244, 253, 254, 255, 267, 282, 288, 289, 320, 449, 787, 826, 827, 834, 863, 866, 881, 889, 922, 928, 1003, 1058, 1316, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1343, 1347], "frame_data": [1327, 1330], "frameinittyp": [320, 922], "frametyp": [51, 1344], "framework": [245, 287, 320, 888, 922], "freedom": [268, 291, 320, 546, 552, 633, 634, 637, 638, 655, 722, 742, 784, 785, 789, 797, 808, 882, 890, 922, 1210, 1212, 1232, 1306, 1316], "freeli": [787, 881, 922, 928], "freez": [40, 320], "freeze_pan": [40, 320], "frequenc": [290, 320, 721, 808, 1305, 1316], "frequent": [1216, 1218, 1316], "fri": [320, 323], "fridai": [211, 320, 417, 446, 735, 848, 922, 1022, 1055, 1058], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 36, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 69, 81, 93, 97, 113, 117, 122, 123, 124, 125, 126, 127, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 179, 182, 189, 190, 191, 197, 199, 202, 203, 209, 211, 223, 224, 225, 226, 227, 228, 236, 245, 249, 252, 253, 255, 256, 258, 259, 267, 275, 282, 284, 285, 287, 288, 289, 290, 296, 320, 323, 324, 369, 378, 410, 411, 412, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 464, 466, 469, 479, 481, 494, 508, 526, 538, 550, 559, 567, 592, 593, 595, 600, 601, 604, 607, 609, 620, 621, 623, 625, 627, 629, 631, 634, 636, 638, 641, 653, 665, 666, 671, 673, 674, 683, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 719, 731, 732, 735, 736, 748, 749, 750, 751, 752, 753, 754, 768, 783, 787, 794, 795, 796, 804, 807, 808, 826, 834, 835, 836, 844, 848, 852, 853, 854, 862, 869, 871, 873, 874, 881, 886, 888, 889, 894, 895, 922, 927, 928, 971, 979, 1016, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1074, 1076, 1078, 1083, 1120, 1138, 1150, 1162, 1179, 1180, 1182, 1183, 1186, 1191, 1203, 1215, 1242, 1243, 1248, 1250, 1260, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1277, 1292, 1307, 1316, 1325, 1326, 1327, 1328, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347], "from_arrai": 787, "from_arrow": 123, "from_json": 808, "from_panda": 123, "from_repr": [276, 320, 1294, 1316], "fromkei": [52, 54], "front": [211, 320, 848, 922], "fruit": [273, 320, 392, 396, 617, 662, 687, 694, 808, 992, 997, 1239, 1264, 1271], "fruits_revers": [617, 808], "fsspec": [135, 136, 141, 143, 150, 151, 157], "fsspecfileio": 151, "full": [11, 45, 49, 51, 59, 66, 93, 125, 128, 135, 136, 137, 139, 144, 145, 147, 149, 150, 151, 153, 154, 155, 225, 289, 320, 671, 673, 679, 680, 693, 694, 695, 696, 700, 749, 750, 852, 858, 889, 922, 928, 1248, 1250, 1256, 1257, 1270, 1271, 1272, 1273, 1277, 1316, 1332, 1347], "full_sent": 739, "fulli": [167, 244, 256, 278, 320], "funcnam": [40, 320], "function": [0, 31, 32, 33, 34, 37, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 67, 69, 72, 89, 90, 120, 123, 127, 129, 132, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 172, 174, 176, 178, 181, 187, 190, 197, 204, 227, 230, 236, 244, 245, 249, 267, 277, 278, 279, 282, 283, 284, 287, 288, 289, 306, 320, 323, 324, 332, 369, 389, 390, 409, 410, 412, 444, 465, 467, 468, 490, 550, 558, 559, 584, 585, 600, 604, 607, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 647, 650, 670, 714, 715, 716, 725, 729, 737, 741, 743, 744, 745, 757, 758, 760, 762, 763, 766, 769, 770, 773, 775, 778, 780, 782, 784, 785, 789, 793, 797, 799, 804, 808, 820, 824, 830, 835, 854, 858, 862, 866, 869, 881, 885, 888, 889, 896, 905, 922, 926, 930, 971, 990, 999, 1015, 1016, 1053, 1076, 1077, 1079, 1080, 1100, 1162, 1170, 1191, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1216, 1218, 1223, 1225, 1228, 1247, 1295, 1298, 1300, 1301, 1316, 1321, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1342, 1343, 1344, 1345, 1346, 1347], "function_nam": 926, "further": 804, "futur": [58, 178, 189, 225, 261, 320, 830, 834, 852, 876, 922], "g": [37, 46, 132, 135, 139, 141, 143, 150, 155, 167, 178, 190, 222, 278, 288, 320, 329, 412, 466, 469, 559, 645, 756, 808, 835, 869, 922, 1078, 1316, 1347], "g1": [475, 723, 808], "g2": [475, 723, 808], "g_1": [650, 808, 1228, 1316], "gag": 26, "gamma": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "gantt": [867, 922], "gather": [136, 205, 320, 345, 483, 526, 733, 808, 846, 922, 947, 1092, 1138, 1316], "gather_everi": [320, 808, 922, 1316], "gb": [197, 320, 378, 1076, 1316], "gbp": 1347, "gc": [39, 139, 150, 151, 320], "gca": 26, "gcaacgcatata": 26, "gcp": [34, 37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 151, 152, 153, 154, 320, 922], "gdp": [226, 320, 853, 922], "gdp2": [226, 320, 853, 922], "gdp_date": [226, 320, 853, 922], "ge": [808, 1316], "gener": [1, 132, 137, 138, 156, 162, 163, 164, 165, 166, 167, 169, 178, 185, 187, 245, 256, 275, 278, 284, 320, 538, 641, 646, 730, 749, 752, 764, 765, 767, 783, 795, 796, 808, 922, 991, 1150, 1215, 1224, 1292, 1316, 1347], "geq": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "germani": [226, 320, 853, 922], "get": [51, 58, 69, 142, 148, 155, 179, 181, 185, 186, 195, 203, 206, 208, 211, 213, 214, 218, 220, 221, 229, 232, 239, 240, 245, 252, 253, 257, 262, 265, 271, 279, 283, 293, 303, 314, 320, 330, 343, 344, 345, 347, 355, 358, 370, 378, 390, 393, 405, 406, 407, 408, 417, 427, 476, 482, 489, 492, 507, 509, 512, 524, 530, 551, 560, 561, 562, 570, 572, 578, 592, 593, 602, 603, 608, 619, 620, 651, 655, 664, 710, 711, 715, 716, 718, 722, 733, 735, 757, 762, 766, 770, 771, 772, 773, 775, 776, 777, 779, 789, 793, 797, 808, 824, 829, 830, 832, 839, 845, 848, 849, 855, 857, 871, 872, 879, 884, 885, 891, 902, 913, 922, 926, 927, 932, 945, 946, 947, 948, 949, 957, 960, 972, 979, 993, 1002, 1011, 1012, 1013, 1014, 1022, 1032, 1071, 1088, 1089, 1094, 1099, 1102, 1105, 1106, 1118, 1121, 1124, 1136, 1142, 1163, 1171, 1173, 1174, 1176, 1178, 1179, 1180, 1187, 1188, 1192, 1202, 1229, 1232, 1241, 1288, 1292, 1298, 1302, 1306, 1316], "get_chunk": 1316, "get_column": [178, 280, 320], "get_column_index": 320, "get_token": 33, "get_worksheet_by_nam": [40, 320], "gevent": [58, 157, 830, 922], "gh": 680, "gh45": 680, "gh45ij67kl": 680, "ghi": [329, 666, 808, 928, 1243], "gil": [559, 808], "git": 56, "github": [138, 320], "give": [145, 152, 153, 226, 236, 285, 287, 320, 427, 479, 508, 613, 717, 721, 808, 820, 853, 862, 886, 888, 922, 1032, 1120, 1305, 1316, 1343], "given": [40, 51, 99, 104, 121, 122, 124, 125, 126, 128, 135, 136, 137, 138, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 160, 161, 162, 163, 165, 167, 168, 169, 170, 176, 197, 198, 200, 211, 221, 230, 243, 244, 253, 254, 255, 263, 266, 282, 289, 320, 352, 364, 369, 378, 390, 399, 418, 422, 446, 448, 449, 462, 466, 490, 496, 518, 543, 550, 553, 559, 600, 604, 610, 613, 614, 616, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 642, 644, 666, 667, 677, 678, 693, 696, 703, 706, 716, 756, 757, 766, 769, 770, 783, 784, 785, 808, 841, 848, 858, 866, 877, 880, 889, 905, 922, 927, 928, 930, 954, 966, 971, 979, 1004, 1023, 1027, 1055, 1057, 1058, 1072, 1076, 1078, 1100, 1105, 1119, 1130, 1155, 1162, 1165, 1168, 1170, 1183, 1189, 1193, 1199, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1217, 1221, 1243, 1244, 1254, 1255, 1270, 1273, 1280, 1304, 1307, 1316, 1325, 1327, 1332, 1334, 1335, 1338, 1339, 1344, 1346, 1347], "glimps": [189, 213, 320], "glob": [135, 136, 140, 147, 149, 152, 153, 154], "global": [50, 89, 90, 140, 156, 165, 173, 267, 320, 614, 615, 787, 808, 881, 922, 994, 998, 1197, 1198, 1316, 1326, 1328, 1343], "gmt": [422, 426, 443, 1027, 1031, 1052], "go": [12, 135, 136, 149, 392, 662, 992, 1239], "godfath": 1325, "goe": 12, "gonfruit": 1271, "good": [45, 47, 49, 223, 320, 922, 1338], "goodby": 1, "googl": [34, 139, 150, 151], "gpu": [277, 320, 829, 897, 919, 922, 1295, 1316], "gpu_devic": [277, 320], "gpudevic": [277, 320], "gpuengin": [829, 922], "grade": [1120, 1316], "grain": [829, 919, 922], "granular": 1344, "grape": 1339, "graph": [57, 137, 228, 320, 574, 829, 850, 894, 922], "graphviz": [228, 320, 574, 878, 922], "great": [320, 324], "great_tabl": [320, 324], "greater": [183, 226, 320, 484, 486, 496, 650, 677, 678, 686, 703, 808, 853, 922, 1105, 1228, 1254, 1255, 1263, 1280, 1316], "greatest": [1333, 1337], "greatli": [141, 152], "green": [50, 89, 90, 306, 721, 808, 905, 1305, 1316], "greenlet": [58, 830, 922], "greet": 1, "grid": [494, 808], "grid_point": [494, 808], "gridlin": [40, 320], "gross": 1325, "group": [9, 27, 45, 49, 136, 154, 182, 210, 211, 224, 226, 241, 243, 245, 252, 255, 288, 290, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 330, 390, 409, 471, 477, 482, 485, 522, 558, 559, 570, 572, 600, 610, 619, 620, 652, 653, 657, 665, 666, 667, 669, 679, 680, 716, 721, 770, 808, 826, 847, 848, 853, 871, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 926, 928, 1015, 1134, 1202, 1234, 1242, 1243, 1244, 1246, 1256, 1257, 1305, 1316, 1325, 1333, 1343, 1344], "group_bi": [211, 241, 245, 252, 290, 319, 320, 330, 380, 385, 388, 390, 475, 477, 482, 485, 558, 559, 600, 652, 653, 716, 723, 749, 752, 770, 808, 829, 830, 840, 848, 867, 871, 878, 920, 922, 928], "group_by_dynam": [252, 320, 871, 922], "group_by_partit": [867, 922], "group_col": [475, 723, 808], "group_df": [306, 905], "group_dtyp": [600, 808], "group_index": [665, 1242], "group_to_row": [600, 808], "groupbi": [210, 320, 559, 770, 808], "grouper": [380, 385, 388, 808], "grow": [292, 320], "grown": [215, 320], "gt": [320, 324, 808, 1316], "gte": [475, 723, 808], "guarante": [45, 49, 135, 136, 181, 189, 212, 283, 285, 320, 389, 390, 488, 714, 715, 716, 808, 824, 834, 885, 886, 922, 990, 1098, 1299, 1301, 1316], "guid": [808, 926, 1347], "gzip": [45, 49, 320, 922], "h": [288, 320, 329, 446, 449, 645, 679, 680, 693, 696, 700, 808, 1256, 1257, 1270, 1273, 1277, 1339, 1340], "ha": [39, 40, 51, 58, 127, 137, 149, 172, 178, 290, 296, 301, 320, 389, 390, 409, 481, 558, 571, 577, 671, 694, 704, 715, 716, 740, 757, 766, 804, 808, 830, 895, 900, 905, 922, 990, 1003, 1015, 1017, 1248, 1271, 1301, 1316], "half": [282, 320, 444, 465, 466, 467, 468, 808, 1053, 1077, 1078, 1079, 1080, 1316], "half_lif": [465, 466, 467, 468, 808, 1077, 1078, 1079, 1080, 1316], "ham": [35, 37, 39, 41, 42, 45, 182, 185, 186, 187, 191, 192, 193, 194, 195, 196, 202, 207, 212, 213, 215, 225, 229, 231, 233, 235, 238, 242, 247, 249, 250, 253, 256, 257, 258, 265, 268, 269, 271, 275, 276, 278, 279, 280, 285, 291, 292, 320, 393, 574, 575, 804, 826, 831, 832, 836, 837, 838, 839, 844, 852, 865, 869, 872, 873, 886, 894, 922, 993, 1332, 1333], "ham_a": [275, 320], "ham_b": [275, 320], "ham_right": [225, 320, 852, 922], "hamburg": 804, "hand": [40, 135, 136, 149, 320, 539, 540, 541, 542, 1151, 1152, 1153, 1154], "handi": [417, 735, 1022], "handl": [39, 57, 58, 59, 96, 129, 135, 136, 149, 155, 202, 206, 320, 413, 520, 664, 703, 808, 829, 830, 844, 922, 926, 1018, 1132, 1241, 1280, 1316], "handler": [133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 320, 412, 808, 835, 922], "happen": [137, 422, 607, 808, 1027, 1191, 1316], "hard": [149, 858, 922], "harder": [211, 320, 848, 922], "hardwar": 1347, "has_head": [135, 136, 140, 146, 149], "has_nul": [808, 1097, 1316], "has_prefix": [396, 687], "has_suffix": [392, 662], "has_two": 1334, "has_valid": 1316, "hash": [212, 320, 808, 1316], "hash_row": 320, "hat": [679, 680, 1256, 1257], "have": [5, 14, 30, 40, 50, 51, 66, 90, 123, 133, 135, 136, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 179, 190, 199, 223, 225, 226, 245, 248, 252, 254, 255, 274, 282, 297, 320, 409, 412, 465, 467, 468, 559, 571, 610, 614, 615, 620, 667, 681, 737, 808, 835, 852, 853, 862, 871, 895, 896, 922, 926, 928, 1015, 1017, 1077, 1079, 1080, 1083, 1193, 1197, 1198, 1256, 1258, 1316, 1343, 1345, 1347], "haystack": [666, 1243], "he": 689, "head": [69, 149, 209, 229, 271, 320, 335, 512, 808, 857, 922, 1124, 1288, 1316], "header": [37, 40, 45, 46, 49, 129, 135, 136, 140, 146, 149, 195, 284, 320, 922], "header_format": [40, 320], "header_nam": [284, 320], "headerless": 149, "heap": [197, 320, 808, 926, 1076, 1316], "heatmap": [40, 320], "heavili": 154, "height": [40, 132, 165, 194, 320, 323, 1316, 1321], "hell": [688, 1265], "hello": [1, 20, 688, 689, 690, 928, 1141, 1265, 1266, 1267, 1327, 1330], "hello_": 759, "hello_data": 1330, "hello_world": 1330, "help": [40, 158, 159, 160, 161, 320, 922], "helper": [320, 324, 804], "henc": [679, 1257], "here": [37, 39, 40, 41, 45, 46, 47, 48, 49, 122, 124, 125, 126, 128, 137, 138, 139, 144, 145, 147, 149, 150, 151, 152, 153, 154, 163, 165, 169, 179, 245, 320, 417, 558, 559, 574, 667, 674, 735, 808, 878, 922, 928, 1022, 1251], "hex": [374, 375, 660, 661, 698, 975, 976, 1237, 1238, 1275], "hexadecim": [975, 976], "hf": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "hf_token": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "hi": [1, 1339], "hidden": [40, 320], "hidden_column": [40, 320], "hide": [21, 22, 23, 24], "hide_gridlin": [40, 320], "hide_password": 137, "high": [255, 320, 324, 607, 808, 820, 1191, 1316], "higher": [45, 49, 189, 247, 312, 320, 608, 630, 631, 781, 808, 834, 868, 911, 922, 1017, 1192, 1208, 1316], "highest": [320, 324, 610, 720, 740, 808, 922, 1193, 1316], "highli": [808, 926], "hippopotamu": [677, 678, 1254, 1255], "hist": [808, 1316, 1321], "histogram": [1316, 1321], "hit": [825, 922], "hive": [147, 152, 154], "hive_partit": [147, 152, 154], "hive_schema": [147, 152, 154], "hmm": 928, "hold": [264, 278, 320, 1297, 1316], "holidai": [417, 735, 1022], "home": [701, 1278], "horizont": [20, 59, 98, 204, 215, 232, 234, 239, 270, 288, 320, 726, 728, 737, 738, 739, 744, 745, 747, 755, 758, 772, 774, 777, 782, 792, 894, 922], "host": [56, 135, 141, 143, 154], "hour": [145, 149, 152, 153, 211, 226, 252, 290, 320, 431, 433, 434, 438, 439, 442, 444, 445, 449, 451, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 751, 752, 753, 754, 794, 795, 796, 808, 848, 853, 871, 922, 928, 1048, 1051, 1053, 1060, 1066, 1078, 1316, 1340], "hours_diff": 451, "hous": [282, 320], "how": [11, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 98, 138, 145, 147, 149, 152, 153, 154, 194, 202, 225, 226, 245, 288, 289, 320, 353, 413, 442, 443, 494, 519, 520, 600, 613, 632, 693, 696, 735, 751, 798, 808, 844, 852, 853, 889, 894, 922, 926, 955, 1018, 1051, 1052, 1131, 1132, 1209, 1270, 1273, 1316], "howev": [1, 125, 137, 147, 154, 174, 197, 230, 278, 320, 600, 808, 829, 922, 1076, 1316], "hstack": [98, 320], "html": [32, 40, 41, 42, 123, 137, 141, 143, 176, 177, 178, 187, 320, 930, 931], "http": [20, 32, 40, 41, 42, 69, 123, 137, 138, 141, 143, 176, 177, 178, 187, 320, 574, 665, 667, 878, 922, 930, 931, 1242, 1244], "httpmethod": 69, "hug": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "hut": [679, 680, 1256, 1257], "hvplot": [320, 323, 1316, 1321], "hyperbol": [338, 340, 342, 401, 649, 713, 808, 940, 942, 944, 1007, 1227, 1290, 1316], "hyperloglog": [180, 320, 336, 729, 808, 823, 922, 938, 1316], "hyphen": [656, 1233], "hypothesi": [163, 165, 168, 169, 1347], "i": [1, 12, 14, 17, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 65, 66, 67, 68, 69, 72, 82, 90, 94, 96, 97, 98, 99, 100, 101, 103, 104, 109, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 179, 180, 181, 182, 184, 185, 189, 190, 193, 194, 196, 197, 199, 202, 206, 210, 211, 212, 213, 216, 217, 221, 223, 224, 225, 226, 227, 228, 229, 230, 236, 237, 241, 243, 244, 245, 249, 250, 252, 253, 254, 255, 256, 259, 260, 261, 263, 265, 266, 267, 268, 271, 272, 277, 278, 279, 282, 283, 284, 285, 287, 288, 289, 290, 291, 295, 297, 298, 306, 320, 323, 324, 329, 332, 334, 335, 336, 346, 349, 356, 357, 364, 369, 377, 389, 390, 391, 394, 395, 409, 410, 412, 415, 416, 417, 418, 421, 429, 436, 437, 439, 444, 446, 449, 457, 465, 466, 467, 468, 471, 475, 479, 488, 490, 493, 496, 508, 514, 521, 522, 525, 527, 529, 538, 543, 544, 546, 550, 552, 555, 558, 559, 563, 565, 566, 567, 569, 570, 571, 573, 582, 600, 605, 607, 610, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 646, 647, 650, 651, 652, 653, 655, 656, 657, 658, 659, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 686, 688, 689, 690, 693, 694, 695, 696, 698, 700, 701, 703, 708, 715, 716, 721, 722, 725, 726, 727, 728, 729, 734, 735, 737, 738, 739, 741, 742, 743, 744, 745, 749, 750, 752, 753, 758, 762, 763, 764, 765, 767, 768, 770, 773, 775, 778, 780, 783, 784, 785, 786, 787, 789, 793, 795, 796, 797, 798, 799, 804, 808, 823, 824, 825, 828, 829, 830, 832, 834, 835, 837, 838, 839, 840, 844, 847, 848, 851, 852, 853, 854, 856, 858, 862, 863, 867, 869, 871, 872, 874, 875, 876, 877, 878, 879, 880, 881, 882, 885, 886, 888, 889, 890, 891, 893, 896, 897, 905, 915, 922, 926, 928, 935, 936, 937, 938, 951, 958, 959, 966, 971, 978, 990, 994, 995, 996, 999, 1004, 1005, 1015, 1016, 1017, 1020, 1021, 1022, 1023, 1026, 1034, 1048, 1053, 1055, 1058, 1066, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1087, 1088, 1098, 1099, 1100, 1102, 1105, 1107, 1117, 1119, 1120, 1121, 1124, 1126, 1133, 1134, 1137, 1139, 1141, 1150, 1155, 1156, 1162, 1170, 1189, 1191, 1193, 1195, 1197, 1198, 1199, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1218, 1219, 1221, 1224, 1225, 1228, 1229, 1232, 1233, 1234, 1235, 1236, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1260, 1263, 1265, 1266, 1267, 1270, 1271, 1272, 1273, 1275, 1277, 1278, 1280, 1288, 1291, 1295, 1297, 1298, 1300, 1301, 1305, 1306, 1316, 1321, 1325, 1326, 1331, 1335, 1336, 1339, 1342, 1344, 1345, 1347], "i0e0": 1347, "i16": [1, 54, 425, 440, 459, 645, 808, 928, 1049, 1294, 1316, 1347], "i32": [1, 54, 122, 125, 129, 162, 164, 165, 258, 267, 320, 355, 356, 358, 377, 391, 420, 428, 430, 431, 432, 433, 434, 438, 461, 645, 735, 798, 808, 873, 922, 927, 957, 958, 960, 978, 1025, 1035, 1039, 1040, 1041, 1047, 1070, 1168, 1316, 1336, 1340, 1347], "i64": [1, 10, 13, 16, 17, 21, 27, 52, 53, 54, 55, 59, 60, 77, 97, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 137, 144, 145, 149, 179, 181, 182, 183, 184, 186, 190, 191, 194, 195, 198, 199, 201, 202, 205, 206, 208, 209, 210, 211, 213, 215, 216, 218, 220, 222, 225, 226, 227, 229, 230, 231, 237, 238, 243, 244, 245, 246, 249, 250, 251, 252, 256, 258, 260, 263, 265, 266, 267, 269, 271, 273, 280, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 296, 297, 298, 299, 300, 302, 303, 304, 306, 307, 310, 313, 314, 320, 329, 331, 335, 345, 350, 351, 353, 354, 359, 361, 362, 363, 364, 365, 367, 370, 372, 380, 385, 388, 389, 390, 399, 405, 406, 407, 408, 409, 410, 413, 414, 427, 442, 448, 450, 451, 452, 453, 454, 455, 456, 466, 469, 471, 472, 474, 475, 476, 477, 479, 480, 482, 483, 485, 489, 491, 493, 494, 495, 496, 499, 500, 502, 503, 504, 505, 506, 509, 512, 515, 516, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 556, 558, 559, 579, 580, 581, 583, 584, 586, 588, 590, 591, 596, 600, 601, 604, 605, 606, 607, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 641, 643, 644, 645, 646, 651, 652, 653, 671, 679, 680, 694, 698, 703, 704, 706, 707, 708, 709, 710, 711, 715, 716, 717, 718, 720, 723, 730, 733, 736, 737, 738, 739, 744, 745, 746, 747, 748, 751, 754, 755, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 774, 776, 777, 779, 782, 786, 787, 788, 791, 792, 793, 794, 798, 804, 808, 824, 826, 827, 829, 830, 835, 836, 838, 841, 843, 844, 845, 846, 847, 848, 849, 852, 853, 854, 855, 857, 858, 859, 863, 864, 866, 867, 869, 870, 871, 873, 875, 877, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 892, 895, 896, 898, 899, 901, 902, 903, 905, 906, 909, 912, 913, 922, 928, 932, 933, 934, 937, 956, 961, 963, 965, 966, 967, 969, 972, 990, 1004, 1005, 1011, 1012, 1013, 1014, 1015, 1016, 1032, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1082, 1083, 1084, 1086, 1087, 1091, 1092, 1094, 1099, 1101, 1110, 1124, 1132, 1133, 1135, 1136, 1137, 1138, 1139, 1140, 1142, 1144, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1162, 1163, 1170, 1175, 1183, 1189, 1191, 1194, 1195, 1196, 1197, 1198, 1199, 1201, 1204, 1207, 1211, 1215, 1216, 1218, 1221, 1222, 1224, 1229, 1230, 1275, 1281, 1286, 1288, 1293, 1301, 1302, 1307, 1316, 1325, 1326, 1328, 1332, 1333, 1334, 1335, 1336, 1338, 1341, 1342, 1344, 1345, 1347], "i8": [368, 369, 425, 428, 431, 433, 434, 435, 438, 440, 441, 445, 458, 459, 549, 645, 780, 783, 799, 808, 970, 971, 1018, 1030, 1033, 1043, 1044, 1050, 1054, 1067, 1068, 1161, 1200, 1222, 1304, 1316, 1340], "i_bitand_j": 1335, "i_bitand_op_j": 1335, "i_bitcount": 1335, "i_bitor_j": 1335, "i_bitor_op_j": 1335, "i_bitxor_j": 1335, "i_bitxor_op_j": 1335, "iceberg": [151, 820], "icon": [40, 320], "id": [26, 33, 40, 59, 132, 135, 151, 227, 277, 284, 297, 306, 320, 619, 679, 680, 719, 808, 854, 896, 905, 922, 928, 1202, 1303, 1316, 1344, 1345, 1347], "id_char": 1347, "id_var": [236, 287, 320, 862, 888, 922], "ideal": 131, "ident": [33, 129, 183, 184, 320, 446, 618, 619, 808, 827, 828, 922, 1003, 1005, 1055, 1201, 1202, 1316], "identif": [140, 146], "identifi": [129, 137, 236, 243, 285, 287, 298, 320, 862, 886, 888, 922], "idiograph": 928, "idiomat": [804, 832, 839, 872, 891, 905, 922], "idx": [149, 211, 224, 297, 320, 356, 369, 550, 848, 896, 922, 971, 1162, 1246], "idx_lit": 1246, "idx_rx": 1246, "ieee": [717, 808], "if_set": [5, 30], "if_table_exist": [38, 320], "ifnul": 1337, "ignor": [39, 137, 164, 165, 169, 234, 270, 289, 320, 332, 334, 357, 377, 413, 443, 465, 467, 468, 520, 529, 592, 593, 656, 672, 725, 727, 739, 774, 792, 808, 889, 922, 928, 935, 936, 959, 978, 1018, 1052, 1077, 1079, 1080, 1132, 1141, 1179, 1180, 1233, 1249, 1316], "ignore_error": [135, 136, 145, 149, 153], "ignore_nul": [234, 270, 320, 332, 334, 357, 465, 467, 468, 529, 656, 672, 725, 727, 739, 774, 792, 808, 935, 936, 959, 1077, 1079, 1080, 1141, 1233, 1249, 1316], "ignore_spac": 928, "ij": 680, "ij67": 680, "ijkl": 1339, "ilmsuxu": [657, 665, 666, 669, 679, 680, 1234, 1242, 1243, 1246, 1256, 1257], "imbal": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "imdb_scor": 1325, "immedi": [174, 610, 730, 734, 749, 750, 752, 753, 764, 765, 780, 783, 786, 790, 795, 796, 799, 808, 1193, 1316, 1326], "immut": [278, 320, 1297, 1316], "impact": [211, 320, 848, 922, 1325, 1344], "impl": 151, "implement": [45, 123, 137, 178, 212, 230, 306, 320, 323, 324, 488, 559, 583, 584, 586, 588, 590, 591, 704, 714, 770, 808, 905, 1098, 1170, 1216, 1218, 1299, 1316, 1321], "implic": [412, 808, 835, 922], "implicit": [289, 320, 889, 922], "implicitli": [202, 320, 475, 798, 808, 844, 922, 1344], "implod": [808, 1316, 1334], "import": [10, 16, 28, 35, 37, 39, 40, 41, 42, 45, 51, 66, 69, 122, 123, 126, 127, 135, 137, 138, 144, 145, 149, 155, 158, 159, 160, 161, 162, 163, 164, 165, 168, 169, 170, 171, 182, 189, 190, 191, 194, 209, 211, 224, 226, 243, 245, 260, 267, 275, 277, 282, 287, 288, 290, 320, 323, 324, 378, 411, 412, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 466, 566, 567, 573, 600, 621, 623, 625, 627, 629, 631, 634, 636, 638, 735, 748, 749, 750, 751, 752, 753, 754, 787, 795, 796, 804, 808, 820, 826, 830, 834, 835, 836, 838, 848, 853, 858, 875, 888, 922, 979, 1006, 1008, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1078, 1108, 1111, 1113, 1114, 1203, 1226, 1289, 1316, 1321, 1326, 1341, 1344, 1347], "improv": [38, 49, 141, 152, 225, 320, 558, 808, 852, 922], "in_plac": [215, 264, 292, 320, 1194, 1223, 1230, 1316], "includ": [7, 20, 30, 37, 39, 40, 46, 56, 127, 137, 139, 140, 145, 146, 147, 149, 150, 151, 152, 153, 154, 165, 166, 174, 185, 189, 197, 202, 227, 243, 245, 255, 266, 282, 284, 288, 289, 320, 410, 445, 475, 479, 490, 496, 566, 607, 622, 624, 626, 628, 630, 632, 633, 635, 637, 679, 680, 684, 685, 688, 689, 735, 744, 784, 785, 808, 834, 844, 854, 880, 889, 922, 928, 1016, 1017, 1054, 1076, 1087, 1100, 1105, 1191, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1256, 1257, 1261, 1262, 1265, 1316, 1344], "include_bom": [37, 46, 320, 922], "include_boundari": [211, 320, 848, 922], "include_break": [410, 607, 808, 1016, 1191, 1316], "include_breakpoint": [490, 808, 1100, 1316], "include_categor": 928, "include_categori": [490, 808, 1100, 1316], "include_col": 165, "include_file_path": [140, 145, 146, 147, 149, 152, 153, 154], "include_head": [37, 40, 46, 136, 284, 320, 922], "include_index": 127, "include_init": 744, "include_kei": [243, 255, 320], "include_nul": [289, 320, 889, 922], "inclus": [179, 211, 252, 320, 449, 496, 620, 623, 625, 627, 629, 631, 634, 636, 638, 684, 685, 730, 749, 750, 752, 753, 764, 765, 795, 796, 808, 848, 871, 922, 1058, 1105, 1261, 1262, 1316], "incom": 137, "incompat": 116, "incomplet": [615, 808, 1198, 1316], "incorpor": 1344, "incorrect": [261, 320, 460, 558, 559, 643, 808, 876, 905, 922, 1069, 1219, 1316], "incorrectli": [135, 550], "increas": [40, 51, 135, 140, 146, 147, 154, 320, 409, 619, 808, 1015, 1202, 1316], "independ": [57, 58, 162, 165, 169, 282, 320, 646, 808, 829, 830, 840, 867, 878, 922], "index": [40, 104, 123, 127, 130, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 157, 178, 205, 207, 211, 216, 221, 223, 245, 250, 252, 253, 254, 263, 265, 277, 278, 280, 287, 289, 290, 296, 297, 320, 330, 343, 344, 345, 347, 350, 351, 356, 364, 369, 466, 482, 483, 485, 492, 515, 516, 525, 526, 527, 543, 544, 550, 620, 623, 625, 627, 629, 631, 634, 636, 638, 642, 644, 651, 657, 665, 669, 671, 683, 694, 704, 733, 764, 767, 808, 846, 848, 871, 877, 879, 888, 889, 895, 896, 922, 928, 945, 946, 947, 948, 949, 952, 953, 958, 966, 971, 1078, 1091, 1092, 1102, 1119, 1127, 1128, 1137, 1138, 1139, 1155, 1156, 1162, 1183, 1216, 1217, 1221, 1229, 1242, 1246, 1248, 1260, 1271, 1316, 1321, 1334, 1339], "index_column": [211, 252, 320, 620, 808, 848, 871, 922], "index_of": [808, 1316], "indexord": [277, 278, 320], "indic": [37, 40, 41, 45, 46, 47, 48, 49, 65, 66, 68, 82, 97, 107, 133, 135, 136, 137, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 162, 163, 169, 211, 252, 255, 261, 263, 275, 320, 346, 364, 482, 490, 497, 498, 499, 501, 502, 503, 504, 505, 506, 525, 543, 563, 564, 565, 566, 567, 568, 569, 620, 623, 625, 627, 629, 631, 634, 636, 638, 642, 644, 733, 734, 779, 808, 848, 871, 876, 877, 922, 926, 928, 966, 1091, 1100, 1108, 1109, 1111, 1112, 1113, 1114, 1115, 1116, 1137, 1155, 1216, 1217, 1221, 1292, 1316, 1347], "indistinguish": [37, 46, 320, 922], "individu": [40, 49, 174, 252, 277, 278, 282, 320, 559, 666, 707, 808, 829, 871, 922, 928, 1002, 1243, 1316], "inequ": [594, 808], "inexact": [158, 159, 160, 161], "inf": [162, 165, 169, 342, 410, 498, 501, 607, 717, 808, 944, 1008, 1016, 1108, 1111, 1168, 1186, 1191, 1304, 1316, 1341], "infer": [37, 41, 45, 46, 47, 48, 49, 67, 81, 97, 122, 124, 125, 126, 127, 128, 135, 136, 137, 140, 144, 145, 146, 147, 149, 152, 153, 154, 230, 320, 558, 559, 616, 673, 693, 695, 696, 697, 700, 754, 768, 783, 808, 922, 1170, 1199, 1250, 1270, 1272, 1273, 1274, 1277, 1316], "infer_schema": [135, 149], "infer_schema_length": [125, 128, 132, 135, 136, 137, 140, 144, 145, 146, 149, 153, 320, 673, 922, 1250], "inference_length": [697, 1274], "inference_s": [230, 320], "infin": [701, 717, 808, 1278], "infinit": [501, 717, 808, 1111, 1316], "influenc": [140, 858, 922], "influxdb": 137, "info": [139, 150, 151, 157], "inform": [19, 23, 37, 38, 41, 45, 46, 47, 48, 49, 56, 139, 145, 147, 149, 150, 151, 152, 153, 154, 158, 160, 176, 187, 189, 320, 324, 508, 559, 650, 657, 665, 666, 669, 679, 680, 808, 829, 834, 867, 922, 926, 930, 998, 1120, 1228, 1234, 1242, 1243, 1246, 1256, 1257, 1316], "inherit": [253, 320, 412, 808, 835, 922], "init": [174, 1325], "initcap": 1337, "initi": [32, 33, 34, 40, 81, 174, 320, 744, 758, 798, 1344], "initialis": [69, 137, 174, 922], "inject": [40, 51, 320], "inlin": [24, 255, 320, 657, 665, 666, 669, 679, 680, 1234, 1242, 1243, 1246, 1256, 1257, 1334], "inner": [60, 77, 164, 225, 227, 289, 320, 357, 368, 414, 529, 549, 559, 613, 714, 787, 808, 852, 854, 889, 922, 959, 970, 1019, 1141, 1161, 1170, 1299, 1316, 1332, 1344], "inner_dtyp": [164, 167], "innermost": [164, 167], "innter": 958, "inprocessqueri": [829, 922], "input": [0, 51, 57, 97, 125, 127, 135, 136, 181, 191, 210, 227, 230, 234, 243, 245, 249, 258, 259, 263, 266, 270, 283, 294, 295, 299, 320, 329, 390, 392, 396, 399, 466, 469, 481, 496, 554, 558, 559, 571, 600, 614, 615, 647, 653, 671, 681, 683, 689, 690, 691, 692, 694, 696, 708, 716, 724, 726, 728, 730, 733, 736, 737, 738, 739, 747, 754, 756, 764, 765, 768, 769, 770, 772, 774, 777, 786, 790, 792, 798, 804, 808, 820, 824, 836, 847, 854, 869, 873, 874, 877, 880, 885, 892, 893, 898, 922, 926, 1004, 1078, 1105, 1166, 1167, 1170, 1189, 1197, 1198, 1221, 1225, 1248, 1260, 1271, 1273, 1316, 1338, 1339, 1341], "input_wildcard_expans": [808, 926], "insensit": [658, 666, 668, 670, 679, 680, 681, 928, 1234, 1235, 1243, 1245, 1246, 1247, 1256, 1257, 1258], "insensitive_match": [657, 669], "insert": [38, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 216, 284, 286, 320, 642, 656, 672, 703, 808, 887, 922, 1217, 1233, 1249, 1280, 1316], "insert_aft": [40, 320], "insert_befor": [40, 320], "insert_chart": [40, 320], "insert_column": 320, "insid": [58, 558, 808, 830, 922], "inspect": [808, 922], "instal": [32, 33, 34, 101, 127, 135, 136, 138, 141, 143, 187, 279, 320, 417, 574, 735, 878, 922, 1022, 1298, 1316], "instanc": [37, 41, 45, 46, 47, 48, 49, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 152, 153, 154, 165, 169, 199, 204, 320, 571, 744, 758, 804, 820, 826, 858, 895, 896, 922, 1083, 1316], "instanti": [38, 40, 137, 167, 258, 276, 277, 294, 320, 873, 892, 922, 927, 1294, 1295, 1316], "instantli": [58, 830, 922], "instead": [33, 37, 39, 43, 44, 51, 58, 59, 124, 125, 128, 135, 136, 137, 140, 146, 147, 149, 154, 155, 162, 163, 164, 165, 169, 180, 181, 209, 222, 223, 226, 230, 236, 241, 243, 253, 254, 255, 258, 259, 260, 263, 277, 278, 279, 283, 295, 296, 320, 323, 324, 345, 364, 390, 391, 394, 395, 410, 424, 449, 466, 469, 479, 543, 573, 607, 614, 644, 656, 664, 675, 676, 688, 689, 690, 691, 692, 703, 716, 723, 730, 732, 734, 741, 749, 750, 752, 753, 754, 764, 765, 780, 783, 786, 787, 790, 795, 796, 799, 808, 823, 824, 830, 840, 853, 862, 873, 874, 875, 877, 885, 893, 894, 895, 897, 922, 928, 947, 966, 975, 991, 995, 996, 1016, 1029, 1037, 1038, 1058, 1078, 1097, 1155, 1191, 1197, 1216, 1218, 1221, 1230, 1233, 1241, 1252, 1253, 1265, 1266, 1267, 1280, 1297, 1298, 1316, 1321, 1325, 1326, 1330, 1344, 1345], "int": [10, 12, 13, 14, 17, 25, 26, 37, 38, 40, 41, 45, 46, 47, 48, 49, 53, 60, 67, 125, 128, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 181, 183, 189, 197, 200, 201, 205, 207, 209, 212, 213, 214, 216, 221, 223, 224, 226, 229, 230, 240, 241, 250, 252, 253, 256, 262, 263, 265, 268, 271, 276, 280, 283, 288, 291, 293, 296, 297, 303, 314, 320, 329, 352, 356, 364, 366, 369, 371, 372, 389, 390, 409, 413, 417, 442, 465, 467, 468, 472, 473, 474, 480, 482, 483, 485, 488, 489, 490, 512, 518, 520, 525, 526, 527, 528, 538, 543, 544, 546, 548, 549, 550, 552, 599, 601, 604, 605, 607, 610, 613, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 646, 651, 655, 665, 671, 673, 677, 678, 679, 683, 685, 686, 694, 697, 698, 703, 711, 715, 716, 722, 724, 730, 740, 742, 748, 751, 754, 760, 762, 764, 765, 779, 780, 783, 784, 785, 789, 790, 793, 794, 797, 799, 808, 824, 827, 834, 842, 843, 846, 849, 853, 857, 867, 877, 879, 882, 884, 885, 890, 891, 895, 896, 897, 902, 913, 922, 927, 928, 945, 946, 954, 958, 966, 968, 971, 973, 990, 991, 1002, 1003, 1009, 1015, 1018, 1019, 1022, 1051, 1076, 1077, 1079, 1080, 1084, 1085, 1086, 1091, 1092, 1098, 1099, 1100, 1102, 1119, 1123, 1124, 1130, 1132, 1137, 1138, 1139, 1140, 1150, 1155, 1156, 1158, 1160, 1161, 1162, 1164, 1176, 1177, 1179, 1180, 1183, 1185, 1186, 1189, 1190, 1191, 1193, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1220, 1221, 1224, 1229, 1232, 1242, 1248, 1250, 1254, 1255, 1256, 1260, 1262, 1263, 1271, 1274, 1275, 1280, 1287, 1288, 1294, 1301, 1306, 1316, 1328, 1331, 1344, 1347], "int16": [1, 54, 282, 320, 407, 408, 440, 710, 808, 928, 1013, 1014, 1049, 1287, 1294, 1316], "int32": [1, 40, 54, 59, 122, 125, 162, 164, 165, 211, 224, 252, 277, 320, 355, 356, 358, 377, 391, 420, 430, 431, 432, 433, 438, 461, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 714, 783, 808, 848, 871, 922, 927, 928, 954, 957, 958, 960, 978, 1025, 1035, 1039, 1040, 1041, 1047, 1070, 1078, 1168, 1299, 1300, 1316], "int64": [1, 39, 40, 53, 54, 59, 60, 81, 99, 135, 144, 185, 195, 204, 211, 244, 252, 257, 258, 272, 279, 320, 350, 351, 353, 354, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 407, 408, 450, 451, 452, 453, 454, 455, 456, 460, 466, 469, 558, 559, 585, 587, 589, 604, 612, 620, 623, 625, 627, 629, 631, 634, 636, 638, 673, 698, 710, 714, 730, 737, 756, 764, 765, 768, 783, 790, 804, 808, 831, 839, 848, 866, 871, 872, 873, 922, 928, 952, 953, 955, 956, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 1013, 1014, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1069, 1071, 1078, 1170, 1195, 1275, 1287, 1297, 1298, 1299, 1300, 1316], "int64arrai": [1291, 1316], "int8": [1, 54, 81, 204, 320, 368, 369, 407, 408, 425, 428, 434, 435, 441, 445, 458, 459, 549, 710, 780, 783, 799, 808, 927, 970, 971, 1013, 1014, 1018, 1030, 1033, 1043, 1044, 1050, 1054, 1067, 1068, 1161, 1200, 1287, 1297, 1304, 1316], "int_rang": [211, 288, 297, 306, 320, 730, 767, 786, 848, 858, 896, 905, 922], "integ": [37, 40, 46, 65, 66, 68, 72, 73, 74, 75, 76, 82, 83, 84, 85, 86, 156, 163, 165, 168, 170, 194, 211, 252, 275, 278, 320, 333, 398, 445, 478, 479, 599, 605, 607, 612, 619, 620, 632, 671, 694, 698, 724, 730, 760, 764, 765, 783, 808, 838, 848, 871, 922, 928, 1001, 1054, 1090, 1189, 1191, 1195, 1202, 1209, 1216, 1248, 1271, 1275, 1297, 1316, 1338, 1344, 1347], "integer_list": 77, "integr": [40, 282, 320, 623, 625, 627, 629, 631, 634, 636, 638, 808, 1347], "intend": [1, 158, 159, 160, 161, 703, 1280], "intens": [230, 306, 320, 600, 808, 1170, 1316], "interact": [165, 169, 189, 320, 323, 834, 922, 1316, 1321], "interchang": [123, 178], "interest": [136, 446, 449, 1055, 1058], "interfac": [0, 112, 113, 177, 820, 931, 1344], "interleav": 1339, "intermedi": [217, 320, 851, 922, 1347], "intern": [41, 42, 137, 156, 223, 272, 320, 479, 808, 1291, 1316, 1326], "interoper": [176, 930], "interpol": [189, 247, 312, 320, 474, 495, 562, 608, 630, 631, 781, 808, 834, 868, 911, 922, 1017, 1104, 1192, 1208, 1316, 1333], "interpolate_bi": [808, 1316], "interpolationmethod": [494, 808, 1103, 1316], "interpret": [126, 128, 135, 136, 149, 320, 377, 922, 978], "intersect": [40, 320, 540, 928, 1152, 1343], "interv": [211, 252, 290, 320, 410, 444, 457, 490, 496, 607, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 871, 922, 1016, 1030, 1032, 1033, 1039, 1041, 1043, 1044, 1047, 1049, 1050, 1053, 1057, 1066, 1067, 1100, 1105, 1191, 1316, 1333], "intoexpr": [181, 210, 211, 252, 258, 259, 263, 266, 283, 294, 295, 299, 320, 335, 353, 373, 376, 379, 390, 417, 442, 466, 472, 482, 490, 492, 495, 496, 519, 539, 540, 541, 542, 600, 614, 615, 623, 625, 627, 629, 631, 634, 636, 638, 642, 644, 653, 658, 668, 670, 681, 684, 685, 686, 688, 689, 690, 691, 692, 708, 716, 726, 728, 733, 736, 737, 738, 739, 740, 742, 744, 747, 751, 758, 772, 774, 777, 783, 786, 790, 792, 808, 824, 847, 848, 871, 873, 874, 877, 880, 885, 892, 893, 898, 922, 926, 955, 974, 977, 980, 1022, 1078, 1084, 1102, 1104, 1105, 1131, 1197, 1198, 1217, 1221, 1247, 1261, 1262, 1263, 1265, 1266, 1267, 1268, 1269, 1316], "intoexprcolumn": [202, 216, 320, 352, 356, 357, 364, 389, 390, 399, 444, 472, 475, 518, 526, 529, 538, 543, 601, 605, 641, 644, 665, 671, 674, 683, 694, 698, 703, 715, 716, 730, 735, 749, 750, 752, 753, 764, 765, 795, 796, 798, 808, 844, 877, 922, 954, 958, 959, 966, 1004, 1053, 1066, 1084, 1130, 1138, 1141, 1150, 1155, 1186, 1242, 1248, 1251, 1260, 1271, 1280, 1316], "introduc": [50, 90, 693, 695, 696, 1270, 1272, 1273], "introduct": 1343, "intuit": [479, 808, 928], "invalid": [37, 46, 113, 135, 136, 149, 182, 320, 391, 673, 674, 698, 717, 808, 922, 975, 991, 1250, 1251, 1275, 1316], "invalid_valu": 975, "invalidoperationerror": [615, 808, 1198, 1316, 1342], "invari": [858, 922], "invers": [337, 338, 339, 340, 341, 342, 808, 939, 940, 941, 942, 943, 944, 1297, 1316, 1341], "invert": 928, "invok": [174, 558, 808], "involv": [202, 320, 844, 922], "io": [35, 37, 40, 41, 42, 45, 133, 135, 141, 142, 143, 144, 145, 148, 149, 151, 152, 153, 190, 260, 320, 412, 481, 573, 808, 835, 875, 922], "iobas": [43, 44, 144, 145, 190, 260, 320, 412, 573, 577, 808, 835, 875, 922], "ipc": [41, 42, 47, 141, 142, 143, 152, 155, 320, 820, 922], "ipccompress": [41, 42, 320], "is_between": [808, 1316], "is_dupl": [320, 808, 1316], "is_elementwis": [558, 808, 926], "is_empti": [320, 1316], "is_finit": [808, 1316], "is_first_distinct": [808, 1316], "is_in": [99, 202, 320, 808, 1316], "is_infinit": [808, 1316], "is_last_distinct": [808, 1316], "is_nan": [193, 320, 808, 837, 922, 1316], "is_not_nan": [808, 1316], "is_not_nul": [808, 1316], "is_nul": [194, 320, 808, 838, 922, 1316], "is_numer": 1347, "is_odd": [258, 320, 873, 922, 928], "is_selector": 928, "is_sort": 1316, "is_uniqu": [320, 808, 1316], "isn": 798, "iso": [430, 449, 458, 459, 1035, 1058, 1067, 1068, 1339], "iso8601": [135, 136, 149, 449, 1058], "iso_lang": 1339, "iso_year": 461, "isodow": 1340, "isoweek": 1340, "isoyear": 1340, "issu": [92, 93, 96, 97, 100, 107, 109, 120, 135, 136, 137, 149, 320, 407, 408, 710, 808, 1013, 1014, 1287, 1316, 1344], "ital": [40, 320], "item": [13, 59, 136, 209, 253, 256, 320, 352, 356, 357, 413, 471, 518, 520, 527, 529, 538, 641, 686, 808, 954, 958, 959, 1018, 1082, 1130, 1132, 1139, 1141, 1150, 1215, 1263, 1316], "iter": [57, 58, 59, 69, 122, 125, 137, 168, 170, 181, 191, 202, 210, 211, 222, 223, 224, 227, 252, 253, 254, 255, 258, 259, 266, 283, 284, 294, 295, 298, 299, 320, 390, 409, 417, 475, 600, 653, 708, 716, 726, 728, 733, 735, 736, 737, 738, 739, 747, 772, 774, 777, 786, 790, 792, 798, 804, 808, 824, 836, 844, 847, 848, 854, 871, 873, 874, 880, 885, 892, 893, 898, 922, 926, 927, 928, 1015, 1022, 1087, 1216, 1316, 1347], "iter_batch": 137, "iter_column": 320, "iter_row": [224, 253, 254, 255, 320], "iter_slic": 320, "its": [91, 129, 157, 197, 278, 320, 421, 444, 457, 466, 558, 618, 653, 707, 798, 808, 832, 839, 891, 922, 998, 1026, 1053, 1066, 1076, 1078, 1201, 1297, 1316, 1346], "itself": [163, 320, 323, 324, 559, 622, 624, 626, 628, 630, 632, 633, 635, 637, 784, 785, 808, 856, 922, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1316, 1321, 1325, 1326, 1344], "ix": [245, 320], "j": [284, 320, 1335], "jax": [277, 320, 1295, 1316], "jax_enable_x64": [277, 320], "jaxexporttyp": [277, 320], "jjk": 928, "jkl": [666, 1243], "jklmn": 1339, "job": [825, 922], "join": [46, 47, 48, 49, 50, 51, 57, 58, 59, 90, 202, 226, 227, 289, 320, 475, 494, 600, 656, 787, 808, 829, 830, 840, 844, 853, 854, 867, 878, 889, 894, 922, 1233, 1326, 1328, 1334, 1343, 1344], "join_asof": [225, 320, 852, 922], "join_nul": [225, 320, 852, 922], "join_wher": [320, 922], "joinstrategi": [51, 225, 320, 852, 922], "joinvalid": [225, 320, 852, 922], "jpy": 1347, "json": [2, 3, 5, 6, 43, 44, 132, 144, 145, 151, 153, 190, 260, 320, 412, 481, 573, 577, 673, 674, 705, 808, 820, 835, 875, 922, 926, 1250, 1251, 1283], "json_path": [674, 1251], "json_path_match": [673, 1250], "json_stat": 5, "json_str": [144, 145], "json_val": [674, 1251], "jsonpath": [673, 674, 1250, 1251], "jst": [129, 928], "jul": [693, 1270, 1339], "juli": [1058, 1339, 1340], "just": [40, 127, 137, 149, 236, 287, 320, 862, 888, 922, 928], "k": [181, 255, 283, 284, 320, 389, 390, 404, 508, 715, 716, 808, 824, 885, 922, 990, 1010, 1120, 1301, 1316], "k_2": [650, 808, 1228, 1316], "k_3": [650, 808, 1228, 1316], "kanji": 928, "karen": [245, 320], "kathmandu": [1028, 1029, 1056], "kb": [197, 320, 378, 979, 1076, 1316], "kde": [1316, 1321], "keep": [51, 135, 136, 145, 149, 152, 153, 202, 285, 289, 290, 320, 481, 558, 576, 584, 614, 736, 808, 844, 886, 889, 922, 1197, 1316], "kei": [33, 37, 40, 41, 45, 46, 47, 48, 49, 51, 56, 59, 145, 147, 149, 151, 152, 153, 154, 179, 211, 223, 225, 226, 237, 243, 249, 251, 254, 255, 289, 320, 475, 559, 614, 615, 681, 749, 752, 790, 808, 848, 852, 853, 863, 869, 870, 889, 922, 928, 932, 1197, 1198, 1258, 1316, 1332], "kept": [285, 320, 886, 922], "keyerror": 16, "keystrok": 804, "keyword": [39, 139, 147, 150, 165, 169, 187, 210, 244, 253, 258, 259, 279, 294, 295, 299, 320, 475, 604, 708, 786, 790, 798, 808, 847, 866, 873, 874, 892, 893, 898, 922, 1298, 1316, 1329], "kl": 680, "kleen": [332, 334, 725, 726, 727, 728, 808, 935, 936, 1316], "klmnoopqrstuvwxyz": [224, 320], "knight": 1325, "know": [51, 137, 245, 287, 320, 550, 558, 808, 888, 922], "known": [141, 369, 550, 905, 971, 1162], "kurtosi": [808, 1316], "kuzu_db_conn": 137, "kwarg": [31, 32, 36, 50, 61, 62, 64, 65, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 87, 134, 137, 138, 165, 167, 169, 187, 202, 244, 279, 320, 323, 604, 808, 844, 866, 897, 922, 926, 1298, 1316, 1321, 1329, 1344], "k\u00f9zudb": 137, "l1": 59, "l2": 59, "label": [211, 277, 282, 320, 323, 324, 410, 607, 621, 622, 624, 626, 628, 630, 633, 635, 637, 808, 848, 867, 922, 1016, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1316, 1321], "label_column": [282, 320], "labelangl": [320, 323, 1316, 1321], "lag": [263, 320, 364, 543, 644, 738, 808, 877, 922, 966, 1155, 1221, 1316], "lake": [39, 139, 150, 320, 820], "lambda": [149, 204, 230, 244, 245, 249, 306, 320, 369, 467, 468, 550, 558, 559, 584, 585, 744, 745, 758, 769, 770, 782, 808, 858, 866, 869, 905, 922, 971, 1079, 1080, 1162, 1170, 1316], "land": [417, 1022], "languag": [149, 211, 226, 252, 290, 320, 439, 444, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1066, 1078, 1316], "larg": [10, 11, 14, 51, 137, 140, 146, 154], "large_str": [224, 272, 279, 320], "larger": [10, 46, 47, 48, 49, 57, 58, 479, 740, 808, 829, 830, 922], "largest": [181, 283, 320, 390, 715, 716, 808, 824, 885, 922, 1301, 1316], "last": [39, 145, 149, 152, 153, 158, 159, 160, 161, 213, 226, 229, 245, 255, 266, 271, 278, 285, 314, 320, 345, 356, 365, 409, 425, 436, 440, 458, 480, 502, 527, 545, 548, 550, 583, 584, 586, 588, 590, 591, 615, 652, 653, 671, 686, 694, 711, 733, 793, 804, 808, 853, 880, 884, 886, 913, 922, 928, 947, 958, 967, 1015, 1030, 1045, 1049, 1067, 1099, 1112, 1124, 1139, 1157, 1160, 1198, 1230, 1248, 1263, 1271, 1288, 1297, 1316, 1337, 1339], "last_column": [40, 320], "later": [226, 260, 320, 573, 853, 875, 922], "latest": [32, 123, 139, 150, 178, 442, 443, 571, 693, 696, 751, 1051, 1052, 1270, 1273], "latt": 928, "latter": [40, 199, 320, 1083, 1316], "lazi": [1, 59, 149, 165, 226, 244, 245, 267, 320, 559, 760, 780, 783, 799, 808, 834, 852, 853, 894, 898, 899, 901, 903, 905, 906, 907, 908, 909, 910, 911, 912, 922, 928, 1325, 1326, 1327, 1328, 1329, 1331, 1344, 1347], "lazili": [135, 136, 149, 150, 151, 152, 153, 154, 830, 922], "lazy_fram": [57, 58], "lazyfram": [0, 1, 51, 52, 53, 54, 55, 57, 58, 59, 149, 150, 151, 152, 153, 154, 155, 158, 159, 165, 185, 190, 228, 244, 245, 260, 267, 320, 412, 475, 550, 573, 786, 787, 808, 820, 919, 920, 921, 927, 928, 1325, 1326, 1329, 1331, 1344, 1345, 1347], "lazygroupbi": [847, 848, 871, 922], "lbl": [277, 282, 320], "ldf": [1, 898, 899, 901, 903, 906, 907, 908, 909, 910, 911, 912], "ldot": [466, 808, 1078, 1316], "le": [662, 808, 1316], "lead": [14, 45, 129, 155, 234, 261, 263, 270, 320, 364, 482, 485, 543, 550, 558, 559, 643, 644, 688, 690, 740, 774, 792, 808, 858, 876, 877, 905, 922, 966, 1155, 1170, 1219, 1221, 1265, 1267, 1316], "leap": [429, 439, 1034, 1048], "leap_year": 429, "learn": [282, 320], "least": [103, 245, 320, 386, 387, 601, 665, 667, 808, 987, 988, 1186, 1242, 1244, 1316, 1337], "leav": [6, 236, 287, 320, 550, 862, 888, 922], "left": [15, 16, 40, 51, 158, 159, 160, 161, 211, 225, 226, 252, 289, 320, 410, 465, 466, 467, 468, 494, 496, 607, 620, 623, 625, 627, 629, 631, 634, 636, 638, 642, 714, 736, 744, 745, 749, 750, 752, 753, 758, 782, 795, 796, 798, 808, 848, 852, 853, 871, 889, 922, 1016, 1077, 1078, 1079, 1080, 1105, 1191, 1217, 1299, 1316, 1328, 1332, 1337], "left_clos": [410, 607, 808, 1016, 1191, 1316], "left_on": [225, 226, 289, 320, 852, 853, 889, 922], "left_right": [225, 320, 852, 922], "leftmost": [642, 808, 1217, 1316, 1339], "len": [12, 40, 165, 169, 185, 224, 245, 297, 301, 306, 320, 403, 559, 570, 572, 618, 741, 764, 808, 831, 891, 896, 900, 905, 922, 927, 1009, 1201, 1316], "len_byt": [12, 395, 676, 996, 1253], "len_char": [394, 675, 995, 1252], "length": [59, 60, 77, 140, 146, 149, 163, 167, 209, 211, 252, 265, 320, 323, 394, 409, 444, 457, 544, 550, 571, 614, 615, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 651, 671, 675, 676, 677, 678, 681, 683, 694, 703, 737, 780, 783, 784, 785, 799, 808, 848, 867, 871, 879, 922, 926, 995, 1002, 1015, 1026, 1053, 1066, 1156, 1162, 1183, 1197, 1198, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1229, 1248, 1252, 1253, 1254, 1255, 1258, 1260, 1271, 1280, 1316, 1333, 1334, 1337], "leq": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "less": [149, 226, 320, 479, 510, 557, 558, 686, 808, 853, 922, 1263, 1347], "letter": [198, 303, 314, 320, 469, 658, 666, 668, 670, 681, 701, 756, 808, 841, 902, 913, 922, 928, 1235, 1243, 1245, 1247, 1258, 1278, 1339], "level": [10, 40, 41, 42, 45, 49, 132, 149, 152, 153, 154, 204, 230, 241, 267, 272, 320, 324, 475, 808, 820, 881, 922, 1291, 1316, 1344], "lexic": [63, 928, 999], "lf": [46, 47, 48, 49, 54, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 872, 873, 875, 877, 878, 879, 880, 882, 883, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 896, 900, 904, 922, 1333, 1344, 1347], "lf1": [787, 881, 922, 1329, 1331, 1345], "lf2": [787, 881, 922, 1329, 1331, 1345], "lf3": [922, 1329], "lf4": [922, 1329], "lf5": 922, "lf6": 922, "lf_other": [894, 922], "lib": [808, 1291, 1316], "librari": [1, 105, 137, 140, 558, 808, 926, 1347], "life": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "lifetim": [174, 819, 1331], "light": [40, 320], "like": [35, 37, 39, 41, 42, 43, 44, 45, 58, 123, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 190, 211, 218, 220, 225, 255, 260, 277, 278, 320, 323, 412, 418, 481, 522, 558, 576, 610, 665, 689, 690, 721, 804, 808, 825, 830, 835, 848, 922, 926, 1023, 1134, 1193, 1242, 1305, 1316, 1321], "limit": [10, 11, 49, 137, 138, 171, 201, 320, 372, 474, 480, 808, 843, 922, 1086, 1316, 1334, 1343], "line": [10, 20, 40, 135, 136, 140, 149, 209, 218, 220, 320, 323, 665, 1242, 1316, 1321], "line_termin": [37, 46, 320, 922], "linear": [189, 217, 247, 312, 320, 494, 495, 517, 562, 608, 630, 631, 738, 739, 781, 808, 834, 851, 868, 911, 922, 1017, 1103, 1104, 1129, 1192, 1208, 1316], "lineitem": [131, 136, 138], "list": [1, 13, 33, 39, 40, 51, 52, 54, 57, 58, 60, 66, 81, 97, 122, 124, 125, 126, 128, 129, 131, 133, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 163, 164, 165, 169, 186, 191, 195, 197, 198, 202, 208, 210, 211, 215, 223, 240, 243, 252, 253, 254, 255, 258, 266, 273, 274, 282, 284, 285, 286, 288, 294, 299, 300, 320, 330, 357, 368, 369, 370, 410, 417, 471, 477, 482, 491, 500, 558, 559, 571, 572, 600, 607, 613, 616, 621, 622, 624, 626, 628, 630, 633, 635, 637, 652, 653, 664, 666, 668, 670, 684, 704, 706, 707, 714, 733, 735, 738, 749, 750, 752, 753, 755, 763, 765, 768, 770, 788, 790, 796, 804, 808, 832, 839, 841, 844, 847, 848, 873, 880, 886, 887, 892, 894, 898, 899, 922, 927, 928, 959, 970, 971, 972, 1002, 1016, 1022, 1076, 1082, 1091, 1094, 1100, 1101, 1110, 1170, 1191, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1235, 1241, 1243, 1245, 1247, 1258, 1261, 1296, 1299, 1316, 1325, 1330, 1334, 1336, 1346, 1347], "list_of_seri": 770, "listtostructwidthstrategi": [550, 1162], "lit": [1, 331, 373, 496, 567, 583, 669, 737, 738, 744, 758, 780, 783, 799, 808, 1086, 1316], "liter": [15, 16, 20, 37, 39, 41, 45, 46, 47, 48, 49, 137, 145, 147, 149, 152, 153, 154, 168, 169, 170, 240, 258, 259, 263, 289, 294, 295, 320, 331, 373, 392, 396, 399, 421, 442, 463, 464, 472, 479, 484, 486, 496, 510, 557, 567, 579, 581, 594, 595, 605, 614, 615, 657, 658, 659, 668, 669, 670, 679, 680, 681, 708, 709, 717, 726, 728, 730, 736, 737, 738, 739, 747, 748, 751, 764, 768, 772, 774, 777, 786, 790, 792, 794, 808, 843, 873, 874, 877, 889, 892, 893, 922, 928, 974, 1004, 1026, 1051, 1074, 1084, 1105, 1182, 1197, 1198, 1216, 1218, 1221, 1234, 1235, 1236, 1245, 1246, 1247, 1256, 1257, 1258, 1316, 1339], "littl": [254, 320, 377, 978], "lmn": 928, "ln": [465, 466, 467, 468, 808, 1077, 1078, 1079, 1080, 1316, 1337], "ln_a": 1338, "load": [3, 5, 6, 125, 127, 137, 139, 140, 146, 150, 151, 168, 170, 320, 808, 820, 922, 926, 1347], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 140, "load_workbook": 140, "loader": [282, 320], "lobster": [669, 1246], "loc": [320, 324], "local": [4, 39, 137, 139, 150, 151, 154, 320, 457, 602, 603, 808, 994, 998, 1028, 1029, 1053, 1056, 1066, 1187, 1188, 1316, 1326], "localhost": 137, "localis": [444, 457, 1066], "locat": [40, 147, 149, 152, 154, 199, 250, 280, 286, 320, 642, 808, 887, 922, 1083, 1091, 1216, 1217, 1316], "lock": 171, "log": [29, 53, 390, 462, 555, 581, 605, 716, 808, 1072, 1316, 1337], "log10": [808, 1316, 1337], "log10_a": 1338, "log16_a": 1338, "log1p": [808, 1316, 1337], "log1p_a": 1338, "log2": 1337, "logarithm": [553, 554, 555, 808, 1165, 1166, 1167, 1316, 1338], "logic": [59, 230, 306, 320, 323, 324, 332, 334, 412, 559, 714, 725, 726, 727, 728, 770, 808, 835, 840, 852, 875, 905, 922, 935, 936, 1170, 1297, 1299, 1316, 1321], "london": [422, 426, 443, 1027, 1031, 1052], "london_timezon": [443, 1052], "london_to_amsterdam": [443, 1052], "long": [198, 236, 245, 287, 288, 320, 377, 841, 862, 888, 922, 978], "longer": [135, 136, 149], "longest": 550, "look": [10, 211, 320, 373, 550, 848, 922, 974], "lookup": 804, "loop": [559, 808], "lose": [419, 1024], "lossi": [135, 136, 149], "love": [658, 681, 1235, 1258], "low": [17, 137, 399, 607, 808, 1191, 1316], "low_memori": [135, 136, 145, 147, 149, 153, 154], "lower": [149, 189, 211, 247, 312, 320, 399, 496, 556, 584, 608, 612, 630, 631, 730, 749, 750, 752, 753, 781, 795, 796, 808, 834, 848, 868, 911, 922, 1004, 1017, 1105, 1168, 1192, 1195, 1208, 1304, 1316, 1334, 1337], "lower_bound": [211, 320, 399, 496, 808, 848, 922, 1004, 1105, 1304, 1316], "lowercas": [590, 699, 701, 1276, 1278, 1339], "lowest": [556, 808], "lru_cach": [230, 320, 559, 808, 1170, 1316], "lst": 164, "lt": [157, 475, 723, 808, 1316], "ltrim": 1337, "lyric": [658, 681, 1235, 1258], "lz4": [41, 42, 45, 47, 49, 320, 922], "lzo": [45, 49, 320, 922], "m": [66, 68, 225, 320, 418, 419, 421, 426, 427, 446, 448, 449, 460, 665, 693, 695, 696, 700, 751, 752, 753, 754, 760, 852, 922, 928, 1023, 1024, 1026, 1031, 1032, 1055, 1057, 1058, 1069, 1242, 1270, 1272, 1273, 1277, 1329, 1339, 1340], "m_2": [650, 808, 1228, 1316], "m_3": [650, 808, 1228, 1316], "m_i": [650, 808, 1228, 1316], "machin": 1347, "maco": 157, "made": [33, 40, 137, 320, 449, 1058], "mai": [1, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 59, 67, 69, 72, 122, 124, 125, 126, 128, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 158, 160, 162, 163, 165, 166, 167, 168, 169, 170, 174, 189, 190, 197, 199, 211, 225, 226, 227, 230, 252, 260, 267, 277, 279, 282, 288, 289, 290, 320, 323, 324, 394, 409, 410, 412, 417, 418, 419, 430, 439, 444, 446, 457, 469, 490, 525, 550, 558, 559, 570, 573, 607, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 668, 670, 673, 675, 680, 735, 737, 744, 745, 749, 750, 752, 753, 758, 782, 784, 785, 795, 796, 808, 829, 830, 834, 835, 840, 848, 852, 853, 854, 858, 871, 875, 881, 889, 895, 896, 905, 922, 995, 998, 999, 1015, 1016, 1017, 1022, 1023, 1024, 1035, 1048, 1053, 1055, 1066, 1076, 1083, 1100, 1137, 1170, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1245, 1247, 1250, 1252, 1295, 1298, 1300, 1316, 1321, 1347], "main": [157, 830, 922], "maintain": [46, 47, 48, 49, 266, 320, 370, 551, 642, 653, 718, 733, 808, 834, 880, 922, 972, 1163, 1217, 1302, 1316], "maintain_ord": [46, 47, 48, 49, 210, 225, 243, 245, 266, 285, 290, 300, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 330, 370, 380, 385, 388, 390, 482, 485, 551, 559, 653, 716, 718, 733, 808, 830, 840, 847, 852, 867, 878, 880, 886, 899, 901, 903, 906, 907, 908, 909, 910, 911, 912, 922, 972, 1163, 1302, 1316], "maintainorderjoin": [225, 320, 852, 922], "major": [140, 277, 320], "make": [40, 59, 81, 122, 127, 135, 136, 139, 140, 141, 143, 147, 150, 237, 241, 248, 278, 290, 320, 323, 467, 468, 490, 590, 591, 600, 613, 685, 808, 863, 922, 926, 1079, 1080, 1100, 1262, 1297, 1316], "man": [682, 1259], "manag": [50, 89, 90, 819, 820, 1331, 1344], "mandatori": [40, 320], "mango": [392, 396, 662, 687, 992, 997, 1239, 1264], "mani": [137, 138, 154, 199, 320, 668, 670, 681, 1083, 1245, 1247, 1258, 1316, 1320], "manner": 137, "many_to_mani": [225, 320, 852, 922], "many_to_on": [225, 320, 852, 922], "map": [81, 124, 125, 135, 136, 137, 138, 141, 142, 147, 148, 149, 152, 165, 182, 185, 203, 223, 230, 249, 253, 254, 255, 257, 273, 320, 331, 444, 457, 558, 559, 583, 585, 586, 588, 590, 591, 614, 615, 681, 721, 769, 808, 826, 869, 872, 922, 927, 928, 1017, 1053, 1066, 1170, 1197, 1198, 1258, 1305, 1316, 1326, 1328, 1329, 1344], "map_": 109, "map_batch": [808, 922], "map_el": [100, 230, 320, 558, 724, 808, 1316], "map_field": [587, 589], "map_row": 320, "mapelementsstrategi": [559, 808], "mapping_strategi": [600, 808], "march": [446, 1055], "mariadb": 138, "mark": [40, 132, 320, 391, 808, 991, 1316], "mark_area": [1316, 1321], "mark_attr": [320, 323, 1316, 1321], "mark_bar": [320, 323, 1316, 1321], "mark_lin": [320, 323], "mark_point": [320, 323], "markdown": [7, 20, 174], "marker": [40, 320], "mask": [154, 165, 169, 218, 220, 320, 374, 497, 499, 502, 507, 602, 603, 657, 660, 669, 808, 975, 1087, 1105, 1106, 1109, 1112, 1118, 1187, 1188, 1218, 1234, 1237, 1246, 1307, 1316], "mass": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "massag": [236, 287, 320, 862, 888, 922], "match": [39, 40, 59, 66, 111, 122, 124, 125, 126, 128, 135, 137, 144, 145, 147, 153, 154, 158, 159, 160, 161, 182, 201, 225, 226, 253, 289, 320, 392, 396, 566, 567, 568, 614, 615, 632, 657, 658, 659, 662, 665, 666, 668, 669, 670, 673, 674, 679, 680, 681, 687, 693, 695, 696, 798, 804, 808, 826, 843, 852, 853, 889, 922, 928, 992, 997, 1075, 1197, 1198, 1209, 1234, 1235, 1236, 1239, 1242, 1243, 1245, 1246, 1247, 1250, 1251, 1256, 1257, 1258, 1264, 1270, 1272, 1273, 1316, 1339], "matches_overlap": [668, 670, 1247], "matches_supertyp": [201, 320, 843, 922], "materi": [230, 255, 306, 320, 829, 867, 905, 915, 922, 928, 1170, 1316], "materialis": [223, 224, 253, 254, 320], "math": [1, 10, 55, 245, 320, 411, 808, 1006, 1008, 1226, 1289, 1316, 1337, 1341, 1343], "mathemat": [717, 755, 808, 1337], "mathshortcut": [1, 55], "matplotlib": [157, 574, 867, 878, 922], "matter": [211, 223, 252, 254, 255, 274, 320, 620, 689, 690, 808, 848, 871, 922], "max": [25, 40, 45, 49, 132, 189, 201, 210, 232, 245, 252, 320, 324, 405, 474, 550, 558, 600, 610, 614, 615, 620, 622, 623, 643, 686, 737, 749, 752, 772, 788, 808, 834, 843, 847, 871, 922, 1011, 1017, 1086, 1162, 1193, 1204, 1219, 1263, 1316, 1325, 1334, 1337], "max_a": [252, 320, 620, 808, 871, 922], "max_binary_s": 137, "max_col": [163, 165], "max_colname_length": [209, 320], "max_color": [40, 320], "max_data_s": 169, "max_elem": 1334, "max_horizont": [320, 771], "max_items_per_column": [209, 320], "max_level": 132, "max_siz": [164, 165, 167, 169, 1347], "max_text_s": 137, "max_valu": 1347, "max_width": [550, 1162], "maxim": [307, 343, 808, 906, 945, 1316], "maximum": [10, 26, 37, 45, 46, 49, 67, 125, 128, 135, 136, 137, 140, 144, 145, 146, 149, 153, 155, 163, 164, 165, 167, 169, 209, 211, 231, 232, 320, 350, 395, 515, 560, 592, 602, 610, 671, 673, 676, 683, 694, 771, 772, 808, 848, 859, 922, 952, 996, 1036, 1127, 1171, 1179, 1187, 1193, 1248, 1250, 1253, 1260, 1271, 1316, 1333], "mb": [197, 320, 378, 1076, 1316], "me": [658, 681, 701, 1235, 1258, 1278], "mean": [45, 49, 135, 136, 141, 147, 149, 152, 174, 189, 201, 210, 211, 226, 234, 245, 252, 290, 299, 320, 439, 444, 457, 471, 474, 479, 620, 623, 624, 625, 627, 629, 631, 634, 636, 638, 650, 656, 665, 672, 749, 750, 752, 753, 754, 774, 795, 796, 798, 808, 834, 843, 847, 848, 853, 858, 871, 898, 922, 1017, 1048, 1053, 1066, 1082, 1086, 1205, 1228, 1233, 1242, 1249, 1316, 1333, 1334], "mean_horizont": [320, 773], "measur": [236, 287, 320, 324, 862, 888, 922], "measure_a": [320, 324], "measure_b": [320, 324], "median": [189, 245, 320, 474, 626, 627, 808, 834, 894, 922, 1017, 1206, 1316, 1337], "mediat": 1344, "medium": [40, 320], "megan": [237, 320, 863, 922], "melt": [287, 320, 888, 922], "member": [211, 320, 848, 922, 1110, 1316], "membership": [352, 518, 954, 1130], "memori": [14, 45, 49, 57, 58, 59, 122, 123, 126, 127, 128, 135, 136, 137, 139, 140, 141, 145, 147, 149, 150, 152, 153, 154, 178, 199, 230, 254, 255, 264, 278, 306, 320, 600, 611, 645, 808, 829, 830, 897, 922, 1083, 1170, 1194, 1222, 1223, 1297, 1316], "memory_map": [141, 147, 152], "memory_resourc": 897, "merg": [39, 225, 226, 237, 320, 852, 853, 863, 922], "merge_sort": [320, 922], "messi": [665, 667, 1242, 1244], "met": 798, "meta": [91, 412, 663, 808, 1240], "metadata": [0, 151, 820], "method": [4, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 121, 123, 133, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 155, 162, 165, 169, 174, 176, 185, 189, 190, 193, 194, 199, 206, 210, 217, 223, 230, 241, 247, 253, 254, 255, 263, 285, 294, 301, 306, 312, 320, 329, 332, 333, 364, 399, 412, 446, 449, 463, 464, 472, 479, 481, 484, 486, 494, 510, 543, 557, 559, 577, 579, 581, 583, 584, 586, 588, 590, 591, 594, 595, 596, 599, 605, 608, 610, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 644, 658, 668, 670, 681, 689, 690, 691, 692, 697, 703, 709, 717, 719, 724, 740, 770, 781, 800, 801, 803, 804, 808, 809, 810, 813, 814, 815, 816, 817, 820, 830, 834, 835, 837, 838, 851, 868, 877, 886, 892, 897, 900, 905, 911, 922, 927, 930, 937, 966, 1004, 1017, 1055, 1058, 1073, 1074, 1083, 1084, 1093, 1095, 1103, 1122, 1155, 1169, 1170, 1181, 1182, 1192, 1193, 1208, 1221, 1235, 1245, 1247, 1258, 1274, 1280, 1299, 1308, 1310, 1312, 1316, 1317, 1320, 1322, 1323, 1324, 1326, 1330], "metric": 137, "micro": [445, 1054], "microsecond": [66, 68, 211, 223, 226, 252, 254, 255, 274, 290, 320, 439, 442, 444, 449, 452, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 751, 752, 753, 754, 794, 795, 796, 808, 848, 853, 867, 871, 922, 928, 1048, 1051, 1053, 1061, 1066, 1078, 1316, 1340], "microsoft": [33, 40, 320], "mid_color": [40, 320], "midnight": 82, "midpoint": [189, 247, 312, 320, 608, 630, 631, 781, 808, 834, 868, 911, 922, 1017, 1192, 1208, 1316], "might": [135, 136, 149, 171, 225, 245, 278, 287, 320, 559, 719, 808, 852, 880, 888, 922], "millennia": 1340, "millennium": 1340, "milli": [445, 1054], "millisecond": [211, 226, 252, 290, 320, 428, 434, 439, 444, 453, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 752, 753, 754, 795, 796, 808, 848, 853, 871, 922, 928, 1048, 1053, 1062, 1066, 1078, 1316, 1340], "milliseconds_diff": [452, 453, 455], "mimic": 738, "min": [40, 45, 49, 189, 201, 239, 245, 252, 320, 406, 474, 559, 600, 610, 620, 628, 629, 749, 752, 777, 786, 808, 834, 843, 871, 922, 926, 1012, 1017, 1086, 1193, 1207, 1316, 1334, 1337, 1340, 1347], "min_a": [252, 320, 620, 808, 871, 922], "min_col": [163, 165], "min_color": [40, 320], "min_elem": 1334, "min_horizont": [320, 776, 786], "min_period": [409, 465, 467, 468, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 784, 785, 808, 1015, 1077, 1079, 1080, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1316], "min_siz": [164, 165, 167, 169, 1347], "min_valu": 1347, "mincol": 163, "minim": [310, 344, 351, 516, 645, 653, 808, 909, 946, 953, 1128, 1174, 1222, 1316], "minimum": [45, 49, 163, 164, 165, 167, 169, 204, 238, 239, 320, 465, 467, 468, 578, 593, 603, 610, 776, 777, 808, 864, 922, 1042, 1077, 1079, 1080, 1180, 1188, 1193, 1316, 1333, 1347], "minu": [439, 596, 808, 1048], "minut": [211, 226, 252, 290, 320, 428, 431, 433, 438, 439, 442, 444, 445, 454, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 751, 752, 753, 754, 794, 795, 796, 808, 848, 853, 871, 922, 928, 1048, 1051, 1053, 1063, 1066, 1078, 1316, 1340], "minutes_diff": 454, "misc": 1331, "miscellan": 820, "mismatch": [59, 114, 145, 153, 158, 160], "miss": [59, 135, 136, 149, 200, 206, 320, 372, 465, 467, 468, 473, 480, 503, 504, 550, 808, 842, 922, 1077, 1079, 1080, 1085, 1316], "missing_utf8_is_empty_str": [135, 136, 149], "mix": [11, 226, 278, 320, 737, 787, 853, 881, 922, 928, 1017, 1316], "mixin": 1, "mlnm": 432, "mm": [40, 320], "mn": 1339, "mno": [16, 20], "mnop": 1339, "mo": 754, "mocha": 928, "mod": [808, 1337], "mode": [38, 39, 46, 47, 48, 49, 57, 58, 158, 160, 245, 267, 320, 666, 780, 783, 799, 808, 829, 830, 840, 922, 1243, 1316, 1325, 1326, 1344], "model": [282, 320], "modifi": [135, 136, 149, 171, 174, 199, 215, 222, 223, 292, 320, 346, 443, 460, 657, 665, 666, 669, 679, 680, 699, 701, 702, 808, 937, 1052, 1069, 1083, 1234, 1242, 1243, 1246, 1256, 1257, 1276, 1278, 1279, 1316], "modul": [93, 101, 140, 807, 928, 1347], "modulu": [579, 808], "moment": [45, 187, 320, 508, 650, 808, 1120, 1228, 1316], "mon": [320, 323, 1340], "mondai": [211, 320, 417, 457, 459, 735, 848, 922, 1022, 1066, 1068], "monkei": [677, 678, 1254, 1255], "month": [211, 226, 252, 290, 320, 425, 436, 437, 439, 442, 444, 446, 449, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 748, 749, 750, 751, 752, 753, 754, 795, 796, 808, 848, 853, 871, 922, 1030, 1045, 1046, 1048, 1051, 1053, 1055, 1058, 1066, 1078, 1316, 1340], "month_nam": [446, 449], "monthbegin": [437, 1046], "monthend": [436, 1045], "moos": 928, "more": [20, 40, 45, 49, 51, 59, 89, 90, 119, 122, 123, 124, 125, 126, 127, 128, 137, 138, 139, 140, 144, 145, 146, 147, 150, 151, 153, 158, 160, 165, 174, 176, 187, 189, 193, 202, 222, 223, 230, 236, 241, 253, 254, 256, 267, 277, 278, 282, 285, 287, 306, 320, 324, 333, 370, 394, 475, 479, 487, 508, 538, 551, 555, 558, 559, 599, 600, 641, 650, 666, 675, 693, 695, 696, 718, 729, 741, 757, 763, 766, 773, 775, 778, 779, 788, 798, 804, 808, 834, 837, 838, 844, 862, 881, 886, 888, 897, 922, 926, 928, 930, 972, 995, 998, 1017, 1096, 1097, 1120, 1150, 1163, 1170, 1215, 1228, 1243, 1252, 1270, 1272, 1273, 1295, 1297, 1302, 1316, 1331, 1332, 1342, 1345, 1346, 1347], "more_bi": [243, 266, 320, 653, 808, 880, 922], "more_column": [198, 286, 320, 469, 756, 808, 841, 887, 922, 928], "more_expr": [600, 733, 736, 737, 738, 739, 808], "more_nam": [704, 804], "most": [40, 122, 135, 136, 138, 149, 158, 159, 160, 161, 278, 320, 383, 384, 571, 580, 601, 615, 686, 808, 984, 985, 1175, 1186, 1198, 1263, 1297, 1316, 1328, 1344], "mostli": [272, 320, 475, 808], "move": [245, 255, 320, 417, 465, 466, 467, 468, 622, 624, 628, 635, 808, 1022, 1077, 1078, 1079, 1080, 1204, 1205, 1207, 1211, 1316], "mr": 897, "mssql": [38, 320], "much": [230, 288, 306, 320, 394, 395, 409, 525, 559, 675, 676, 770, 808, 905, 995, 996, 1015, 1137, 1170, 1252, 1253, 1316], "mul": 808, "multi": [8, 40, 135, 136, 282, 320, 469, 665, 808, 1242], "multi_fram": [40, 320], "multicolselector": 179, "multiindexselector": [179, 932], "multipl": [40, 57, 58, 59, 106, 135, 136, 140, 146, 149, 152, 153, 154, 163, 165, 169, 191, 197, 199, 202, 210, 211, 215, 224, 227, 243, 245, 255, 258, 261, 266, 289, 294, 299, 320, 390, 525, 558, 564, 571, 580, 581, 600, 614, 616, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 653, 704, 716, 733, 741, 758, 769, 771, 776, 782, 788, 791, 798, 804, 808, 820, 829, 830, 836, 844, 847, 848, 854, 873, 876, 880, 889, 892, 898, 905, 922, 937, 967, 1076, 1083, 1137, 1157, 1175, 1197, 1199, 1230, 1316, 1329, 1334], "multipli": [558, 621, 622, 624, 626, 628, 630, 633, 635, 637, 708, 808, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1316], "multithread": [266, 320, 653, 733, 808, 880, 922, 967, 1157, 1230, 1316], "must": [40, 69, 123, 124, 135, 139, 147, 150, 151, 154, 155, 189, 198, 211, 226, 227, 237, 245, 252, 253, 320, 410, 550, 559, 574, 607, 614, 615, 620, 681, 737, 749, 750, 798, 808, 834, 841, 848, 853, 854, 858, 863, 871, 878, 897, 922, 926, 1016, 1017, 1191, 1197, 1198, 1258, 1316], "mutual": [253, 320], "my": [151, 155, 320, 323, 1316, 1321], "my_column": 905, "my_column_": [284, 320], "my_column_0": [284, 320], "my_column_1": [284, 320], "my_column_2": [284, 320], "my_custom_aggreg": 770, "my_fil": 141, "my_holidai": [417, 735, 1022], "my_larger_than_ram_fil": [46, 47, 48, 49, 922], "my_long_fil": 149, "my_struct": 790, "mydf": 149, "myrol": 138, "mysql": 138, "n": [1, 12, 13, 17, 25, 37, 44, 46, 52, 53, 54, 55, 66, 68, 131, 135, 136, 140, 145, 149, 165, 183, 199, 205, 211, 213, 223, 224, 229, 230, 254, 255, 256, 263, 268, 271, 274, 276, 291, 303, 305, 314, 320, 336, 364, 369, 378, 380, 385, 388, 389, 390, 394, 395, 409, 413, 417, 419, 421, 427, 448, 460, 466, 472, 475, 483, 489, 512, 520, 526, 528, 538, 539, 543, 546, 548, 550, 552, 601, 604, 613, 633, 634, 637, 638, 641, 644, 650, 655, 671, 675, 676, 679, 680, 685, 686, 688, 689, 694, 696, 711, 715, 716, 717, 721, 722, 724, 742, 751, 752, 753, 754, 760, 762, 780, 783, 784, 785, 786, 789, 793, 797, 799, 808, 827, 846, 848, 849, 857, 877, 882, 884, 890, 902, 904, 913, 922, 928, 966, 971, 979, 990, 995, 996, 1003, 1015, 1018, 1022, 1024, 1026, 1032, 1057, 1069, 1078, 1083, 1084, 1092, 1099, 1124, 1132, 1138, 1140, 1150, 1151, 1155, 1160, 1162, 1186, 1210, 1212, 1215, 1221, 1228, 1232, 1248, 1252, 1253, 1256, 1257, 1262, 1263, 1271, 1273, 1288, 1294, 1301, 1305, 1306, 1316, 1328, 1329, 1336, 1339, 1340, 1342, 1344, 1347], "n0": [369, 550], "n00": [971, 1162], "n01": [971, 1162], "n02": [971, 1162], "n1": [369, 550], "n2": [1, 369], "n3": 1, "n_1": [475, 808], "n_2": [475, 808], "n_3": [475, 808], "n_bar": 1333, "n_bit": 1339, "n_byte": [378, 394, 395, 675, 676, 1339], "n_char": [394, 395, 675, 676, 1339], "n_chunk": [320, 937, 1083, 1194, 1316], "n_elem": 1334, "n_even": 928, "n_field_strategi": [550, 1162], "n_film": 1325, "n_foo_uniqu": 1333, "n_kilobyt": 378, "n_row": [133, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 224, 320, 922], "n_thread": [135, 136], "n_uniqu": [320, 336, 808, 1316], "na": [279, 320, 687, 1298, 1316], "naiv": [421, 422, 696, 1026, 1027, 1273], "name": [1, 18, 22, 24, 32, 35, 37, 38, 40, 46, 52, 53, 54, 55, 59, 81, 98, 122, 124, 125, 126, 127, 128, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 160, 161, 162, 163, 165, 168, 169, 170, 181, 182, 185, 186, 191, 192, 193, 194, 198, 202, 203, 206, 207, 209, 210, 221, 222, 223, 225, 226, 227, 230, 232, 234, 236, 237, 239, 243, 245, 249, 253, 254, 255, 257, 258, 259, 266, 267, 270, 273, 275, 277, 278, 281, 282, 283, 284, 285, 286, 287, 288, 289, 294, 295, 296, 297, 298, 299, 305, 320, 324, 331, 369, 373, 374, 376, 379, 390, 399, 410, 446, 449, 469, 475, 496, 503, 504, 505, 506, 550, 559, 564, 568, 570, 572, 576, 600, 607, 617, 653, 666, 667, 679, 680, 681, 704, 706, 708, 716, 721, 725, 726, 727, 728, 729, 731, 732, 733, 736, 737, 738, 739, 740, 741, 742, 743, 746, 747, 756, 757, 762, 763, 766, 771, 772, 773, 774, 775, 776, 777, 778, 781, 784, 785, 786, 787, 789, 790, 791, 792, 793, 797, 798, 804, 808, 824, 826, 831, 832, 836, 837, 838, 841, 844, 847, 852, 853, 854, 862, 863, 869, 872, 873, 874, 880, 881, 885, 886, 887, 888, 889, 892, 893, 894, 895, 896, 898, 904, 922, 926, 927, 928, 934, 971, 1003, 1016, 1055, 1058, 1075, 1162, 1191, 1196, 1242, 1243, 1244, 1256, 1257, 1281, 1284, 1292, 1293, 1298, 1305, 1316, 1321, 1326, 1327, 1328, 1329, 1330, 1331, 1343, 1344, 1347], "name_gener": [284, 320], "named_agg": [299, 898], "named_bi": [210, 320, 847, 922], "named_expr": [258, 259, 294, 295, 320, 708, 786, 790, 873, 874, 892, 893, 922], "named_fram": [1329, 1344], "nameless": 127, "namespac": [1, 137, 319, 320, 323, 704, 787, 807, 820, 920, 921, 1316, 1321, 1347], "nan": [127, 165, 178, 193, 200, 278, 279, 320, 415, 416, 463, 464, 473, 484, 486, 494, 503, 504, 505, 506, 510, 557, 560, 578, 592, 593, 594, 595, 621, 647, 717, 740, 808, 837, 842, 922, 940, 944, 1020, 1021, 1085, 1113, 1114, 1179, 1180, 1203, 1225, 1297, 1298, 1316, 1347], "nan_as_nul": 178, "nan_max": [808, 1316], "nan_min": [808, 1316], "nan_to_nul": [127, 320, 922, 1316], "nana": 1339, "nanmax": [592, 593, 808, 1179, 1180, 1316], "nanosecond": [82, 211, 226, 252, 290, 320, 439, 444, 445, 455, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 752, 753, 754, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1054, 1064, 1066, 1078, 1316, 1340], "nansum": [621, 808, 1203, 1316], "nativ": [10, 38, 135, 137, 140, 141, 143, 147, 223, 230, 254, 255, 274, 278, 306, 320, 559, 770, 787, 808, 814, 881, 905, 922, 1170, 1297, 1316, 1320, 1344, 1347], "natur": [555, 808, 1167, 1316, 1332, 1338], "ndarrai": [126, 176, 202, 278, 320, 482, 642, 808, 844, 922, 930, 1091, 1216, 1217, 1297, 1316], "ndjson": [48, 922], "ne": [595, 808, 1182, 1316], "ne_miss": [202, 320, 808, 844, 922, 1074, 1316], "nearest": [53, 189, 226, 247, 312, 320, 398, 478, 494, 608, 630, 631, 781, 808, 834, 853, 868, 911, 922, 1001, 1017, 1090, 1103, 1192, 1208, 1316, 1338], "nearest_pow2": 53, "necessari": [37, 38, 46, 50, 90, 140, 278, 320, 922, 1297, 1316], "need": [59, 92, 101, 129, 135, 136, 138, 147, 149, 152, 154, 174, 211, 252, 255, 264, 320, 323, 550, 620, 645, 679, 680, 681, 697, 754, 780, 783, 799, 808, 848, 871, 922, 1222, 1256, 1257, 1258, 1274, 1316, 1321, 1347], "neg": [13, 65, 66, 67, 68, 135, 136, 141, 143, 147, 156, 213, 229, 252, 263, 265, 271, 297, 320, 364, 543, 544, 604, 605, 620, 644, 651, 671, 683, 694, 808, 871, 877, 879, 895, 896, 922, 928, 966, 1099, 1124, 1155, 1156, 1189, 1221, 1229, 1248, 1260, 1271, 1288, 1316], "negat": [597, 808, 1184, 1316], "neither": [129, 140, 146, 256, 320, 369, 550, 971, 1162], "nest": [50, 129, 132, 166, 167, 197, 320, 820, 1076, 1316, 1344, 1347], "nest_asyncio": 157, "nesting_level": 166, "net": [666, 1243], "netherland": [226, 320, 853, 922], "never": [37, 46, 137, 225, 226, 253, 320, 852, 853, 922], "new": [38, 39, 40, 149, 174, 179, 205, 215, 216, 230, 241, 242, 245, 249, 284, 286, 288, 289, 294, 295, 320, 331, 421, 471, 481, 483, 494, 584, 585, 600, 614, 615, 619, 679, 680, 685, 686, 704, 706, 804, 808, 820, 846, 869, 887, 889, 892, 893, 905, 922, 932, 934, 1026, 1082, 1092, 1183, 1196, 1197, 1198, 1202, 1256, 1257, 1262, 1263, 1281, 1284, 1293, 1316, 1344, 1346], "new_column": [135, 136, 140, 149], "new_dai": 442, "new_dat": 439, "new_df": [289, 320, 889, 922], "new_fil": [35, 37, 41, 42, 45, 320], "new_from_index": 1316, "new_id": [284, 320], "new_lf": [889, 922], "new_tabl": 1346, "new_valu": [744, 745, 758, 782], "new_york": 752, "newli": 51, "newlin": [44, 135, 145, 149, 153, 320], "next": [18, 53, 211, 226, 252, 290, 320, 372, 417, 439, 444, 457, 610, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1022, 1048, 1053, 1066, 1193, 1316], "next_batch": 136, "next_pow2": 53, "nfruit": 694, "nl": [417, 735, 1022], "nnel_id": 129, "no1": 928, "no_default": [206, 320, 614, 615, 681, 808, 1197, 1198, 1258, 1316], "no_optim": [46, 47, 48, 49, 57, 58, 829, 830, 858, 867, 922], "nodataerror": [135, 136, 140, 146, 149], "nodd": [665, 1242], "node": [825, 829, 850, 858, 862, 867, 869, 922], "nodefault": [206, 320, 614, 615, 681, 808, 1197, 1198, 1258, 1316], "non": [4, 5, 37, 39, 40, 46, 51, 66, 67, 127, 156, 181, 188, 224, 236, 252, 258, 259, 263, 283, 284, 287, 289, 294, 295, 320, 372, 389, 390, 394, 399, 403, 404, 417, 443, 480, 496, 550, 558, 559, 565, 600, 601, 614, 615, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 659, 666, 675, 679, 680, 681, 701, 703, 708, 715, 716, 726, 728, 736, 737, 738, 739, 741, 743, 747, 754, 772, 774, 777, 784, 785, 786, 790, 792, 808, 824, 833, 862, 871, 873, 874, 877, 885, 888, 889, 892, 893, 922, 926, 928, 990, 995, 1004, 1009, 1010, 1017, 1022, 1052, 1105, 1162, 1170, 1186, 1197, 1198, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1221, 1236, 1243, 1252, 1256, 1257, 1278, 1280, 1297, 1301, 1316, 1336, 1344], "non_exist": [443, 1052], "non_numer": [37, 46, 320, 922], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 58, 60, 63, 66, 67, 68, 69, 77, 81, 90, 122, 124, 125, 126, 127, 128, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 176, 177, 183, 188, 189, 193, 194, 200, 201, 202, 204, 206, 209, 211, 212, 217, 221, 225, 226, 228, 230, 233, 236, 241, 242, 245, 252, 253, 256, 260, 263, 265, 266, 272, 273, 275, 277, 278, 279, 282, 284, 285, 286, 287, 288, 289, 290, 301, 305, 320, 332, 334, 335, 347, 348, 349, 356, 357, 369, 372, 392, 394, 395, 396, 399, 403, 404, 405, 408, 410, 415, 416, 424, 439, 442, 443, 449, 464, 465, 466, 467, 468, 469, 472, 473, 474, 480, 487, 488, 490, 492, 494, 495, 496, 503, 504, 505, 506, 511, 513, 514, 521, 527, 529, 531, 538, 539, 540, 541, 542, 544, 550, 558, 559, 570, 573, 574, 575, 577, 582, 595, 596, 597, 598, 600, 601, 607, 610, 611, 614, 615, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 644, 645, 646, 647, 651, 652, 656, 657, 659, 661, 662, 663, 666, 669, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 688, 689, 690, 693, 694, 695, 696, 698, 700, 703, 704, 705, 706, 707, 714, 721, 726, 727, 728, 730, 736, 737, 738, 739, 740, 741, 743, 747, 749, 750, 751, 752, 753, 754, 756, 757, 764, 765, 766, 767, 768, 769, 770, 772, 774, 777, 783, 784, 785, 790, 792, 794, 795, 796, 798, 808, 827, 828, 830, 833, 834, 837, 838, 840, 842, 843, 844, 848, 851, 852, 853, 856, 858, 862, 865, 871, 875, 877, 878, 879, 880, 886, 887, 888, 889, 894, 897, 900, 904, 905, 914, 915, 922, 926, 927, 928, 930, 931, 935, 936, 938, 945, 946, 950, 951, 958, 959, 971, 981, 986, 989, 992, 995, 996, 997, 1003, 1004, 1009, 1010, 1016, 1017, 1019, 1020, 1021, 1029, 1036, 1037, 1038, 1042, 1051, 1052, 1058, 1072, 1074, 1077, 1078, 1079, 1080, 1084, 1085, 1086, 1088, 1096, 1098, 1100, 1102, 1103, 1104, 1105, 1115, 1116, 1119, 1120, 1121, 1123, 1125, 1126, 1129, 1133, 1139, 1141, 1143, 1150, 1151, 1152, 1153, 1154, 1156, 1162, 1170, 1171, 1172, 1173, 1174, 1182, 1185, 1191, 1192, 1193, 1197, 1198, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1215, 1216, 1217, 1218, 1221, 1224, 1225, 1228, 1229, 1232, 1233, 1234, 1236, 1238, 1239, 1240, 1243, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1270, 1271, 1272, 1273, 1275, 1277, 1280, 1283, 1291, 1293, 1294, 1295, 1297, 1298, 1299, 1305, 1306, 1316, 1325, 1327, 1328, 1329, 1331, 1334, 1336, 1340, 1344], "nonexist": [443, 1052], "nor": [140, 146, 256, 320], "normal": [39, 132, 211, 320, 462, 508, 650, 721, 808, 848, 922, 1072, 1120, 1228, 1305, 1316], "normalised_scor": 137, "norowsreturnederror": [253, 320], "north": 69, "not_": [294, 320, 808, 892, 922, 928, 1316], "not_c": [294, 320, 892, 922], "notabl": 137, "notat": [11, 40, 320], "note": [4, 10, 20, 39, 40, 45, 50, 51, 58, 65, 66, 68, 82, 89, 90, 122, 123, 124, 126, 128, 129, 135, 137, 138, 139, 140, 144, 145, 146, 149, 150, 151, 153, 155, 158, 160, 163, 165, 169, 171, 174, 178, 185, 187, 189, 190, 193, 200, 202, 211, 212, 221, 222, 223, 225, 226, 230, 241, 244, 245, 249, 252, 253, 254, 255, 260, 263, 267, 274, 277, 279, 282, 284, 285, 287, 289, 290, 294, 296, 297, 320, 364, 377, 392, 394, 395, 396, 399, 407, 408, 412, 415, 416, 422, 436, 437, 439, 444, 449, 457, 466, 473, 479, 481, 488, 496, 503, 504, 522, 525, 543, 550, 559, 573, 574, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 614, 615, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 644, 646, 650, 656, 657, 658, 664, 665, 666, 667, 668, 669, 670, 671, 675, 676, 679, 680, 681, 683, 688, 689, 690, 693, 694, 701, 703, 704, 710, 717, 726, 728, 735, 744, 749, 750, 752, 753, 754, 758, 768, 780, 782, 783, 787, 795, 796, 798, 799, 804, 808, 819, 830, 834, 835, 837, 842, 844, 848, 853, 869, 871, 875, 877, 878, 880, 881, 886, 888, 889, 892, 895, 896, 922, 928, 966, 978, 995, 996, 1004, 1013, 1014, 1017, 1020, 1021, 1027, 1045, 1046, 1048, 1053, 1058, 1066, 1078, 1085, 1098, 1105, 1134, 1137, 1155, 1170, 1197, 1198, 1202, 1209, 1216, 1218, 1221, 1223, 1228, 1233, 1234, 1235, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1252, 1253, 1256, 1257, 1258, 1260, 1265, 1266, 1267, 1270, 1271, 1278, 1280, 1287, 1298, 1300, 1316, 1325, 1326, 1330, 1331, 1342, 1344], "noth": [20, 665, 674, 1242, 1251], "notic": [137, 202, 320, 844, 922, 1316], "notimplementederror": 178, "now": [51, 140, 252, 278, 320, 567, 871, 922, 1297, 1316], "np": [126, 176, 202, 278, 320, 482, 558, 642, 808, 844, 922, 930, 1091, 1108, 1111, 1113, 1114, 1216, 1217, 1316], "npt": [176, 930], "nr": [303, 314, 902, 913], "nth": [205, 320, 483, 686, 804, 808, 846, 922, 1092, 1263, 1316], "nthe": [665, 1242], "nthose": [665, 1242], "nu": 662, "null": [16, 37, 39, 45, 46, 49, 51, 59, 66, 124, 125, 128, 132, 135, 136, 145, 147, 149, 153, 154, 155, 162, 165, 169, 178, 181, 182, 183, 188, 189, 193, 194, 196, 201, 202, 204, 217, 225, 233, 234, 235, 242, 245, 247, 263, 266, 268, 269, 270, 273, 278, 279, 283, 286, 289, 291, 294, 301, 320, 332, 334, 335, 345, 348, 349, 356, 357, 364, 365, 372, 374, 377, 389, 390, 391, 392, 394, 395, 396, 399, 403, 404, 405, 408, 413, 415, 416, 439, 442, 443, 450, 451, 452, 453, 454, 455, 456, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 480, 487, 492, 494, 495, 503, 504, 505, 506, 511, 513, 514, 520, 521, 524, 525, 527, 529, 530, 531, 539, 540, 541, 542, 543, 545, 550, 558, 559, 582, 595, 596, 597, 598, 601, 611, 615, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 644, 645, 647, 652, 653, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 669, 671, 672, 673, 674, 675, 676, 677, 678, 683, 685, 686, 687, 693, 694, 696, 698, 703, 704, 705, 706, 707, 714, 715, 716, 725, 726, 727, 728, 733, 736, 737, 738, 739, 741, 743, 747, 751, 756, 767, 768, 772, 774, 777, 784, 785, 790, 792, 798, 808, 824, 827, 833, 834, 837, 838, 843, 844, 851, 852, 865, 877, 880, 885, 887, 889, 892, 894, 900, 922, 928, 935, 936, 947, 950, 951, 958, 959, 966, 967, 975, 978, 990, 991, 992, 995, 996, 997, 1003, 1004, 1009, 1010, 1018, 1020, 1021, 1051, 1052, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1074, 1075, 1077, 1078, 1079, 1080, 1084, 1086, 1087, 1096, 1097, 1102, 1103, 1104, 1115, 1116, 1117, 1123, 1125, 1126, 1129, 1132, 1133, 1136, 1137, 1139, 1141, 1142, 1143, 1152, 1154, 1155, 1157, 1162, 1170, 1182, 1185, 1186, 1198, 1201, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1221, 1225, 1230, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1260, 1262, 1263, 1264, 1270, 1271, 1273, 1275, 1280, 1283, 1294, 1297, 1298, 1299, 1301, 1316, 1328, 1332, 1334, 1336, 1340, 1342, 1344, 1345, 1347], "null_behavior": [413, 520, 808, 1018, 1132, 1316], "null_count": [45, 49, 189, 194, 320, 409, 808, 834, 922, 1015, 1017, 1316], "null_equ": [196, 320, 1075, 1316], "null_on_oob": [356, 525, 527, 958, 1137, 1139], "null_prob": [162, 165, 169], "null_valu": [37, 46, 135, 136, 149, 320, 922], "nullabl": [39, 320], "nullbehavior": [413, 520, 808, 1018, 1132, 1316], "nullif": 1337, "nulls_last": [266, 320, 345, 365, 545, 652, 653, 733, 808, 880, 922, 947, 967, 1117, 1157, 1230, 1316], "num": [13, 40, 281, 320, 496, 808, 1105, 1316], "num_row": 178, "number": [10, 11, 12, 13, 14, 17, 25, 37, 38, 40, 41, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 82, 90, 111, 122, 124, 125, 126, 128, 131, 132, 135, 136, 137, 138, 140, 144, 145, 146, 147, 149, 152, 153, 154, 156, 163, 165, 168, 170, 171, 172, 181, 183, 188, 197, 198, 200, 201, 209, 213, 214, 223, 224, 229, 240, 241, 252, 256, 263, 268, 271, 283, 288, 291, 293, 301, 303, 305, 314, 320, 346, 362, 364, 369, 372, 381, 382, 383, 384, 386, 387, 389, 390, 395, 403, 409, 410, 413, 417, 420, 428, 430, 432, 434, 435, 445, 458, 459, 461, 465, 466, 467, 468, 472, 473, 474, 480, 489, 503, 504, 511, 512, 520, 528, 531, 536, 538, 543, 546, 548, 550, 552, 600, 604, 607, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 640, 641, 644, 646, 655, 671, 673, 675, 676, 679, 683, 685, 686, 694, 697, 711, 715, 716, 722, 735, 740, 741, 742, 754, 762, 767, 784, 785, 789, 793, 797, 808, 824, 827, 833, 841, 842, 843, 849, 857, 867, 877, 882, 884, 885, 890, 891, 900, 902, 904, 913, 922, 927, 964, 966, 971, 982, 983, 984, 985, 987, 988, 990, 996, 1003, 1009, 1015, 1016, 1018, 1022, 1025, 1033, 1035, 1040, 1043, 1044, 1054, 1067, 1068, 1070, 1076, 1077, 1078, 1079, 1080, 1084, 1085, 1086, 1099, 1123, 1124, 1132, 1140, 1143, 1148, 1150, 1155, 1160, 1162, 1176, 1177, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1221, 1224, 1232, 1248, 1250, 1252, 1253, 1256, 1260, 1262, 1263, 1271, 1274, 1288, 1301, 1306, 1316, 1332, 1335, 1338, 1347], "number_of_two": [353, 519], "numbers_decim": 697, "numer": [10, 16, 37, 40, 46, 139, 150, 182, 191, 226, 278, 279, 287, 288, 320, 329, 377, 391, 399, 479, 496, 555, 579, 581, 605, 613, 645, 647, 667, 703, 709, 717, 808, 820, 826, 836, 853, 888, 922, 928, 978, 991, 1004, 1017, 1105, 1222, 1225, 1244, 1280, 1297, 1316, 1338, 1347], "numeric_dtyp": 1347, "numericliter": [399, 808, 1004, 1316], "numpi": [96, 126, 157, 176, 187, 223, 254, 255, 274, 278, 279, 320, 558, 592, 593, 621, 808, 922, 930, 1108, 1111, 1113, 1114, 1179, 1180, 1203, 1297, 1298, 1316], "nworld": 688, "o": [141, 152, 378, 389, 390, 409, 664, 715, 716, 808, 979, 990, 1015, 1241, 1265, 1301, 1316, 1329], "oauth": 151, "obj": 928, "object": [35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 81, 99, 123, 124, 129, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 163, 165, 166, 177, 178, 185, 190, 210, 211, 226, 228, 243, 252, 255, 260, 267, 277, 278, 279, 320, 412, 573, 749, 750, 752, 753, 768, 787, 795, 796, 808, 820, 829, 835, 848, 853, 856, 871, 881, 919, 922, 928, 931, 1291, 1316, 1326, 1328, 1331, 1344, 1346], "observ": [225, 320, 410, 465, 466, 467, 468, 607, 808, 852, 922, 1016, 1077, 1078, 1079, 1080, 1191, 1316], "obtain": 550, "obvious": 706, "occur": [40, 57, 58, 97, 106, 112, 227, 320, 353, 519, 580, 610, 808, 829, 830, 840, 854, 867, 878, 922, 955, 1131, 1175, 1193, 1297, 1316], "occurr": [490, 492, 499, 502, 721, 808, 1100, 1102, 1109, 1112, 1305, 1316], "oct": 1339, "octet_length": 1337, "octob": [449, 1058, 1339], "od": [146, 820], "odbc": [38, 137, 320], "odd": 665, "odi": [668, 670, 1247], "off": [46, 47, 48, 49, 57, 58, 135, 136, 149, 225, 226, 320, 417, 735, 829, 830, 840, 852, 853, 858, 867, 922, 1022], "offer": [244, 320, 604, 808, 866, 922, 1340, 1344], "offic": [40, 320], "offset": [68, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 205, 211, 252, 265, 296, 297, 320, 417, 418, 426, 436, 437, 439, 444, 457, 483, 526, 544, 620, 651, 669, 670, 683, 696, 808, 846, 848, 871, 879, 895, 896, 922, 1022, 1023, 1031, 1045, 1046, 1048, 1053, 1066, 1092, 1138, 1156, 1229, 1246, 1247, 1260, 1273, 1316, 1343], "offset_bi": 754, "often": [138, 174, 211, 252, 320, 353, 519, 613, 620, 808, 848, 871, 922, 955, 1131, 1331, 1344], "ok": 550, "old": [39, 249, 320, 614, 615, 808, 869, 922, 1197, 1198, 1316], "old_tabl": 1346, "older": [45, 49, 320, 922], "oldw": 689, "omit": [27, 125, 129, 140, 146, 163, 174, 241, 255, 277, 282, 320, 749, 752, 764, 765, 795, 796, 928, 1345], "onc": [135, 136, 171, 230, 254, 256, 299, 320, 538, 558, 559, 641, 691, 692, 808, 825, 898, 922, 1150, 1170, 1215, 1268, 1269, 1316, 1329], "one": [20, 37, 38, 40, 46, 51, 103, 122, 124, 125, 126, 127, 128, 135, 136, 140, 144, 145, 146, 149, 153, 168, 170, 174, 182, 190, 193, 201, 202, 209, 210, 211, 223, 227, 228, 236, 245, 252, 253, 254, 260, 261, 263, 278, 281, 287, 300, 320, 330, 364, 410, 412, 474, 475, 479, 482, 485, 487, 543, 550, 555, 573, 583, 584, 586, 588, 590, 591, 600, 619, 620, 644, 652, 665, 666, 667, 681, 704, 749, 752, 770, 788, 798, 804, 808, 826, 835, 837, 838, 843, 844, 847, 848, 854, 862, 871, 875, 876, 877, 888, 894, 899, 922, 937, 966, 971, 1016, 1086, 1096, 1097, 1155, 1162, 1167, 1191, 1202, 1221, 1242, 1243, 1244, 1258, 1281, 1297, 1316, 1331, 1332, 1334, 1338, 1346], "one_to_mani": [225, 320, 852, 922], "one_to_on": [225, 320, 852, 922], "oneormoredatatyp": [40, 163, 320], "ones": [623, 625, 627, 629, 631, 634, 636, 638, 808, 928], "onf": [683, 1260], "onli": [1, 5, 10, 13, 20, 30, 37, 38, 40, 46, 50, 51, 56, 59, 90, 135, 136, 137, 140, 141, 143, 145, 147, 149, 152, 153, 154, 155, 158, 159, 160, 161, 165, 169, 174, 193, 194, 199, 211, 212, 223, 226, 227, 230, 245, 252, 254, 255, 274, 276, 277, 278, 289, 290, 306, 320, 330, 332, 334, 346, 398, 399, 412, 417, 439, 447, 449, 469, 478, 488, 558, 559, 566, 567, 583, 584, 585, 586, 587, 588, 589, 590, 591, 600, 612, 658, 668, 670, 681, 719, 735, 770, 808, 832, 835, 837, 838, 839, 848, 853, 854, 871, 872, 889, 891, 905, 922, 926, 928, 935, 936, 937, 1001, 1004, 1022, 1048, 1058, 1083, 1090, 1098, 1170, 1195, 1235, 1245, 1247, 1258, 1291, 1294, 1297, 1316, 1325, 1328, 1344, 1345, 1347], "onlin": [199, 320, 1083, 1316], "ont": [668, 670, 1245, 1247], "onto": 165, "oof": [682, 1259, 1334, 1339], "op": [20, 135, 136, 169, 249, 320, 566, 613, 808, 856, 869, 922, 1316], "opac": [320, 323, 1316, 1321], "opaqu": 905, "open": [40, 133, 135, 136, 137, 140, 141, 142, 143, 144, 145, 146, 147, 148, 190, 320, 412, 808, 835, 922], "openoffic": 146, "openpyxl": [140, 157], "oper": [4, 40, 50, 59, 90, 99, 102, 109, 116, 122, 124, 125, 126, 127, 128, 135, 137, 184, 199, 202, 204, 210, 216, 228, 230, 237, 241, 243, 244, 245, 248, 250, 252, 255, 256, 261, 263, 272, 278, 279, 284, 287, 288, 298, 299, 320, 329, 330, 333, 364, 404, 405, 406, 407, 408, 409, 463, 464, 479, 481, 484, 486, 510, 538, 539, 540, 541, 542, 543, 550, 557, 576, 579, 581, 582, 583, 584, 586, 588, 590, 591, 594, 595, 596, 599, 600, 605, 612, 641, 644, 709, 717, 724, 725, 727, 738, 739, 743, 755, 787, 798, 808, 820, 828, 832, 834, 839, 844, 847, 852, 862, 863, 872, 876, 877, 881, 888, 891, 898, 922, 926, 966, 1005, 1010, 1011, 1012, 1013, 1014, 1015, 1073, 1074, 1083, 1093, 1095, 1122, 1150, 1151, 1152, 1153, 1154, 1155, 1169, 1181, 1182, 1195, 1215, 1221, 1256, 1291, 1296, 1297, 1298, 1316, 1335, 1343, 1344], "operand": [717, 808], "opp": 928, "oppos": 735, "opposit": [263, 320, 364, 543, 644, 808, 877, 922, 966, 1155, 1221, 1316], "opt": [282, 320], "optim": [46, 47, 48, 49, 57, 58, 147, 149, 152, 153, 154, 223, 228, 244, 248, 254, 285, 320, 825, 829, 830, 840, 858, 867, 878, 886, 895, 896, 905, 922, 1000, 1216, 1316], "optimis": [137, 230, 255, 306, 320, 922, 1170, 1218, 1316, 1347], "optimist": 14, "option": [2, 3, 4, 5, 6, 7, 30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 51, 67, 69, 135, 137, 138, 139, 140, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 155, 157, 162, 163, 164, 165, 168, 169, 170, 190, 206, 211, 221, 226, 236, 260, 267, 273, 284, 287, 289, 320, 377, 412, 417, 508, 566, 567, 573, 600, 621, 622, 624, 626, 628, 630, 633, 635, 637, 650, 658, 668, 670, 681, 683, 721, 790, 798, 808, 820, 829, 835, 848, 852, 853, 862, 875, 881, 888, 889, 897, 922, 928, 978, 1022, 1120, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1228, 1235, 1245, 1247, 1258, 1260, 1293, 1305, 1316, 1334, 1339], "optional_memb": [500, 808, 1110, 1316], "or_": 808, "oracl": 138, "orang": [186, 301, 302, 304, 305, 307, 308, 310, 312, 313, 320, 390, 716, 808, 900, 901, 903, 904, 906, 907, 909, 911, 912, 1339], "order": [10, 40, 46, 47, 48, 49, 51, 57, 63, 125, 135, 137, 156, 158, 159, 160, 161, 181, 185, 186, 193, 194, 195, 202, 210, 211, 225, 227, 243, 244, 245, 252, 254, 256, 257, 261, 266, 277, 278, 283, 285, 290, 320, 345, 365, 370, 389, 390, 415, 416, 475, 521, 538, 545, 551, 600, 605, 610, 620, 641, 642, 643, 652, 653, 682, 689, 690, 691, 692, 706, 715, 716, 718, 719, 721, 733, 787, 798, 808, 819, 824, 832, 837, 838, 839, 844, 847, 848, 852, 854, 862, 871, 872, 876, 880, 881, 885, 886, 922, 927, 928, 947, 967, 972, 990, 999, 1020, 1021, 1087, 1117, 1133, 1150, 1157, 1163, 1189, 1193, 1200, 1215, 1217, 1219, 1230, 1259, 1284, 1301, 1302, 1303, 1305, 1316, 1325, 1328, 1334, 1343, 1344, 1347], "order_bi": [600, 808], "ordin": [440, 610, 808, 1049, 1193, 1316, 1345], "ordinal_dai": [425, 459], "org": [20, 41, 42, 123, 137, 138, 141, 143, 176, 177, 178, 187, 320, 574, 878, 922, 930, 931], "orient": [52, 54, 97, 126, 128, 241, 320, 922, 1325], "origin": [51, 135, 136, 149, 193, 194, 202, 285, 320, 415, 416, 443, 444, 457, 475, 521, 559, 583, 600, 612, 613, 614, 615, 616, 618, 659, 665, 674, 731, 732, 808, 837, 838, 844, 886, 922, 1020, 1021, 1052, 1053, 1066, 1087, 1133, 1197, 1198, 1199, 1201, 1236, 1242, 1251, 1316], "orld": 1266, "other": [1, 20, 36, 40, 45, 58, 134, 135, 136, 137, 140, 149, 154, 158, 159, 160, 161, 194, 196, 199, 202, 225, 226, 227, 236, 237, 245, 253, 255, 258, 259, 282, 287, 289, 292, 294, 295, 318, 320, 323, 329, 333, 335, 345, 346, 399, 414, 449, 463, 464, 475, 479, 484, 486, 496, 500, 510, 517, 539, 540, 541, 542, 557, 563, 569, 579, 581, 594, 595, 599, 614, 615, 646, 653, 681, 708, 709, 714, 717, 724, 726, 728, 733, 736, 737, 738, 739, 747, 754, 772, 774, 777, 786, 790, 792, 808, 820, 830, 844, 852, 853, 854, 862, 863, 873, 874, 888, 889, 892, 893, 894, 922, 928, 937, 1004, 1019, 1058, 1073, 1074, 1075, 1083, 1093, 1095, 1110, 1122, 1129, 1151, 1152, 1153, 1154, 1169, 1181, 1182, 1197, 1198, 1299, 1307, 1315, 1316, 1321, 1331, 1344], "other_df": [225, 320], "other_lf": [852, 922], "otherwis": [38, 137, 140, 147, 152, 164, 167, 171, 206, 230, 237, 255, 258, 277, 282, 306, 320, 369, 374, 395, 399, 410, 465, 466, 467, 468, 550, 559, 570, 600, 604, 605, 607, 612, 647, 657, 660, 664, 669, 671, 676, 679, 680, 683, 694, 721, 725, 754, 757, 766, 770, 798, 808, 863, 873, 905, 922, 927, 971, 975, 996, 1004, 1016, 1077, 1078, 1079, 1080, 1162, 1170, 1189, 1191, 1195, 1216, 1218, 1225, 1234, 1237, 1241, 1246, 1248, 1253, 1256, 1257, 1260, 1271, 1305, 1316, 1336], "our": 179, "out": [8, 14, 38, 46, 47, 48, 49, 104, 129, 154, 157, 165, 169, 202, 252, 255, 320, 356, 374, 525, 527, 657, 660, 669, 798, 844, 871, 922, 958, 975, 1137, 1139, 1234, 1237, 1246, 1342], "outcom": [600, 808], "outer": [51, 59, 289, 320, 889, 922], "outermost": 50, "outlin": 7, "output": [0, 8, 30, 37, 40, 41, 42, 43, 44, 45, 46, 181, 189, 223, 230, 234, 237, 243, 245, 254, 258, 260, 270, 283, 290, 294, 320, 332, 334, 357, 389, 390, 395, 410, 449, 529, 550, 558, 559, 570, 573, 584, 607, 614, 656, 672, 676, 715, 716, 721, 725, 726, 727, 728, 738, 739, 740, 769, 770, 774, 792, 808, 820, 824, 834, 840, 858, 862, 863, 873, 875, 885, 892, 905, 922, 935, 936, 959, 990, 996, 1016, 1058, 1141, 1170, 1191, 1233, 1249, 1253, 1301, 1305, 1316], "output_path": [574, 878, 922], "outsid": [399, 808, 1004, 1316], "over": [131, 135, 136, 137, 140, 146, 149, 154, 165, 166, 181, 199, 222, 223, 224, 230, 253, 254, 255, 267, 283, 284, 298, 306, 320, 324, 389, 390, 409, 412, 466, 474, 558, 559, 570, 572, 573, 574, 575, 576, 584, 585, 610, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 715, 716, 744, 745, 758, 769, 770, 782, 787, 808, 824, 829, 881, 885, 897, 905, 919, 922, 928, 990, 1015, 1078, 1083, 1170, 1204, 1205, 1207, 1211, 1301, 1316, 1344], "overflow": [391, 407, 408, 698, 710, 808, 826, 922, 991, 1013, 1014, 1275, 1287, 1316], "overhead": [50, 90, 149, 152, 153, 154], "overlap": [659, 666, 668, 670, 1236, 1243, 1245, 1247], "overrid": [1, 40, 122, 124, 125, 126, 127, 128, 135, 137, 138, 140, 144, 145, 146, 153, 162, 163, 169, 171, 320, 922], "overridden": [40, 122, 124, 126, 128, 144, 145, 153, 171, 320, 922], "overview": [320, 808, 820, 922, 1316, 1343, 1347], "overwrit": [14, 38, 39, 122, 124, 125, 126, 128, 132, 135, 136, 144, 145, 149, 153, 178, 289, 320, 331, 708, 808, 889, 922], "overwrite_schema": [39, 320], "ow": 688, "own": [798, 1297, 1316, 1347], "p": [53, 244, 320, 604, 790, 808, 866, 922, 928, 1246, 1248, 1329], "p13dt14h0": 449, "p1dt42": 449, "pa": [39, 122, 155, 320, 787], "pa_tabl": 787, "pacif": [418, 1023], "pack": [241, 320], "packag": [32, 33, 34, 137, 320, 324, 417, 735, 926, 1022], "pad": [677, 678, 703, 1254, 1255, 1280], "pad_end": [678, 1255], "pad_start": [677, 703, 1254, 1280], "page": [45, 49, 141, 147, 152, 154, 320, 808, 820, 922, 1316, 1343], "pair": [122, 124, 125, 126, 128, 144, 145, 153, 249, 320, 869, 922, 1347], "pairwis": [187, 320], "panda": [38, 123, 127, 132, 157, 202, 211, 279, 285, 287, 320, 436, 437, 714, 787, 808, 844, 848, 886, 888, 922, 1045, 1046, 1298, 1299, 1316, 1326, 1328, 1344], "pandas_df": 1344, "pane": [40, 320], "panic": 105, "pap": 1248, "papa": 671, "papai": [671, 1248], "papaya": [671, 683, 694, 1248, 1260, 1271], "parallel": [57, 59, 131, 138, 147, 154, 211, 226, 228, 244, 259, 295, 320, 409, 522, 721, 798, 808, 820, 848, 852, 853, 874, 893, 905, 922, 1015, 1134, 1305, 1316], "parallelis": [230, 306, 320, 1170, 1316], "parallelstrategi": [147, 154], "param": [40, 122, 124, 125, 126, 128, 135, 136, 144, 145, 149, 153, 164, 165, 169, 253, 320, 922], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 66, 67, 68, 69, 77, 81, 91, 97, 106, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 178, 179, 181, 182, 183, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 209, 210, 211, 212, 213, 215, 216, 221, 223, 224, 225, 226, 227, 229, 230, 234, 236, 237, 240, 241, 243, 244, 245, 247, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 266, 267, 268, 270, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 299, 303, 305, 306, 312, 314, 320, 329, 331, 332, 333, 334, 335, 345, 352, 353, 356, 357, 364, 365, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 389, 390, 391, 392, 396, 399, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 417, 419, 421, 422, 427, 439, 442, 443, 444, 445, 446, 448, 449, 457, 460, 462, 463, 464, 465, 466, 467, 468, 469, 472, 473, 474, 475, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 492, 494, 495, 496, 500, 508, 510, 512, 517, 518, 519, 520, 522, 525, 526, 527, 528, 529, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 557, 558, 559, 566, 567, 573, 574, 575, 579, 581, 584, 585, 586, 587, 588, 589, 594, 595, 599, 600, 601, 604, 605, 607, 608, 610, 612, 613, 614, 615, 616, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 646, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 700, 703, 704, 706, 708, 709, 711, 715, 716, 717, 718, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 808, 824, 826, 827, 829, 830, 834, 835, 836, 837, 838, 840, 841, 842, 843, 844, 846, 847, 848, 849, 852, 853, 854, 857, 858, 862, 863, 866, 867, 868, 869, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 892, 893, 894, 895, 896, 897, 898, 902, 904, 905, 911, 913, 922, 926, 927, 928, 932, 934, 935, 936, 937, 947, 954, 955, 958, 959, 966, 967, 971, 972, 974, 975, 976, 977, 978, 980, 990, 991, 992, 997, 1003, 1004, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1022, 1024, 1026, 1027, 1032, 1048, 1051, 1052, 1053, 1054, 1055, 1057, 1058, 1066, 1069, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1085, 1086, 1087, 1091, 1092, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1117, 1120, 1124, 1129, 1130, 1131, 1132, 1134, 1137, 1138, 1139, 1140, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1161, 1162, 1163, 1170, 1182, 1186, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1224, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1255, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1277, 1280, 1281, 1284, 1288, 1291, 1292, 1293, 1294, 1295, 1297, 1298, 1301, 1302, 1305, 1306, 1307, 1316, 1325, 1326, 1327, 1328, 1329, 1331, 1336, 1339, 1344], "parameteris": 137, "parametr": 820, "paramount": [858, 922], "parent": [40, 204, 320], "parenthes": 18, "parquet": [45, 49, 147, 148, 154, 320, 820, 922], "parquetcompress": [45, 320], "pars": [37, 46, 134, 135, 136, 138, 140, 145, 146, 147, 149, 152, 153, 154, 181, 210, 258, 259, 263, 266, 283, 294, 295, 299, 320, 390, 399, 496, 600, 614, 615, 653, 673, 681, 697, 698, 708, 716, 726, 728, 733, 736, 737, 738, 739, 747, 760, 772, 774, 777, 786, 788, 790, 792, 798, 808, 824, 847, 873, 874, 877, 880, 885, 892, 893, 898, 922, 1004, 1105, 1197, 1198, 1221, 1250, 1274, 1275, 1316, 1325], "parseerror": [698, 1275], "parser": [135, 140], "part": [122, 140, 174, 179, 277, 282, 320, 600, 666, 685, 686, 808, 840, 867, 878, 894, 922, 932, 1243, 1262, 1263, 1340], "parti": [558, 808], "partial": [125, 135, 149, 320, 922], "particip": [40, 320], "particular": [135, 141, 143, 181, 197, 283, 320, 389, 390, 715, 716, 808, 824, 885, 922, 990, 1076, 1301, 1316], "partit": [45, 138, 147, 150, 152, 154, 155, 224, 243, 320, 600, 808], "partition_bi": [45, 136, 224, 320, 600, 808], "partition_chunk_size_byt": [45, 320], "partition_col": [45, 138, 320], "partition_df": 136, "partition_num": 138, "partition_on": 138, "partition_rang": 138, "partitioned_object": [45, 320], "pass": [32, 33, 34, 36, 38, 39, 40, 45, 51, 97, 124, 132, 134, 137, 138, 140, 147, 149, 152, 155, 158, 160, 163, 165, 167, 169, 181, 187, 191, 210, 211, 213, 226, 229, 243, 244, 245, 249, 252, 258, 263, 266, 271, 279, 282, 283, 290, 294, 299, 320, 364, 390, 417, 427, 439, 443, 449, 472, 493, 543, 558, 559, 574, 600, 604, 614, 615, 620, 644, 653, 681, 688, 689, 690, 716, 725, 733, 735, 760, 790, 798, 804, 808, 824, 836, 847, 848, 850, 853, 858, 866, 869, 871, 873, 877, 878, 880, 885, 892, 897, 898, 905, 922, 926, 927, 966, 1022, 1032, 1052, 1058, 1084, 1099, 1124, 1155, 1170, 1197, 1198, 1221, 1258, 1265, 1266, 1267, 1288, 1298, 1316, 1329, 1344], "pass_nam": [559, 808], "pass_name_to_appli": [808, 926], "password": [135, 138, 141, 143], "past": [36, 320, 858, 922], "pat": [669, 1246], "patch": 69, "path": [3, 6, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 133, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 190, 260, 320, 412, 573, 574, 577, 643, 808, 835, 875, 878, 922, 926, 1219, 1251, 1316, 1347], "pathlib": [35, 37, 41, 42, 45, 149, 320], "pattern": [59, 93, 135, 136, 140, 149, 152, 153, 154, 223, 320, 392, 396, 568, 657, 658, 659, 662, 665, 666, 667, 668, 669, 670, 679, 680, 681, 687, 905, 928, 992, 997, 1216, 1218, 1234, 1235, 1236, 1239, 1242, 1243, 1244, 1245, 1246, 1247, 1256, 1257, 1258, 1264, 1316, 1339], "paya": 694, "pct": 165, "pct_chang": [808, 1316], "pd": [123, 127, 714, 787, 808, 1298, 1299, 1316, 1326, 1344], "pd_df": 127, "pd_frame": 787, "pd_seri": 127, "pdsh": [131, 136], "pea": 671, "peak": [254, 320, 602, 603, 808, 1187, 1188, 1316], "peak_max": [808, 1316], "peak_min": [808, 1316], "pear": [671, 683, 694, 1248, 1260, 1271], "pearson": [187, 320, 508, 650, 740, 808, 1120, 1228, 1316], "penalti": [693, 695, 696, 1270, 1272, 1273], "per": [14, 37, 40, 46, 140, 163, 165, 181, 209, 241, 242, 245, 259, 266, 283, 295, 309, 311, 312, 320, 356, 390, 522, 525, 527, 558, 559, 583, 584, 586, 588, 590, 591, 653, 716, 721, 733, 808, 824, 874, 880, 885, 893, 908, 910, 911, 922, 926, 958, 1134, 1137, 1139, 1305, 1316], "percent": [601, 808, 1186, 1316], "percentag": [162, 165, 169, 601, 808, 1186, 1316], "percentil": [189, 320, 834, 922, 1017, 1316], "perform": [38, 45, 47, 49, 51, 95, 100, 102, 107, 109, 116, 123, 135, 136, 137, 141, 145, 147, 149, 152, 153, 154, 178, 202, 210, 211, 225, 226, 227, 230, 248, 252, 254, 255, 278, 306, 320, 380, 385, 388, 394, 395, 479, 550, 558, 559, 600, 620, 658, 668, 670, 675, 676, 681, 693, 695, 696, 808, 844, 848, 852, 853, 854, 871, 880, 895, 896, 922, 981, 986, 989, 995, 996, 1170, 1235, 1245, 1247, 1252, 1253, 1258, 1270, 1272, 1273, 1297, 1316], "perhap": [284, 320], "period": [135, 136, 149, 211, 252, 320, 444, 457, 465, 467, 468, 601, 620, 749, 750, 752, 753, 795, 796, 808, 848, 871, 922, 1053, 1066, 1077, 1079, 1080, 1186, 1316], "persist": 1331, "phase": [38, 288, 320], "philadelphia": [679, 680], "phone": [701, 1278], "physic": [50, 63, 90, 135, 136, 226, 245, 320, 714, 808, 825, 852, 853, 922, 998, 1299, 1316], "pi": [10, 411, 808, 1006, 1008, 1226, 1289, 1316, 1337, 1341], "pick": [166, 798], "pickl": [412, 808, 835, 922], "pip": [417, 735, 1022], "pipe": [320, 808, 922], "pipelin": [140, 282, 320], "pitfal": 107, "pivot": [288, 320, 928], "pivot_long": [287, 320, 888, 922], "pivot_wid": [245, 320], "pivotagg": [245, 320], "pixel": [40, 320], "pk": [462, 808, 1072, 1316], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 77, 81, 89, 90, 94, 97, 98, 99, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 149, 150, 151, 154, 155, 157, 158, 159, 160, 161, 162, 163, 164, 165, 169, 171, 174, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 808, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 927, 928, 932, 933, 934, 935, 936, 937, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1089, 1090, 1091, 1092, 1094, 1096, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1316, 1321, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1345, 1347], "pl_frame": 787, "place": [10, 11, 37, 46, 174, 192, 199, 215, 216, 245, 250, 255, 266, 292, 320, 324, 345, 357, 365, 529, 545, 652, 653, 733, 808, 880, 922, 937, 947, 959, 967, 1083, 1141, 1157, 1194, 1230, 1316], "placehold": 759, "plai": [12, 739], "plain": [840, 922], "plan": [226, 228, 320, 412, 808, 825, 829, 835, 840, 852, 853, 875, 878, 922, 1346], "plane": [731, 732], "platform": 157, "ple": 1339, "pleas": [127, 137, 138, 202, 211, 236, 320, 324, 466, 741, 754, 808, 844, 848, 862, 922, 1078, 1316], "plenti": 928, "plot": [320, 867, 878, 922, 1316], "plu": [410, 555, 808, 1016, 1167, 1191, 1316, 1338], "plugin": [0, 808, 820], "plugin_path": 926, "point": [10, 11, 31, 32, 33, 34, 37, 40, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 70, 71, 72, 132, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 193, 200, 211, 227, 228, 267, 277, 282, 288, 289, 320, 323, 324, 398, 409, 410, 415, 444, 445, 473, 478, 479, 490, 503, 504, 538, 559, 607, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 737, 784, 785, 808, 829, 830, 837, 840, 842, 848, 854, 858, 869, 881, 889, 922, 999, 1001, 1015, 1016, 1020, 1053, 1054, 1085, 1090, 1100, 1150, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1295, 1300, 1316, 1321, 1344], "poison": [592, 593, 808, 1179, 1180, 1316], "pola": 320, "polar": [1, 320, 323, 324, 807, 808, 814, 820, 922, 926, 927, 928, 1316, 1320, 1321, 1343, 1344, 1346], "polars_df": 1344, "polars_file_cache_ttl": [145, 149, 152, 153], "polars_hypothesis_profil": [168, 170], "polars_max_thread": 171, "polars_seri": 1344, "polars_verbos": [829, 922], "polarsdatafram": 178, "polarsdataset": [282, 320], "polarsdatatyp": [60, 77, 135, 136, 149, 162, 163, 164, 165, 166, 169, 182, 230, 277, 282, 320, 377, 391, 469, 558, 559, 614, 615, 673, 756, 768, 769, 770, 780, 783, 799, 804, 808, 826, 922, 928, 978, 991, 1170, 1197, 1198, 1250, 1316], "polarsintegertyp": [730, 764, 765], "polarstemporaltyp": [693, 1270], "polarstyp": 59, "pool": [14, 58, 171, 172, 830, 922], "poor": 137, "pop2": [226, 320, 853, 922], "popul": [226, 320, 853, 922], "port": [38, 135, 137, 138, 141, 143, 320], "portion": 1339, "pos_a": 1339, "posit": [40, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 179, 191, 198, 210, 243, 258, 259, 263, 266, 286, 294, 295, 299, 320, 364, 465, 467, 468, 469, 543, 600, 605, 607, 644, 653, 667, 679, 680, 698, 708, 731, 732, 733, 736, 737, 738, 739, 756, 786, 790, 804, 808, 836, 841, 847, 873, 874, 877, 880, 887, 892, 893, 898, 922, 928, 966, 1077, 1079, 1080, 1155, 1189, 1191, 1221, 1244, 1275, 1316, 1345], "position": 1316, "possibl": [40, 45, 49, 97, 99, 124, 125, 128, 135, 140, 162, 165, 169, 210, 223, 230, 254, 285, 306, 320, 556, 559, 570, 621, 686, 720, 808, 829, 847, 880, 886, 922, 1170, 1203, 1263, 1316], "post": [51, 69], "postgresql": [38, 137, 138, 320, 600, 808, 1342], "potenti": [107, 109, 140, 149, 152, 153, 223, 253, 255, 320, 583, 679, 680, 832, 834, 839, 872, 891, 922, 926, 1256, 1257], "pow": [808, 1316, 1337], "pow_n": 53, "power": [788, 1189, 1316, 1338], "powersofn": 53, "pre": [550, 559, 607, 780, 783, 799, 808, 1191, 1316], "preced": [165, 928], "precis": [10, 11, 37, 40, 46, 67, 137, 223, 254, 255, 274, 277, 282, 320, 419, 697, 922, 928, 1024, 1274], "predefin": [245, 320], "predic": [39, 46, 47, 48, 49, 57, 58, 149, 152, 153, 154, 155, 182, 202, 221, 227, 253, 320, 391, 475, 723, 758, 798, 808, 829, 830, 840, 844, 854, 858, 867, 869, 878, 895, 896, 922, 1087, 1216, 1218, 1316], "predicate_pushdown": [46, 47, 48, 49, 57, 58, 829, 830, 840, 858, 867, 878, 922], "predict": [248, 290, 320], "prefer": [135, 136, 140, 149, 170, 181, 199, 223, 230, 253, 254, 283, 306, 320, 389, 390, 469, 559, 715, 716, 808, 824, 885, 922, 990, 1083, 1170, 1301, 1316, 1326, 1347], "prefilt": 154, "prefix": [39, 135, 136, 149, 174, 320, 331, 379, 396, 449, 568, 584, 587, 588, 590, 591, 687, 690, 691, 703, 808, 928, 980, 997, 1264, 1268, 1280], "prefix_": 587, "prefix_a": 587, "prefix_b": 587, "prefix_field": [585, 589], "presenc": [757, 766, 928], "present": [125, 165, 206, 320, 500, 574, 689, 690, 808, 878, 922], "preserv": [193, 194, 202, 210, 225, 227, 230, 278, 279, 320, 415, 416, 417, 436, 437, 475, 521, 600, 614, 647, 664, 808, 837, 838, 844, 852, 854, 922, 1020, 1021, 1022, 1087, 1133, 1197, 1225, 1241, 1298, 1316], "pressur": [49, 135, 136, 145, 147, 149, 153, 154, 645, 808, 922, 1222, 1316], "presum": [558, 808], "prev_pow2": 53, "prevent": [278, 320, 331, 407, 408, 583, 710, 808, 922, 1013, 1014, 1287, 1316], "preview": [209, 320], "previou": [53, 174, 320, 323, 417, 583, 584, 586, 588, 590, 591, 601, 706, 808, 1022, 1186, 1316, 1321], "previous": [2, 3], "price": [320, 323, 1347], "primari": [140, 1344, 1347], "primarili": 1, "primit": [39, 320, 500, 808], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 136, 157, 158, 160, 195, 209, 210, 224, 228, 276, 298, 320, 493, 575, 749, 752, 808, 829, 850, 922, 928, 1110, 1294, 1316, 1347], "prior": [127, 320, 323, 1316, 1321], "prioriti": 166, "probabl": [462, 607, 808, 1072, 1191, 1316], "process": [14, 37, 46, 47, 48, 49, 57, 58, 135, 136, 137, 149, 171, 254, 320, 829, 830, 922], "process_index": [277, 320], "produc": [2, 3, 165, 169, 182, 225, 320, 353, 391, 519, 570, 769, 808, 852, 858, 922, 955, 1131], "product": [51, 187, 225, 320, 407, 414, 808, 852, 922, 1013, 1019, 1316], "profil": [32, 168, 170, 829, 922], "profile_nam": 32, "programmat": [189, 320, 834, 922], "progress": [67, 69, 72], "project": [46, 47, 48, 49, 57, 58, 149, 151, 152, 153, 154, 652, 653, 808, 829, 830, 840, 858, 867, 869, 878, 922], "projection_pushdown": [46, 47, 48, 49, 57, 58, 829, 830, 840, 858, 867, 878, 922], "prompt": 129, "propag": [357, 464, 529, 592, 593, 595, 656, 672, 738, 739, 808, 959, 1074, 1141, 1179, 1180, 1182, 1233, 1249, 1316], "propagate_nan": 740, "proper": [227, 320, 854, 922], "properti": [40, 178, 185, 186, 195, 203, 214, 257, 262, 293, 297, 320, 323, 324, 831, 832, 839, 872, 891, 896, 922, 927, 928, 1071, 1089, 1178, 1220, 1316, 1321, 1347], "proport": [721, 808, 1305, 1316], "protocol": [39, 123, 138, 178, 320], "prototyp": 804, "provid": [31, 32, 33, 34, 37, 38, 40, 41, 45, 46, 47, 48, 49, 135, 136, 138, 139, 140, 145, 147, 149, 150, 151, 152, 153, 154, 165, 169, 202, 206, 221, 267, 277, 320, 323, 374, 375, 449, 469, 490, 550, 558, 559, 660, 661, 665, 673, 674, 689, 690, 691, 692, 760, 790, 808, 820, 829, 844, 881, 897, 919, 922, 975, 976, 1058, 1100, 1119, 1170, 1237, 1238, 1242, 1250, 1251, 1295, 1316, 1329, 1336, 1339, 1344, 1347], "provis": 821, "prune": [147, 152, 154, 858, 922], "pt0": 449, "public": [138, 320, 808, 820, 922, 1316, 1343], "pulp": 1325, "pure": [40, 320], "purpos": [582, 808, 922], "push": [149, 152, 153, 154, 155, 182, 320, 391, 808], "pushdown": [46, 47, 48, 49, 57, 58, 829, 830, 840, 858, 867, 869, 878, 895, 896, 922, 1216, 1218, 1316], "put": [37, 46, 69, 320, 324, 922], "pwd": 137, "py": 151, "pyarrow": [39, 45, 122, 127, 135, 138, 139, 141, 143, 147, 150, 155, 157, 272, 278, 279, 320, 787, 820, 1291, 1297, 1298, 1316, 1326, 1328, 1344], "pyarrow_opt": [45, 139, 147, 150, 320], "pyarrow_t": 1344, "pycapsul": [177, 931], "pycapsuleinterfac": [177, 931], "pydant": 157, "pyiceberg": [151, 157], "pyodbc": [38, 320], "pyodbc_uri": [38, 320], "pyspark": 171, "pytest": [158, 160], "python": [0, 32, 33, 34, 41, 42, 69, 79, 93, 123, 135, 136, 141, 143, 157, 158, 160, 178, 223, 230, 254, 255, 274, 306, 320, 412, 417, 421, 479, 558, 559, 667, 735, 749, 750, 752, 753, 795, 796, 798, 808, 814, 835, 905, 922, 927, 1022, 1026, 1036, 1037, 1038, 1042, 1170, 1244, 1296, 1316, 1320, 1343], "pythondatatyp": [60, 77, 182, 320, 804, 826, 922, 928], "pythonliter": [938, 981, 986, 989, 1088, 1121, 1171, 1172, 1173, 1174, 1216, 1316], "pytorch": [282, 320, 1300, 1316], "q": [255, 320, 790, 1316, 1321, 1329], "q1": [40, 320], "q2": [40, 320], "q3": [40, 320], "q4": [40, 320], "qcut": [410, 808, 1016, 1316], "qhoo": 1347, "qmark": 137, "qqr": 928, "quad": [466, 808, 1078, 1316], "qualifi": [38, 320], "quantifi": [666, 1243], "quantil": [320, 607, 630, 631, 808, 922, 1191, 1208, 1316, 1333], "quantile_cont": 1337, "quantile_disc": 1337, "quarter": [211, 226, 252, 290, 320, 439, 444, 457, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1066, 1340], "queri": [46, 47, 48, 49, 57, 58, 137, 138, 141, 149, 152, 153, 154, 199, 228, 244, 267, 320, 550, 558, 559, 674, 787, 808, 829, 830, 840, 867, 878, 881, 895, 896, 897, 905, 914, 922, 1083, 1170, 1251, 1316, 1325, 1326, 1328, 1332, 1343, 1345, 1346], "quick": [804, 1017, 1316, 1347], "quit": [226, 320, 853, 922], "quot": [37, 38, 46, 135, 136, 138, 149, 320, 701, 922, 1278], "quota_project_id": 34, "quote_char": [37, 46, 135, 136, 149, 320, 922], "quote_plu": 138, "quote_styl": [37, 46, 320, 922], "quotes_titl": 701, "quotient": 1338, "r": [135, 136, 149, 320, 565, 604, 659, 664, 665, 666, 667, 679, 680, 808, 928, 1236, 1241, 1242, 1243, 1244, 1256, 1257, 1271, 1329, 1339], "r1": 59, "r2": 59, "r3": 59, "rab": [657, 682, 1234, 1259, 1334], "rad": 1341, "radian": [411, 731, 808, 1337], "radix": [698, 1275], "rai": [731, 732], "raini": [679, 680, 1256, 1257], "rais": [1, 15, 16, 20, 39, 94, 95, 98, 99, 101, 102, 103, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 135, 136, 140, 146, 147, 149, 154, 158, 160, 178, 182, 206, 245, 253, 278, 320, 356, 374, 391, 417, 442, 443, 525, 527, 570, 605, 607, 615, 657, 660, 669, 693, 695, 696, 698, 700, 751, 768, 808, 897, 958, 975, 1022, 1051, 1052, 1137, 1139, 1189, 1191, 1198, 1234, 1237, 1246, 1270, 1272, 1273, 1275, 1277, 1297, 1316], "raise_if_empti": [135, 136, 140, 146, 149], "raise_if_undetermin": 570, "raise_on_fail": 897, "raker": 132, "ram": [46, 47, 48, 49, 922], "ran": [808, 926], "random": [40, 41, 141, 156, 163, 212, 256, 320, 488, 538, 610, 641, 646, 721, 808, 820, 1098, 1150, 1193, 1215, 1224, 1305, 1316], "randomli": 164, "rang": [17, 40, 137, 138, 189, 197, 211, 224, 320, 336, 411, 417, 425, 435, 440, 441, 442, 444, 457, 458, 494, 730, 735, 738, 748, 749, 750, 751, 752, 753, 764, 765, 794, 795, 796, 808, 834, 848, 922, 928, 1017, 1022, 1030, 1044, 1049, 1050, 1051, 1053, 1066, 1067, 1076, 1186, 1316, 1339], "rank": [345, 522, 733, 740, 755, 808, 947, 1134, 1316], "rankmethod": [610, 808, 1193, 1316], "rare": [418, 1023], "rather": [226, 320, 481, 558, 575, 607, 619, 703, 808, 853, 922, 1191, 1202, 1280, 1316], "raw": 138, "raw_output": [574, 878, 922], "re": [206, 211, 222, 285, 287, 320, 436, 437, 446, 449, 848, 886, 888, 922, 1045, 1046, 1055, 1058, 1344], "reach": [677, 678, 703, 1254, 1255, 1280], "read": [36, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 190, 199, 320, 323, 412, 481, 798, 808, 835, 922, 1083, 1316, 1321], "read_arrow_batches_from_odbc": 137, "read_clipboard": [36, 320], "read_csv": [134, 140, 149], "read_csv_batch": 131, "read_databas": 138, "read_database_uri": 137, "read_excel": 146, "read_ndjson": 144, "read_od": 140, "read_opt": 140, "read_parquet": 154, "read_tabl": 147, "readabl": 804, "reader": [45, 49, 131, 135, 136, 141, 143, 147, 320, 922], "readi": 915, "readthedoc": [40, 320], "real": [666, 1243], "realli": [409, 658, 681, 808, 1015, 1235, 1258, 1316], "realloc": [145, 149, 152, 153, 199, 320, 1083, 1316], "rearrang": [230, 320], "reason": [171, 189, 320, 550, 558, 808, 834, 922], "receiv": [51, 137, 149, 230, 244, 306, 320, 559, 604, 808, 866, 922, 1347], "recent": [158, 159, 160, 161, 278, 320, 601, 615, 808, 1186, 1198, 1297, 1316, 1328, 1344], "rechunk": [59, 122, 127, 135, 136, 139, 141, 143, 145, 147, 149, 150, 152, 153, 154, 199, 320, 808, 1002, 1083, 1094, 1176, 1316], "recognis": [15, 16, 20, 928], "recommend": [40, 171, 189, 223, 228, 244, 320, 550, 825, 834, 922, 928], "record": [37, 42, 46, 132, 143, 155, 320, 922], "record_batch": [224, 320], "recordbatch": [122, 224, 320, 787, 1326, 1328, 1344], "recurs": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "red": [50, 89, 90, 306, 721, 808, 905, 1305, 1316], "redempt": 1325, "redshift": 138, "reduc": [49, 135, 136, 145, 147, 149, 152, 153, 154, 254, 307, 308, 310, 313, 320, 645, 745, 758, 808, 906, 907, 909, 912, 922, 1172, 1190, 1222, 1287, 1316], "reduct": [204, 320, 559, 808], "ref": [665, 667, 1242, 1244], "refer": [0, 32, 40, 93, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 187, 190, 320, 324, 412, 446, 449, 610, 665, 679, 680, 693, 695, 696, 700, 808, 835, 922, 1055, 1058, 1193, 1256, 1257, 1270, 1272, 1273, 1277, 1316], "referenc": [40, 320, 558, 679, 680, 706, 808, 1256, 1257, 1326, 1344], "refin": 140, "reg": 132, "regard": [135, 740], "regardless": [127, 181, 210, 226, 283, 320, 390, 422, 674, 716, 798, 808, 824, 853, 885, 922, 1027, 1251], "regex": [91, 469, 565, 566, 568, 657, 659, 665, 666, 667, 669, 679, 680, 704, 756, 808, 928, 1234, 1236, 1242, 1243, 1244, 1246, 1256, 1257], "regexp_lik": 1337, "region": [40, 151, 320], "regist": [1, 52, 53, 54, 55, 168, 170, 267, 320, 808, 881, 922, 926, 1325, 1326, 1328, 1329, 1330, 1331, 1344, 1346], "register_dataframe_namespac": [1, 53, 54, 55], "register_expr_namespac": [1, 52, 54, 55], "register_glob": [1327, 1329, 1331, 1344], "register_lazyframe_namespac": [1, 52, 53, 55], "register_mani": [1327, 1328, 1331], "register_plugin": 808, "register_plugin_funct": [808, 926], "register_series_namespac": [1, 52, 53, 54], "registr": [267, 320, 787, 820, 881, 922, 1331, 1344], "regrid": [494, 808], "regular": [130, 223, 253, 254, 290, 297, 320, 469, 657, 658, 659, 663, 665, 666, 667, 668, 669, 670, 679, 680, 681, 735, 756, 804, 808, 896, 922, 928, 1234, 1235, 1236, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1256, 1257, 1258, 1342], "reinterpret": [808, 1316], "rel": [40, 138, 139, 150, 151, 158, 159, 160, 161, 320, 439, 465, 467, 468, 721, 808, 1048, 1077, 1079, 1080, 1305, 1316], "relat": [137, 174, 679, 680, 928, 1256, 1257, 1332], "releas": [58, 225, 320, 559, 808, 830, 852, 922, 1347], "release_year": 1325, "relev": 59, "reli": [225, 320, 852, 922], "reliabl": [89, 90], "remain": [135, 136, 149, 193, 194, 197, 202, 245, 320, 415, 416, 475, 521, 614, 685, 686, 808, 837, 838, 844, 858, 922, 1020, 1021, 1076, 1087, 1133, 1197, 1262, 1263, 1316, 1331], "remaind": [377, 686, 978, 1263, 1338], "remap": 92, "remot": [135, 136, 141, 143], "remov": [4, 135, 136, 149, 178, 191, 275, 320, 469, 584, 688, 689, 690, 691, 692, 756, 808, 836, 922, 1265, 1266, 1267, 1268, 1269, 1292, 1316, 1346], "removes_pronoun": 681, "renam": [1, 125, 135, 136, 172, 210, 258, 259, 294, 295, 299, 301, 320, 331, 481, 576, 577, 583, 584, 585, 586, 588, 590, 591, 706, 708, 786, 790, 808, 847, 873, 874, 892, 893, 898, 900, 922, 934, 1246, 1284, 1293, 1316, 1344], "rename_field": [685, 686, 1262, 1263], "render": [574, 878, 922], "render_as_str": 137, "reoconstruct": [255, 320], "repeat": [141, 152, 611, 613, 780, 799, 808], "repeat_bi": 808, "replac": [38, 39, 135, 136, 149, 200, 201, 250, 284, 287, 294, 295, 320, 323, 421, 443, 473, 558, 559, 615, 680, 681, 696, 808, 842, 888, 892, 893, 922, 1026, 1052, 1085, 1198, 1216, 1218, 1257, 1258, 1273, 1316, 1321, 1337], "replace_al": [615, 679, 808, 1197, 1198, 1256, 1316], "replace_column": 320, "replace_strict": [614, 808, 1197, 1316], "replace_time_zon": [418, 424, 426, 1028, 1029, 1056], "replace_with": [681, 1258], "replic": [714, 808, 1299, 1316], "report": 137, "repr": [129, 392, 396, 449, 992, 997, 1058], "repres": [37, 40, 46, 65, 66, 68, 78, 82, 87, 122, 124, 126, 127, 128, 137, 245, 267, 268, 277, 278, 291, 298, 320, 395, 479, 503, 504, 546, 552, 558, 655, 671, 676, 679, 680, 683, 694, 722, 725, 742, 754, 756, 768, 769, 770, 779, 784, 785, 789, 797, 804, 808, 881, 882, 890, 922, 928, 996, 1216, 1232, 1248, 1253, 1256, 1257, 1260, 1271, 1297, 1306, 1316, 1344], "represent": [10, 43, 44, 65, 66, 68, 82, 129, 260, 276, 320, 392, 394, 395, 396, 420, 425, 428, 430, 431, 432, 433, 434, 435, 438, 440, 441, 445, 458, 459, 461, 573, 714, 808, 840, 856, 875, 922, 992, 995, 996, 997, 998, 1025, 1030, 1033, 1034, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1054, 1067, 1068, 1070, 1294, 1299, 1316, 1335], "request": 34, "requested_schema": [177, 931], "requir": [1, 32, 33, 34, 39, 40, 51, 127, 137, 138, 158, 159, 160, 161, 187, 193, 253, 277, 278, 279, 282, 320, 370, 392, 396, 465, 467, 468, 551, 559, 600, 623, 625, 627, 629, 631, 634, 636, 638, 645, 693, 695, 696, 718, 783, 808, 832, 837, 838, 839, 880, 891, 922, 972, 1075, 1077, 1079, 1080, 1163, 1222, 1256, 1270, 1272, 1273, 1297, 1298, 1302, 1316], "require_al": 928, "rerais": [58, 830, 922], "rerun": [199, 320, 1083, 1316], "resampl": [211, 320, 848, 922], "reset": [4, 174], "reset_index": [127, 211, 320, 848, 922], "reshap": [245, 278, 320, 523, 737, 808, 1135, 1316], "resolv": [421, 550, 831, 832, 839, 872, 891, 922], "resourc": [897, 926], "respect": [40, 135, 149, 320, 658, 668, 670, 681, 928, 1235, 1245, 1247, 1258, 1300, 1316], "respons": [138, 237, 320, 863, 922], "rest": [701, 1278], "restor": [174, 320, 323, 1316, 1321], "restore_default": 174, "restrict": [30, 686, 1263], "result": [13, 37, 43, 44, 45, 46, 47, 48, 49, 51, 59, 126, 127, 128, 137, 138, 140, 149, 152, 154, 155, 169, 199, 202, 211, 212, 225, 226, 227, 241, 245, 252, 255, 260, 261, 263, 277, 278, 279, 290, 297, 299, 305, 320, 417, 444, 446, 449, 457, 465, 466, 467, 468, 472, 479, 488, 496, 508, 549, 550, 558, 559, 573, 600, 605, 607, 614, 615, 616, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 643, 644, 664, 680, 684, 685, 696, 717, 721, 744, 745, 749, 751, 752, 753, 754, 768, 769, 780, 783, 784, 785, 787, 799, 808, 825, 829, 834, 844, 848, 852, 853, 854, 858, 867, 871, 875, 876, 877, 896, 898, 904, 915, 916, 922, 928, 937, 1053, 1055, 1058, 1066, 1077, 1079, 1080, 1083, 1084, 1098, 1105, 1120, 1161, 1170, 1189, 1191, 1197, 1198, 1199, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1219, 1221, 1241, 1261, 1262, 1273, 1297, 1298, 1305, 1316, 1326, 1332, 1344, 1345, 1347], "resultset": 137, "retri": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 152, 153, 154, 320, 922], "retriev": [33, 206, 277, 320, 350, 351, 515, 516, 704, 779, 952, 953, 1127, 1128, 1281, 1295, 1316, 1332], "return": [1, 5, 6, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 100, 103, 111, 119, 122, 124, 125, 126, 127, 128, 130, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 171, 172, 176, 179, 181, 183, 186, 187, 188, 192, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 209, 210, 211, 213, 214, 215, 219, 221, 222, 223, 224, 225, 228, 229, 230, 232, 234, 239, 240, 241, 243, 244, 245, 249, 252, 253, 254, 255, 256, 260, 267, 270, 271, 277, 278, 279, 282, 283, 284, 285, 290, 293, 294, 295, 301, 303, 305, 306, 309, 314, 320, 332, 334, 337, 338, 339, 340, 341, 342, 345, 346, 350, 351, 352, 354, 356, 357, 368, 373, 374, 375, 376, 377, 378, 379, 389, 390, 394, 395, 400, 401, 402, 403, 404, 410, 411, 417, 418, 420, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 466, 471, 479, 482, 483, 485, 489, 490, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 511, 512, 515, 516, 518, 523, 525, 527, 528, 529, 531, 538, 548, 549, 556, 558, 559, 571, 573, 574, 575, 580, 604, 607, 609, 613, 614, 615, 616, 618, 619, 641, 642, 647, 648, 649, 656, 657, 659, 660, 661, 663, 664, 665, 666, 667, 669, 670, 671, 672, 674, 675, 676, 677, 678, 682, 683, 684, 685, 686, 694, 698, 703, 711, 712, 713, 715, 716, 717, 719, 720, 721, 724, 725, 730, 731, 732, 733, 734, 735, 741, 743, 748, 749, 750, 751, 752, 753, 754, 757, 760, 762, 764, 765, 766, 767, 768, 769, 770, 780, 783, 786, 787, 790, 793, 794, 795, 796, 798, 799, 808, 824, 827, 829, 830, 832, 833, 834, 839, 840, 846, 848, 849, 852, 856, 857, 858, 866, 867, 869, 871, 875, 878, 884, 885, 886, 891, 892, 893, 900, 902, 904, 908, 913, 915, 922, 926, 927, 928, 930, 932, 935, 936, 937, 945, 946, 948, 949, 950, 951, 952, 953, 954, 956, 958, 959, 970, 972, 974, 975, 976, 978, 979, 990, 994, 995, 996, 999, 1003, 1009, 1010, 1016, 1017, 1022, 1023, 1025, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1070, 1076, 1078, 1082, 1083, 1088, 1092, 1099, 1100, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1130, 1135, 1137, 1139, 1140, 1141, 1143, 1150, 1160, 1161, 1168, 1170, 1175, 1184, 1191, 1197, 1198, 1199, 1200, 1201, 1202, 1215, 1217, 1225, 1233, 1234, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1251, 1252, 1253, 1254, 1255, 1259, 1260, 1261, 1262, 1263, 1271, 1275, 1280, 1288, 1291, 1298, 1301, 1303, 1304, 1305, 1307, 1316, 1325, 1326, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1342, 1344, 1345, 1346, 1347], "return_as_str": [209, 320, 575], "return_dtyp": [40, 230, 320, 558, 559, 614, 615, 724, 769, 770, 808, 1170, 1197, 1198, 1316], "return_typ": [277, 282, 320], "returns_scalar": [558, 559, 770, 808, 926], "reus": [57, 58, 174, 829, 830, 840, 867, 878, 922], "reusabl": 174, "rev": [227, 320, 854, 922], "revers": [181, 197, 283, 320, 390, 404, 405, 406, 407, 408, 584, 586, 588, 716, 737, 743, 808, 824, 885, 922, 1010, 1011, 1012, 1013, 1014, 1316, 1334, 1337], "reverse_": 586, "reverse_a": 586, "reverse_b": 586, "revert": [7, 9, 10], "rhap": [668, 670, 1247], "rhapsodi": [668, 670, 1247], "right": [9, 10, 15, 16, 18, 27, 40, 67, 135, 136, 158, 159, 160, 161, 211, 225, 226, 252, 289, 320, 410, 465, 466, 467, 468, 496, 539, 540, 541, 542, 607, 620, 623, 625, 627, 629, 631, 634, 636, 638, 642, 650, 736, 749, 750, 752, 753, 795, 796, 808, 848, 852, 853, 871, 889, 922, 1016, 1077, 1078, 1079, 1080, 1105, 1151, 1152, 1153, 1154, 1191, 1217, 1228, 1316, 1332, 1337], "right_left": [225, 320, 852, 922], "right_on": [225, 226, 289, 320, 852, 853, 889, 922], "rightmost": [642, 808, 1217, 1316, 1339], "rld": [688, 690, 1267], "rle": [619, 808, 1202, 1316], "rle_id": [618, 808, 1316], "rle_id_a": [619, 808], "rle_id_ab": [619, 808], "rmm": 897, "rn": [135, 136, 149], "role": [32, 138], "roll": [211, 320, 417, 436, 437, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 738, 784, 785, 808, 848, 922, 1022, 1045, 1046, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1316], "rollback": [437, 1046], "rolled_forward": 417, "rollforward": [436, 1045], "rolling_map": [808, 1316], "rolling_max": [808, 1316], "rolling_max_bi": 808, "rolling_mean": [808, 1316], "rolling_mean_bi": 808, "rolling_median": [808, 1316], "rolling_median_bi": 808, "rolling_min": [808, 1316], "rolling_min_bi": 808, "rolling_quantil": [808, 1316], "rolling_quantile_bi": 808, "rolling_row_max": [623, 808], "rolling_row_mean": [625, 808], "rolling_row_median": [627, 808], "rolling_row_min": [629, 808], "rolling_row_quantil": [631, 808], "rolling_row_std": [634, 808], "rolling_row_sum": [636, 808], "rolling_row_var": [638, 808], "rolling_skew": [808, 1316], "rolling_std": [808, 1316], "rolling_std_bi": 808, "rolling_sum": [621, 808, 1203, 1316], "rolling_sum_bi": 808, "rolling_var": [808, 1316], "rolling_var_bi": 808, "rollinggroupbi": [252, 320], "rollinginterpolationmethod": [189, 247, 312, 320, 608, 630, 631, 781, 808, 834, 868, 911, 922, 1017, 1192, 1208, 1316], "ronaldo": [665, 1242], "root": [139, 150, 397, 572, 583, 584, 586, 588, 590, 591, 654, 807, 808, 1000, 1231, 1316, 1338], "rotat": [320, 323, 1316, 1321], "round": [20, 40, 53, 129, 137, 320, 398, 402, 478, 640, 712, 808, 1001, 1090, 1214, 1316, 1337], "round_sig_fig": [808, 1316], "round_str": 1053, "round_td": 1053, "rounded_corn": 20, "row": [14, 20, 25, 37, 38, 40, 45, 46, 49, 51, 52, 54, 59, 97, 103, 111, 119, 125, 126, 127, 128, 129, 132, 135, 136, 137, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 158, 159, 165, 179, 181, 182, 183, 193, 194, 199, 202, 204, 205, 209, 210, 211, 212, 213, 214, 218, 219, 220, 221, 223, 224, 225, 226, 227, 229, 230, 236, 241, 245, 252, 255, 256, 265, 271, 274, 276, 277, 282, 283, 285, 287, 288, 289, 296, 297, 301, 303, 305, 306, 314, 320, 324, 345, 346, 354, 369, 390, 391, 471, 479, 483, 489, 512, 523, 550, 600, 601, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 646, 651, 653, 664, 673, 711, 716, 730, 733, 739, 741, 758, 762, 764, 765, 767, 782, 784, 785, 793, 798, 808, 824, 827, 837, 838, 844, 845, 846, 848, 849, 852, 853, 854, 855, 857, 858, 862, 879, 884, 885, 886, 888, 889, 895, 896, 900, 902, 904, 905, 913, 922, 932, 947, 956, 1082, 1083, 1092, 1099, 1124, 1135, 1186, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1229, 1241, 1250, 1288, 1316, 1325, 1332, 1334, 1345, 1347], "row_group": [147, 154], "row_group_s": [45, 49, 320, 922], "row_height": [40, 320], "row_index": [40, 320], "row_index_nam": [135, 136, 141, 143, 145, 147, 149, 152, 153, 154], "row_index_offset": [135, 136, 141, 143, 145, 147, 149, 152, 153, 154], "row_nr": [296, 320, 895, 922], "row_tot": [40, 320], "rowname_col": [320, 324], "rows_by_kei": [223, 254, 273, 320], "rowserror": [253, 320], "rowtotalsdefinit": [40, 320], "rpc": 137, "rstrip": 584, "rtol": [158, 159, 160, 161], "rtrim": 1337, "ru": 1339, "rule": [135, 147, 149, 154, 204, 320, 658, 681, 696, 1235, 1258, 1273], "run": [46, 47, 48, 49, 57, 58, 66, 137, 165, 168, 169, 170, 210, 225, 228, 230, 259, 285, 295, 306, 320, 395, 409, 522, 558, 559, 618, 619, 676, 786, 808, 829, 830, 840, 847, 852, 858, 862, 867, 874, 878, 886, 893, 897, 922, 928, 996, 1015, 1134, 1170, 1201, 1202, 1253, 1316, 1344, 1347], "runtimeerror": [278, 320, 1297, 1316], "rust": [37, 45, 46, 93, 105, 141, 143, 147, 230, 306, 320, 667, 922, 926, 1170, 1244, 1316], "s1": [50, 89, 90, 160, 161, 204, 320, 971, 1074, 1075, 1094, 1119, 1129, 1162, 1182, 1194, 1307, 1316], "s2": [1, 50, 89, 90, 160, 161, 204, 320, 971, 1002, 1019, 1074, 1075, 1094, 1110, 1119, 1129, 1162, 1176, 1182, 1194, 1307, 1316], "s3": [1, 39, 139, 150, 151, 154, 155, 320, 971, 1162, 1316], "s_": 449, "s_bar": 1334, "s_dt": [449, 1339, 1340], "s_dt1": 1339, "s_dt2": 1339, "s_dtm": 449, "s_foo": 1334, "s_from_str_repr": [1294, 1316], "s_head_5": 671, "s_head_n": 671, "s_tail_5": 694, "s_tail_n": 694, "s_td": 449, "s_tm": [449, 1339, 1340], "safe": [612, 808, 1195, 1316], "sale": [600, 808], "sam": 12, "same": [20, 39, 40, 50, 51, 57, 58, 59, 89, 90, 106, 141, 149, 158, 159, 160, 161, 163, 174, 202, 210, 230, 245, 254, 255, 266, 285, 294, 295, 299, 306, 320, 328, 335, 368, 394, 415, 416, 449, 475, 479, 481, 482, 485, 549, 563, 569, 600, 614, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 646, 653, 664, 675, 706, 804, 808, 829, 830, 844, 847, 856, 858, 880, 886, 892, 893, 898, 922, 928, 933, 970, 995, 1020, 1021, 1026, 1058, 1161, 1170, 1197, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1241, 1252, 1307, 1316, 1330, 1332, 1340], "samoa": [418, 1023], "sampl": [135, 136, 306, 320, 646, 650, 808, 905, 1228, 1316, 1333], "sample_s": [135, 136], "sampled_from": 1347, "sandwich": [207, 320], "sat": [320, 323], "satisfi": [496, 808, 1105, 1316], "saturdai": [211, 320, 848, 922], "save": [2, 3, 6, 211, 226, 252, 290, 320, 418, 426, 439, 444, 457, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 754, 795, 796, 804, 808, 820, 848, 853, 871, 922, 1031, 1048, 1053, 1066], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [179, 221, 230, 253, 320, 395, 558, 642, 671, 676, 683, 694, 768, 770, 808, 926, 932, 996, 1119, 1217, 1248, 1253, 1260, 1271, 1316], "scale": [28, 67, 197, 320, 378, 559, 604, 697, 808, 928, 1076, 1274, 1316], "scale_negative_even": [604, 808], "scan": [125, 128, 135, 136, 137, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 320, 673, 922, 1250], "scan_csv": [46, 47, 48, 49, 135, 136, 922], "scan_parquet": [147, 155], "scan_pyarrow_dataset": [147, 154], "scatter": [320, 323, 1316, 1321], "scenario": 1316, "schedul": [58, 830, 922], "schema": [0, 1, 14, 28, 35, 38, 39, 52, 53, 54, 59, 97, 114, 115, 122, 124, 125, 126, 128, 132, 135, 136, 137, 138, 140, 142, 144, 145, 146, 147, 148, 149, 152, 153, 154, 183, 184, 185, 191, 195, 197, 224, 228, 230, 237, 241, 249, 278, 282, 320, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 424, 549, 550, 559, 570, 585, 587, 589, 673, 724, 790, 808, 820, 827, 828, 831, 832, 836, 839, 858, 863, 869, 891, 905, 922, 928, 1005, 1250, 1316, 1325], "schema_mod": [39, 320], "schema_overrid": [122, 124, 125, 126, 127, 128, 135, 136, 137, 138, 140, 144, 145, 146, 149, 153, 224, 278, 320, 922, 928], "schemadefinit": [122, 124, 125, 126, 128, 144, 145, 153, 320, 922], "schemadict": [81, 122, 124, 125, 126, 127, 128, 135, 137, 138, 140, 146, 147, 149, 152, 154, 320, 790, 858, 905, 922], "schemainitdatatyp": 927, "schindler": 1325, "scientif": [11, 37, 46, 320, 922], "scikit": [282, 320], "scipi": [508, 650, 808, 1120, 1228, 1316], "scope": [33, 34, 174, 819, 928, 1328, 1331, 1344], "score": [40, 245, 320], "script": [320, 323, 1316, 1321], "scroll": [40, 320], "sdiff": 541, "search": [226, 320, 550, 658, 668, 670, 681, 853, 880, 922, 1102, 1235, 1245, 1247, 1258, 1316], "search_sort": [808, 1316], "searchsortedsid": [642, 808, 1217, 1316], "searchstrategi": [162, 164, 165, 166, 167, 169], "season": [679, 680], "sec": [1340, 1347], "second": [37, 46, 145, 149, 152, 153, 158, 159, 160, 161, 211, 226, 252, 290, 320, 428, 431, 433, 434, 438, 439, 442, 444, 449, 456, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 679, 680, 693, 696, 751, 752, 753, 754, 794, 795, 796, 798, 808, 848, 853, 871, 922, 928, 1048, 1051, 1053, 1065, 1066, 1078, 1256, 1257, 1270, 1273, 1316, 1339, 1340, 1345, 1347], "second_part": [685, 686, 1262, 1263], "seconds_diff": 456, "secret": [151, 154], "section": [245, 320, 657, 665, 666, 669, 679, 680, 749, 750, 752, 753, 795, 796, 1234, 1242, 1243, 1246, 1256, 1257], "secur": [412, 808, 835, 922], "see": [37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 57, 58, 66, 137, 138, 139, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 158, 159, 160, 161, 165, 169, 176, 187, 202, 211, 225, 244, 245, 320, 324, 383, 384, 386, 387, 399, 449, 474, 508, 558, 650, 657, 665, 666, 669, 671, 679, 680, 694, 749, 750, 752, 753, 782, 795, 796, 804, 808, 829, 830, 844, 848, 897, 922, 926, 928, 930, 984, 985, 987, 988, 998, 1004, 1058, 1120, 1228, 1234, 1242, 1243, 1246, 1248, 1256, 1257, 1271, 1316, 1347], "seed": [156, 212, 256, 320, 488, 538, 610, 641, 646, 808, 1098, 1150, 1193, 1215, 1224, 1316], "seed_1": [212, 320, 488, 808, 1098, 1316], "seed_2": [212, 320, 488, 808, 1098, 1316], "seed_3": [212, 320, 488, 808, 1098, 1316], "seen": [449, 1058], "seen_group": 136, "select": [1, 8, 38, 51, 52, 53, 54, 94, 133, 135, 136, 137, 138, 139, 141, 143, 147, 149, 155, 164, 179, 180, 221, 222, 226, 230, 241, 244, 253, 259, 265, 267, 280, 286, 290, 297, 320, 328, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 354, 359, 360, 361, 366, 367, 368, 369, 370, 371, 372, 373, 376, 379, 380, 385, 388, 389, 390, 393, 397, 398, 400, 401, 402, 403, 409, 411, 413, 414, 415, 416, 419, 421, 422, 430, 436, 437, 439, 443, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 462, 465, 467, 468, 469, 470, 471, 472, 476, 478, 480, 483, 487, 488, 489, 490, 491, 492, 493, 494, 497, 498, 501, 507, 508, 509, 511, 512, 522, 523, 550, 553, 554, 555, 556, 558, 559, 560, 561, 562, 566, 578, 580, 582, 583, 585, 587, 589, 592, 593, 597, 598, 599, 600, 602, 603, 606, 608, 609, 610, 611, 612, 613, 616, 617, 618, 621, 632, 639, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 664, 665, 666, 667, 668, 669, 670, 672, 693, 704, 706, 707, 710, 711, 712, 713, 715, 716, 718, 719, 720, 721, 722, 725, 727, 729, 732, 733, 734, 737, 738, 740, 741, 742, 743, 746, 753, 754, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 771, 773, 775, 776, 778, 779, 782, 783, 787, 788, 789, 790, 791, 793, 797, 804, 808, 823, 829, 832, 853, 866, 874, 879, 881, 887, 894, 896, 897, 922, 928, 932, 1052, 1091, 1134, 1216, 1218, 1229, 1247, 1251, 1270, 1316, 1325, 1326, 1327, 1328, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346], "select_from": [164, 167, 169], "select_seq": [320, 922], "selector": [0, 40, 182, 191, 193, 194, 198, 236, 243, 245, 266, 275, 277, 282, 285, 287, 288, 320, 324, 449, 469, 566, 808, 820, 826, 836, 837, 838, 841, 862, 880, 886, 888, 922], "selectortyp": [40, 320, 928], "self": [1, 52, 53, 54, 55, 57, 58, 267, 298, 320, 787, 808, 829, 830, 840, 867, 878, 881, 894, 922, 937, 982, 983, 984, 985, 987, 988, 991, 1005, 1010, 1083, 1087, 1101, 1168, 1170, 1183, 1187, 1188, 1194, 1197, 1198, 1216, 1218, 1219, 1230, 1304, 1307, 1316, 1327, 1328, 1329, 1331, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344], "semi": [132, 225, 320, 852, 922, 1332], "semigraph": 20, "sens": [135, 141, 143, 237, 290, 320, 600, 808, 863, 922], "sensit": [657, 666, 669, 679, 680, 1234, 1243, 1246, 1256, 1257], "sep": 132, "separ": [9, 10, 24, 27, 36, 37, 46, 131, 132, 134, 135, 136, 140, 149, 243, 245, 275, 284, 286, 320, 354, 357, 449, 523, 529, 559, 664, 739, 744, 745, 808, 887, 922, 956, 959, 1058, 1135, 1141, 1241, 1286, 1292, 1316, 1339], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [40, 45, 51, 81, 122, 124, 125, 126, 128, 132, 135, 136, 137, 140, 144, 145, 146, 149, 153, 163, 164, 165, 166, 167, 181, 189, 198, 199, 225, 226, 236, 241, 243, 244, 245, 255, 266, 275, 277, 282, 283, 287, 288, 289, 290, 320, 369, 390, 410, 482, 500, 550, 558, 604, 607, 614, 615, 653, 681, 691, 692, 706, 716, 733, 744, 745, 758, 760, 769, 770, 779, 782, 788, 808, 824, 834, 841, 852, 853, 862, 866, 880, 885, 888, 889, 922, 928, 971, 1016, 1017, 1083, 1162, 1191, 1197, 1198, 1258, 1284, 1316], "sequenti": [57, 58, 259, 295, 320, 829, 830, 840, 867, 874, 878, 893, 922], "ser": [1028, 1029, 1056], "seri": [0, 1, 11, 25, 40, 50, 52, 53, 54, 55, 59, 60, 69, 81, 89, 90, 99, 122, 124, 127, 129, 160, 161, 165, 179, 192, 202, 204, 206, 208, 211, 212, 215, 216, 218, 220, 222, 232, 234, 239, 250, 252, 256, 270, 273, 276, 278, 280, 281, 300, 320, 335, 346, 369, 373, 392, 393, 394, 395, 396, 398, 443, 472, 475, 478, 482, 483, 493, 498, 500, 501, 503, 504, 505, 506, 517, 523, 525, 550, 556, 558, 559, 610, 611, 612, 613, 614, 615, 620, 621, 632, 643, 645, 671, 681, 693, 694, 695, 696, 700, 704, 715, 720, 730, 734, 737, 744, 745, 749, 750, 752, 753, 758, 760, 764, 765, 768, 769, 770, 780, 782, 783, 786, 787, 790, 795, 796, 799, 808, 820, 844, 848, 871, 899, 922, 926, 1308, 1310, 1312, 1315, 1317, 1320, 1321, 1322, 1323, 1324, 1326, 1328, 1344, 1347], "serial": [43, 44, 190, 320, 412, 577, 808, 835, 922], "serializ": [808, 926], "serializationformat": [190, 260, 320, 412, 573, 808, 835, 875, 922], "seriesplot": [1316, 1321], "server": [38, 137, 138, 320], "servic": 32, "service_account": [139, 150], "service_account_json_absolute_path": [139, 150], "session": 137, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 57, 58, 63, 66, 67, 69, 123, 124, 125, 128, 135, 136, 137, 140, 141, 143, 144, 145, 146, 147, 149, 152, 153, 154, 155, 156, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 178, 186, 193, 194, 203, 206, 210, 212, 223, 225, 226, 234, 236, 254, 256, 258, 260, 265, 270, 275, 277, 278, 282, 284, 285, 287, 288, 289, 294, 320, 323, 332, 334, 356, 357, 369, 381, 383, 384, 386, 387, 399, 410, 442, 443, 460, 488, 500, 525, 527, 529, 538, 539, 540, 541, 542, 544, 550, 558, 559, 566, 567, 573, 604, 607, 614, 615, 621, 622, 624, 626, 628, 630, 633, 635, 637, 641, 646, 650, 651, 656, 672, 673, 679, 680, 683, 688, 689, 690, 691, 692, 693, 695, 696, 700, 721, 725, 727, 730, 734, 739, 749, 750, 751, 752, 753, 754, 764, 765, 768, 774, 780, 783, 784, 785, 786, 790, 792, 795, 796, 798, 799, 808, 820, 829, 830, 837, 838, 840, 847, 852, 853, 858, 862, 873, 875, 879, 886, 888, 889, 892, 905, 922, 926, 935, 936, 958, 959, 971, 975, 982, 984, 985, 987, 988, 1004, 1016, 1051, 1052, 1069, 1089, 1098, 1110, 1117, 1137, 1139, 1141, 1150, 1151, 1152, 1153, 1154, 1156, 1162, 1170, 1191, 1197, 1198, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1215, 1216, 1217, 1224, 1228, 1229, 1233, 1249, 1250, 1256, 1257, 1260, 1265, 1266, 1267, 1270, 1272, 1273, 1277, 1297, 1305, 1316, 1335, 1343, 1347], "set_": 174, "set_auto_structifi": [258, 294, 320, 873, 892, 922], "set_decimal_separ": 27, "set_environ": 168, "set_except": [58, 830, 922], "set_fmt_float": 30, "set_fmt_str_length": [658, 668, 670, 681, 1235, 1247, 1258], "set_index": [211, 320, 848, 922], "set_legend": [40, 320], "set_sort": [252, 290, 320, 620, 808, 871, 922, 1316], "set_stat": 30, "set_streaming_chunk_s": [829, 922], "set_styl": [40, 320], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": [7, 51], "set_tbl_row": 174, "set_tbl_width_char": 681, "set_thousands_separ": 9, "set_titl": [40, 320], "set_verbos": 174, "setosa": [320, 323], "setup": 1347, "seventeen": [492, 808], "sever": [122, 124, 125, 126, 128, 144, 145, 153, 320, 922, 1347], "sfu": 138, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 50, 51, 52, 53, 54, 55, 59, 60, 77, 81, 89, 90, 97, 116, 122, 123, 124, 125, 126, 127, 128, 129, 132, 135, 144, 145, 149, 155, 162, 165, 169, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 204, 205, 206, 208, 210, 211, 212, 213, 215, 216, 217, 218, 220, 221, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 256, 258, 260, 263, 265, 266, 267, 268, 269, 270, 271, 273, 275, 276, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 385, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 578, 579, 580, 581, 582, 583, 584, 586, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 762, 763, 764, 765, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 808, 823, 824, 826, 827, 829, 830, 833, 834, 835, 836, 837, 838, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 855, 857, 858, 859, 860, 861, 863, 864, 865, 866, 867, 868, 869, 870, 871, 873, 875, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 892, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 927, 928, 932, 933, 934, 937, 939, 940, 941, 942, 943, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 990, 991, 992, 993, 995, 996, 997, 998, 1000, 1001, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1038, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1074, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1090, 1091, 1092, 1094, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1175, 1182, 1183, 1184, 1186, 1187, 1188, 1189, 1191, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1221, 1222, 1224, 1225, 1226, 1227, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1286, 1288, 1289, 1290, 1292, 1293, 1294, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1316, 1325, 1326, 1327, 1328, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1344, 1345], "share": [158, 159, 160, 161, 197, 320, 1076, 1316], "shawshank": 1325, "sheet": [40, 140, 146, 320], "sheet1": [40, 320], "sheet_id": [140, 146], "sheet_nam": [140, 146], "sheet_zoom": [40, 320], "sheetnam": [140, 146], "shift": [211, 320, 372, 413, 480, 520, 601, 738, 808, 848, 922, 1018, 1132, 1186, 1316], "short": [158, 160, 377, 978], "shorten": [158, 160], "shorter": [135, 136, 149, 550, 764, 765], "shorthand": [320, 323, 1316, 1321], "should": [10, 38, 40, 45, 46, 47, 48, 49, 59, 122, 124, 126, 128, 132, 140, 144, 145, 149, 153, 155, 162, 163, 165, 169, 191, 223, 226, 230, 253, 254, 255, 266, 274, 275, 286, 306, 320, 330, 409, 412, 460, 466, 469, 503, 504, 522, 559, 573, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 642, 650, 653, 679, 680, 721, 733, 754, 756, 768, 770, 784, 785, 798, 804, 808, 829, 835, 836, 852, 853, 858, 875, 880, 887, 922, 928, 1015, 1069, 1078, 1134, 1170, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1217, 1228, 1256, 1257, 1305, 1316, 1326], "show": [30, 40, 189, 194, 209, 228, 242, 320, 490, 574, 808, 834, 867, 878, 922, 1100, 1316, 1330, 1343], "show_graph": [228, 320, 922], "show_plot": [867, 922], "shrink": [264, 320, 645, 808, 1222, 1223, 1316], "shrink_dtyp": [808, 1316], "shrink_to_fit": [320, 1316], "shuffl": [156, 256, 282, 306, 320, 538, 641, 808, 905, 1150, 1215, 1316], "side": [40, 211, 252, 320, 496, 539, 540, 541, 542, 620, 623, 625, 627, 629, 631, 634, 636, 638, 642, 749, 750, 752, 753, 795, 796, 808, 848, 871, 922, 926, 1105, 1151, 1152, 1153, 1154, 1217, 1316], "sign": [65, 66, 68, 72, 73, 74, 75, 76, 82, 439, 612, 679, 680, 703, 808, 928, 1048, 1195, 1256, 1257, 1280, 1316, 1337], "sign_x": 1338, "signed_integ": 928, "signific": [154, 223, 230, 320, 383, 384, 386, 387, 559, 640, 808, 984, 985, 987, 988, 1170, 1214, 1316], "significantli": [140, 230, 306, 320, 1170, 1316, 1347], "silenc": 97, "silent": [698, 1275], "similar": [36, 45, 134, 171, 204, 226, 263, 285, 287, 320, 364, 446, 449, 543, 600, 644, 708, 767, 798, 808, 853, 877, 886, 888, 922, 966, 1055, 1058, 1155, 1221, 1316], "similarli": [40, 125, 211, 226, 252, 290, 320, 439, 444, 457, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 1048, 1053, 1066], "simpl": [40, 241, 320], "simpler": [928, 1256], "simpli": [149, 744, 758], "simplifi": [46, 47, 48, 49, 57, 58, 829, 830, 840, 867, 878, 922], "simplify_express": [46, 47, 48, 49, 57, 58, 829, 830, 840, 867, 878, 922], "sin": [808, 1316, 1337], "sinc": [39, 65, 66, 82, 135, 136, 137, 139, 145, 149, 150, 152, 153, 162, 163, 164, 165, 169, 172, 180, 236, 278, 296, 301, 320, 424, 427, 460, 481, 558, 577, 614, 656, 664, 723, 732, 740, 760, 808, 823, 840, 862, 880, 894, 895, 900, 922, 1029, 1032, 1037, 1038, 1069, 1097, 1197, 1233, 1241, 1297, 1316], "sind": 1337, "sine": [339, 340, 558, 648, 649, 808, 941, 942, 1226, 1227, 1316, 1341], "singl": [40, 45, 51, 57, 58, 59, 134, 135, 136, 137, 138, 139, 140, 147, 149, 150, 152, 163, 182, 191, 192, 193, 194, 199, 206, 212, 221, 230, 243, 253, 255, 266, 277, 278, 320, 353, 395, 399, 417, 439, 482, 485, 488, 519, 525, 558, 559, 611, 614, 616, 618, 653, 656, 671, 672, 676, 683, 694, 723, 733, 737, 738, 739, 765, 769, 770, 788, 796, 804, 808, 826, 829, 830, 836, 837, 838, 880, 922, 928, 955, 996, 1004, 1022, 1048, 1083, 1098, 1131, 1137, 1194, 1197, 1199, 1201, 1233, 1248, 1249, 1253, 1260, 1271, 1291, 1297, 1316, 1327], "singlecolselector": 179, "singleindexselector": [179, 932], "sinh": [808, 1316], "sink_csv": 922, "sink_ipc": 922, "sink_ndjson": 922, "sink_parquet": 922, "site_id": [320, 324], "six": [642, 808], "size": [14, 45, 49, 135, 136, 137, 162, 163, 164, 165, 169, 171, 197, 288, 320, 550, 616, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 730, 764, 765, 784, 785, 808, 829, 922, 1076, 1199, 1209, 1316, 1347], "sizeunit": [197, 320, 378, 979, 1076, 1316], "skew": [632, 808, 1209, 1316], "skewtest": [650, 808, 1228, 1316], "skip": [135, 136, 140, 147, 149, 154, 226, 288, 320, 853, 922, 1170, 1316, 1332], "skip_empty_lin": 140, "skip_lin": [135, 149], "skip_nul": [559, 808, 1170, 1316], "skip_row": [135, 136, 149], "skip_rows_after_head": [135, 136, 149], "sklearn": [282, 320], "slice": [46, 47, 48, 49, 52, 57, 58, 197, 213, 224, 271, 320, 528, 548, 559, 570, 572, 621, 622, 624, 626, 628, 630, 633, 635, 637, 671, 694, 808, 829, 830, 840, 858, 867, 878, 922, 926, 1076, 1099, 1140, 1160, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1248, 1271, 1288, 1316, 1339], "slice_pushdown": [46, 47, 48, 49, 57, 58, 829, 830, 840, 858, 867, 878, 922], "slide": [409, 808, 1015, 1316], "slightli": [46, 47, 48, 49, 93, 479, 808, 922, 1340], "slot": [409, 413, 520, 808, 1015, 1018, 1132, 1316], "slow": [109, 125, 128, 135, 136, 137, 140, 144, 145, 146, 149, 153, 154, 320, 409, 559, 621, 673, 808, 905, 922, 1015, 1203, 1250, 1316], "slower": [126, 128, 140, 210, 230, 243, 290, 306, 320, 559, 770, 808, 847, 905, 922, 1170, 1316], "small": [11, 138, 444, 922, 1347], "smaller": [45, 49, 197, 320, 922, 1076, 1316], "smallest": [181, 283, 320, 389, 390, 716, 808, 824, 885, 922, 990, 1316, 1333, 1336], "smooth": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "snappi": [35, 45, 49, 320, 922], "snapshot": 151, "snapshot_id": 151, "snowflak": [137, 138], "snowi": [679, 680], "so": [1, 40, 138, 149, 171, 174, 209, 211, 227, 245, 252, 320, 346, 356, 412, 479, 496, 527, 550, 559, 620, 679, 680, 681, 688, 689, 690, 704, 808, 835, 848, 854, 871, 922, 928, 958, 1139, 1256, 1257, 1258, 1265, 1266, 1267], "softwar": [36, 134, 320], "solut": [38, 320], "some": [14, 30, 40, 50, 90, 125, 135, 136, 137, 149, 178, 194, 245, 255, 278, 320, 324, 679, 680, 804, 1110, 1256, 1257, 1316, 1347], "some_account": [666, 1243], "some_t": 1346, "someth": [558, 808], "sometim": [754, 807], "somewher": [666, 1243], "sort": [51, 52, 181, 211, 226, 237, 244, 245, 252, 261, 283, 290, 303, 314, 320, 345, 389, 390, 466, 475, 559, 600, 620, 643, 653, 715, 716, 721, 723, 733, 749, 752, 770, 808, 824, 840, 848, 853, 863, 866, 867, 871, 876, 878, 885, 902, 913, 922, 928, 947, 990, 1078, 1117, 1219, 1301, 1302, 1305, 1316, 1332, 1345, 1347], "sort_bi": 808, "sort_column": [245, 320], "sorted_asc": [1089, 1316], "sorted_desc": [1089, 1316], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 808, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 922, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1316, 1321, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1344], "source_ac": 129, "source_actor_id": 129, "source_alia": [39, 320], "source_cha": 129, "source_channel_id": 129, "south": 69, "space": [20, 211, 320, 449, 848, 922, 928, 1058], "spam": [233, 320, 666, 1243], "span": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "spanner": [320, 324], "spark": [45, 320], "sparklin": [40, 320], "speak": [650, 808, 1228, 1316], "spearman": 740, "speci": [320, 323], "special": [38, 135, 136, 138, 149, 282, 297, 320, 621, 666, 679, 680, 808, 896, 922, 1170, 1203, 1243, 1256, 1257, 1316], "specif": [1, 30, 39, 40, 41, 42, 93, 122, 124, 126, 128, 135, 138, 139, 140, 144, 145, 146, 150, 151, 153, 182, 223, 225, 272, 277, 320, 446, 449, 693, 695, 696, 700, 721, 808, 826, 852, 922, 927, 928, 1055, 1058, 1270, 1272, 1273, 1277, 1291, 1295, 1305, 1316, 1332, 1344, 1347], "specifi": [33, 37, 38, 39, 40, 45, 46, 51, 94, 97, 100, 115, 118, 135, 140, 146, 147, 149, 154, 166, 181, 182, 197, 198, 201, 206, 210, 211, 225, 226, 243, 245, 252, 253, 255, 258, 259, 263, 266, 277, 283, 286, 294, 295, 299, 320, 390, 399, 442, 449, 465, 467, 468, 469, 474, 600, 613, 615, 622, 624, 626, 628, 630, 633, 635, 637, 644, 653, 708, 716, 733, 736, 737, 738, 739, 749, 750, 752, 753, 754, 756, 786, 790, 795, 796, 804, 808, 824, 826, 841, 843, 847, 848, 852, 853, 871, 873, 874, 877, 880, 885, 887, 892, 893, 898, 922, 928, 1004, 1051, 1058, 1076, 1077, 1079, 1080, 1086, 1198, 1221, 1295, 1316, 1332, 1346], "speed": [49, 261, 320, 559, 808, 876, 922, 1347], "speedup": [51, 154, 223, 230, 320, 559, 808, 1170, 1316], "split": [1, 40, 45, 52, 224, 320, 664, 685, 686, 1241, 1262, 1263], "split_by_column_dtyp": 54, "split_inclus": 684, "splitfram": [1, 52], "spreadsheet": [36, 134, 140, 146, 245, 320], "spring": [679, 680], "sql": [0, 38, 112, 113, 121, 137, 138, 225, 263, 320, 364, 543, 644, 767, 788, 808, 820, 877, 922, 966, 1155, 1221, 1316, 1325, 1326, 1328, 1330, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1345, 1346], "sql_expr": 1344, "sqlalchemi": [38, 137, 157, 320], "sqlcontext": [267, 320, 787, 881, 922, 1343], "sqlite": [38, 137, 320], "sqrt": [559, 650, 708, 808, 1170, 1228, 1316, 1337], "sqrt_x": 1338, "squar": [1, 55, 306, 508, 616, 654, 808, 905, 1120, 1199, 1231, 1316, 1338], "st": [32, 1347], "stabil": [212, 320, 488, 808, 1098, 1316], "stabl": [147, 176, 187, 189, 190, 212, 256, 260, 267, 320, 412, 488, 555, 573, 714, 808, 834, 835, 862, 875, 880, 881, 922, 930, 1098, 1299, 1316], "stack": [59, 215, 292, 320, 323, 1326], "stai": [558, 646, 808], "standalon": [163, 928], "standard": [7, 10, 40, 268, 277, 282, 320, 430, 467, 633, 634, 650, 655, 674, 789, 804, 808, 882, 922, 1035, 1074, 1079, 1182, 1228, 1232, 1251, 1316, 1333, 1347], "standardis": [40, 320], "start": [40, 133, 135, 136, 138, 140, 141, 143, 145, 146, 147, 149, 152, 153, 154, 171, 205, 210, 211, 228, 265, 290, 296, 297, 320, 373, 376, 379, 392, 396, 417, 425, 435, 440, 444, 457, 458, 469, 483, 526, 544, 619, 623, 625, 627, 629, 631, 634, 636, 638, 651, 657, 662, 666, 670, 678, 683, 687, 688, 690, 691, 694, 703, 730, 735, 744, 748, 749, 750, 751, 752, 753, 756, 758, 764, 765, 795, 796, 798, 804, 808, 846, 847, 848, 867, 879, 895, 896, 922, 928, 980, 992, 997, 1022, 1024, 1027, 1030, 1032, 1033, 1039, 1041, 1043, 1044, 1047, 1049, 1053, 1057, 1066, 1067, 1092, 1138, 1156, 1202, 1229, 1239, 1243, 1247, 1255, 1260, 1264, 1265, 1267, 1271, 1280, 1316, 1332, 1339, 1347], "start_bi": [211, 320, 848, 922], "startbi": [211, 320, 848, 922], "starts_a": 1339, "starts_with": [52, 245, 320, 324, 373, 376, 392, 566, 657, 662, 787, 881, 922, 928, 992, 1239, 1337], "starts_with_expr": 379, "starts_with_lit": 379, "startup": [277, 320], "stat": [508, 650, 808, 1120, 1228, 1316], "state": [4, 5, 105, 744, 820, 840, 867, 878, 922, 1344], "statement": [600, 798, 808, 1330, 1345], "static": [87, 905], "statist": [45, 49, 135, 136, 147, 152, 154, 189, 320, 467, 468, 508, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 650, 808, 834, 922, 1017, 1079, 1080, 1120, 1209, 1228, 1316], "std": [189, 320, 633, 634, 808, 834, 922, 1017, 1210, 1316], "std_dev": [40, 320], "stddev": 1337, "stddev_samp": 1333, "stdev": [40, 320, 1333], "stdev_samp": 1333, "stdout": [174, 209, 320, 575], "step": [288, 320, 479, 730, 764, 765, 808], "steve": [237, 320, 863, 922], "still": [137, 138], "stock": [320, 323], "stop": [133, 135, 136, 141, 143, 145, 147, 149, 152, 153, 154, 623, 625, 627, 629, 631, 634, 636, 638, 808, 1024, 1027, 1032, 1033, 1039, 1041, 1043, 1047, 1053, 1057], "storag": [37, 39, 41, 45, 46, 47, 48, 49, 135, 139, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 320, 922], "storage_account": 33, "storage_opt": [37, 39, 41, 45, 46, 47, 48, 49, 135, 139, 141, 143, 145, 147, 149, 150, 151, 152, 153, 154, 320, 922], "store": [39, 135, 151, 199, 223, 254, 320, 393, 618, 808, 993, 1083, 1201, 1316], "store_id": [600, 808], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 66, 69, 91, 122, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 162, 163, 165, 168, 169, 170, 174, 181, 182, 186, 189, 190, 191, 192, 193, 194, 195, 197, 198, 202, 203, 204, 206, 207, 209, 210, 211, 213, 215, 218, 220, 221, 223, 225, 226, 227, 229, 231, 233, 235, 236, 237, 238, 241, 243, 245, 247, 249, 250, 251, 252, 253, 254, 256, 260, 261, 265, 266, 267, 268, 269, 271, 273, 274, 275, 276, 277, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320, 329, 330, 331, 352, 357, 369, 373, 374, 375, 376, 379, 380, 385, 388, 390, 392, 393, 396, 404, 410, 412, 414, 422, 439, 443, 444, 446, 449, 457, 466, 469, 475, 477, 481, 482, 485, 493, 496, 517, 518, 527, 528, 529, 544, 548, 550, 559, 570, 572, 573, 574, 575, 577, 584, 585, 586, 587, 588, 589, 590, 591, 597, 600, 604, 607, 613, 614, 615, 617, 619, 620, 623, 625, 627, 629, 631, 634, 636, 638, 645, 652, 653, 704, 705, 706, 707, 716, 721, 723, 724, 725, 726, 727, 728, 729, 731, 732, 738, 739, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 766, 767, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 804, 808, 815, 824, 826, 829, 830, 832, 834, 835, 836, 837, 838, 840, 841, 844, 847, 848, 850, 852, 853, 854, 862, 863, 866, 867, 869, 870, 871, 875, 876, 878, 879, 880, 881, 885, 886, 887, 888, 889, 894, 895, 896, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 922, 926, 927, 928, 934, 954, 959, 971, 976, 991, 992, 993, 997, 1016, 1017, 1027, 1048, 1052, 1053, 1055, 1058, 1066, 1078, 1086, 1089, 1129, 1130, 1141, 1162, 1178, 1179, 1180, 1191, 1196, 1197, 1198, 1218, 1281, 1283, 1284, 1292, 1293, 1294, 1295, 1305, 1316, 1322, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1336, 1339, 1340, 1344, 1345, 1347], "str_date": 1339, "str_timestamp": 1339, "strategi": [37, 46, 51, 59, 135, 154, 162, 163, 164, 165, 166, 167, 169, 201, 211, 225, 226, 240, 289, 320, 474, 550, 559, 808, 843, 848, 852, 853, 889, 922, 1086, 1162, 1316], "stream": [14, 41, 42, 46, 47, 48, 49, 57, 58, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 210, 225, 285, 320, 558, 808, 829, 830, 840, 847, 852, 858, 862, 867, 878, 880, 886, 922], "streamabl": [858, 862, 888, 922], "strftime": [93, 449, 1058, 1337, 1339], "strict": [124, 125, 128, 132, 182, 191, 249, 320, 374, 391, 449, 657, 660, 669, 693, 695, 696, 698, 700, 808, 826, 836, 869, 922, 928, 975, 991, 1058, 1234, 1237, 1246, 1270, 1272, 1273, 1275, 1277, 1316], "strictli": [37, 46, 50, 90, 320, 922], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 35, 37, 38, 39, 40, 43, 44, 46, 50, 63, 66, 69, 81, 88, 89, 90, 91, 93, 99, 117, 125, 129, 132, 135, 136, 137, 138, 149, 158, 159, 160, 161, 162, 169, 173, 181, 182, 185, 190, 195, 197, 204, 206, 209, 210, 211, 226, 243, 245, 252, 255, 257, 258, 259, 260, 266, 276, 277, 283, 284, 288, 290, 294, 295, 299, 320, 329, 352, 357, 374, 375, 376, 390, 392, 394, 395, 396, 399, 412, 439, 444, 446, 449, 457, 466, 469, 477, 481, 496, 529, 573, 575, 600, 604, 614, 615, 620, 623, 625, 627, 629, 631, 634, 636, 638, 653, 656, 657, 658, 659, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 708, 716, 724, 726, 728, 733, 736, 737, 738, 739, 747, 749, 750, 752, 753, 759, 772, 774, 777, 786, 790, 792, 795, 796, 798, 804, 808, 820, 824, 826, 831, 835, 839, 840, 847, 848, 853, 871, 872, 873, 874, 875, 880, 885, 892, 893, 898, 922, 927, 928, 959, 975, 976, 977, 992, 994, 995, 996, 997, 1048, 1053, 1055, 1058, 1066, 1078, 1105, 1141, 1197, 1198, 1233, 1234, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1283, 1294, 1295, 1316, 1325, 1326, 1334, 1337, 1340, 1343, 1347], "stringcach": [89, 90, 225, 320, 820, 994, 998], "stringio": [144, 145, 481, 808], "strings_hex": 661, "strip": [28, 688, 689, 690, 691, 692, 1265, 1266, 1267, 1339], "strip_chars_end": [690, 692], "strip_chars_start": [689, 691], "strip_prefix": [690, 692], "strip_suffix": [689, 691], "strongli": [40, 171, 230, 253, 306, 320, 559, 808, 1170, 1316], "strpo": 1337, "strpost": 1339, "strptime": [252, 320, 443, 620, 808, 871, 922, 1052, 1337], "struct": [8, 118, 129, 241, 258, 281, 286, 294, 320, 369, 410, 490, 550, 558, 559, 585, 587, 589, 607, 618, 619, 667, 673, 685, 686, 714, 721, 744, 745, 747, 769, 808, 873, 887, 892, 905, 922, 971, 1016, 1162, 1170, 1191, 1201, 1244, 1250, 1262, 1263, 1297, 1299, 1316], "struct_col": [704, 706, 707], "struct_seri": 905, "structarrai": [197, 320, 1076, 1316], "structfieldnotfounderror": 706, "structur": [40, 41, 42, 99, 102, 116, 132, 199, 244, 255, 272, 278, 320, 604, 808, 866, 922, 1083, 1291, 1316, 1344], "student": [245, 320], "style": [7, 20, 40, 137, 245, 320], "sub": [306, 350, 351, 352, 355, 356, 357, 358, 359, 360, 361, 362, 366, 367, 371, 529, 536, 808, 952, 953, 954, 957, 958, 959, 960, 961, 962, 963, 964, 968, 969, 973, 1141, 1148], "subarrai": [348, 349, 950, 951], "subclass": [1, 320], "subexpress": [57, 58, 829, 830, 840, 867, 878, 922], "subinterv": 1333, "subject": [45, 245, 320], "sublist": [356, 515, 516, 518, 520, 524, 525, 526, 527, 528, 529, 530, 539, 544, 548, 550, 958, 1110, 1127, 1128, 1130, 1132, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1151, 1156, 1160, 1162, 1316], "subplan": [57, 58, 829, 830, 840, 867, 878, 922], "subsequ": [40, 147, 154, 248, 279, 320, 550, 787, 798, 840, 922, 1298, 1316, 1331], "subset": [193, 194, 241, 285, 320, 837, 838, 886, 922], "substr": [373, 376, 379, 392, 396, 657, 662, 669, 679, 680, 683, 684, 685, 686, 687, 928, 974, 977, 980, 992, 997, 1234, 1239, 1246, 1256, 1257, 1260, 1261, 1262, 1263, 1264, 1337], "subtl": [40, 320], "subtli": [479, 808], "subtract": [508, 709, 808, 1120, 1316], "succe": [135, 136, 149], "success": [33, 659, 666, 1236, 1243], "successfulli": [829, 922], "suffix": [225, 226, 227, 258, 294, 299, 320, 331, 376, 390, 392, 503, 504, 505, 506, 564, 584, 586, 589, 590, 591, 617, 662, 689, 692, 716, 808, 852, 853, 854, 873, 892, 894, 898, 922, 928, 977, 992, 1239, 1269], "suffix_field": [585, 587], "sugar": [289, 320, 614, 615, 681, 725, 727, 729, 741, 743, 746, 756, 761, 762, 763, 771, 773, 775, 776, 778, 780, 781, 786, 789, 791, 793, 797, 799, 808, 889, 922, 1197, 1198, 1231, 1258, 1316], "suggest": [320, 323, 1316, 1321], "suitabl": [51, 59, 137, 163, 230, 320, 559, 642, 808, 1170, 1217, 1316], "sum": [40, 197, 204, 210, 211, 221, 245, 252, 270, 299, 320, 407, 408, 412, 462, 475, 550, 559, 570, 572, 573, 574, 575, 576, 614, 615, 620, 635, 636, 723, 725, 737, 744, 746, 747, 758, 770, 782, 792, 808, 829, 830, 835, 840, 847, 848, 865, 867, 871, 875, 878, 898, 922, 926, 928, 1013, 1014, 1072, 1076, 1211, 1316, 1325, 1332, 1334, 1337, 1344], "sum_": [650, 808, 1228, 1316], "sum_a": [252, 320, 620, 808, 871, 922], "sum_horizont": [51, 320, 791], "summari": [189, 320, 834, 922, 1017, 1316, 1332], "summer": [679, 680], "sun": [320, 323, 693, 1270], "sundai": [211, 320, 417, 446, 449, 459, 735, 848, 922, 1022, 1055, 1058, 1068], "sunni": [679, 680, 1256, 1257], "supercast": [204, 320], "supertyp": [59, 201, 278, 282, 320, 335, 738, 808, 843, 922, 926, 1316], "suppli": [38, 40, 122, 124, 125, 126, 128, 137, 144, 145, 153, 202, 253, 277, 320, 475, 604, 808, 844, 922, 1295, 1316], "support": [1, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 59, 122, 123, 124, 125, 126, 127, 128, 129, 137, 138, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 162, 166, 169, 174, 223, 224, 225, 226, 254, 255, 265, 266, 274, 279, 282, 320, 449, 466, 544, 600, 614, 615, 651, 653, 658, 668, 670, 671, 679, 680, 681, 683, 694, 804, 808, 814, 829, 852, 853, 879, 880, 922, 928, 1058, 1078, 1156, 1197, 1198, 1229, 1235, 1245, 1247, 1248, 1256, 1257, 1258, 1260, 1271, 1298, 1300, 1316, 1320, 1334, 1339, 1340, 1342, 1343, 1344], "supportsinterchang": 123, "suppos": [179, 245, 320, 559, 808, 1170, 1316], "sure": [59, 122, 127, 135, 136, 139, 141, 143, 147, 150, 248, 320, 808, 926], "surreal": 137, "surreal_query_to_fram": 137, "surrealdb": 137, "surrealhttp": 137, "surrealql": 137, "suscept": 922, "swap": [869, 922], "swim": 739, "switch": [418, 829, 922, 1023], "sy": 174, "sydnei": 751, "symbol": [36, 37, 46, 320, 808, 922], "symmetr": [541, 928, 1153], "symmetri": [832, 839, 872, 891, 922], "synchron": 916, "syntact": [289, 320, 614, 615, 681, 725, 727, 729, 741, 743, 746, 756, 761, 762, 763, 771, 773, 775, 776, 778, 780, 781, 786, 789, 791, 793, 797, 799, 808, 889, 922, 1197, 1198, 1231, 1258, 1316], "syntax": [40, 113, 202, 230, 241, 320, 574, 657, 665, 666, 669, 679, 680, 764, 765, 804, 844, 878, 922, 1234, 1242, 1243, 1246, 1256, 1257, 1316, 1340, 1342], "system": [36, 135, 136, 320, 422, 829, 922, 1027], "t": [36, 37, 39, 46, 59, 134, 135, 140, 146, 149, 211, 226, 230, 244, 285, 288, 320, 409, 418, 426, 443, 449, 462, 465, 467, 468, 522, 559, 600, 604, 665, 669, 679, 680, 690, 693, 696, 701, 798, 808, 848, 853, 866, 886, 922, 928, 1015, 1052, 1058, 1072, 1077, 1079, 1080, 1134, 1170, 1242, 1246, 1256, 1257, 1266, 1267, 1270, 1273, 1278, 1316, 1328, 1329, 1339], "t_": [286, 320, 466, 808, 887, 922, 1078, 1316], "t_0": [252, 320, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 808, 871, 922, 1078, 1316], "t_1": [252, 320, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 808, 871, 922, 1078, 1316], "t_a": [286, 320, 887, 922], "t_b": [286, 320, 887, 922], "t_c": [286, 320, 887, 922], "t_d": [286, 320, 887, 922], "t_i": [466, 808, 1078, 1316], "t_id": [227, 320, 854, 922], "t_n": [252, 320, 620, 623, 625, 627, 629, 631, 634, 636, 638, 808, 871, 922], "t_struct": [286, 320, 887, 922], "tab_spann": [320, 324], "tab_stub": [320, 324], "tab_styl": [320, 324], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 38, 39, 40, 122, 129, 132, 139, 140, 146, 150, 151, 225, 227, 245, 267, 272, 279, 288, 289, 320, 324, 787, 820, 852, 854, 881, 889, 922, 1326, 1327, 1328, 1329, 1331, 1332, 1343, 1344], "table_nam": [38, 40, 267, 320, 881, 922], "table_path": [39, 139, 150, 151, 320], "table_styl": [40, 320], "tablemerg": [39, 320], "tablenotfounderror": [39, 320], "tables_scale_100": [131, 136], "tail": [209, 213, 320, 335, 650, 808, 922, 1099, 1228, 1316], "take": [40, 132, 140, 146, 165, 166, 174, 204, 205, 211, 234, 237, 244, 245, 249, 320, 345, 417, 439, 475, 482, 483, 525, 526, 558, 585, 587, 589, 653, 733, 735, 755, 757, 766, 808, 846, 848, 863, 869, 922, 947, 1022, 1048, 1091, 1092, 1137, 1138, 1307, 1316, 1334], "taken": [544, 683, 1156, 1260], "talkin": [701, 1278], "tan": [808, 1316, 1337], "tand": 1337, "tangent": [341, 342, 712, 713, 808, 943, 944, 1289, 1290, 1316, 1341], "tanh": [245, 320, 808, 1316], "target": [1, 38, 39, 40, 56, 140, 282, 320, 665, 679, 680, 693, 695, 696, 928, 1242, 1256, 1257, 1270, 1272, 1273, 1339], "target_alia": [39, 320], "target_t": [38, 320], "task": [58, 830, 922], "tau": [465, 466, 808, 1077, 1078, 1316], "tb": [158, 160, 197, 320, 378, 1076, 1316], "tbl": [131, 136, 1346], "tbl0": 1331, "tbl1": [1329, 1331], "tbl2": [1329, 1331], "tbl3": 1329, "tbl4": 1329, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": [20, 174], "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 189, 320, 834, 922], "tbl_width_char": 754, "td": 449, "td1": 928, "td2": 928, "td3": 928, "tdf": [244, 320], "technic": 804, "tell": [658, 681, 1235, 1258], "tempor": [93, 182, 211, 223, 252, 254, 255, 274, 320, 399, 449, 496, 620, 623, 625, 627, 629, 631, 634, 636, 638, 808, 820, 826, 848, 871, 922, 928, 1004, 1058, 1105, 1316, 1337, 1343], "temporalliter": [399, 808, 1004, 1037, 1038, 1316], "temporari": [38, 320], "temporarili": [171, 174, 211, 252, 320, 620, 808, 848, 871, 922], "tenant": 33, "tenant_id": 33, "tend": [158, 160], "tensor": [282, 320, 1300, 1316], "tensordataset": [282, 320], "term": [465, 467, 468, 671, 683, 694, 808, 1077, 1079, 1080, 1248, 1260, 1271, 1316], "termin": [37, 46, 320, 922], "test": [0, 38, 137, 138, 140, 146, 196, 245, 320, 820, 1075, 1316], "test1": 1331, "test2": 1331, "test3": 1331, "test_1": [245, 320], "test_1_math": [245, 320], "test_1_phys": [245, 320], "test_2": [245, 320], "test_2_math": [245, 320], "test_2_phys": [245, 320], "test_data": 137, "test_df_height": 165, "test_func": 769, "test_lf": [894, 922], "test_miscellan": 1347, "test_numer": 1347, "test_price_calcul": 1347, "test_series_len": 169, "test_tabl": 138, "test_unique_xyz": 163, "testdb": 138, "testing1234": 1331, "text": [134, 137, 394, 395, 663, 671, 675, 676, 679, 680, 682, 683, 694, 788, 995, 996, 1248, 1252, 1253, 1259, 1260, 1271, 1331, 1347], "text1": 680, "text2": 680, "textclaus": 137, "texttt": [650, 808, 1228, 1316], "th": [205, 320, 483, 526, 539, 650, 671, 694, 808, 846, 922, 1092, 1138, 1151, 1228, 1248, 1271, 1316], "than": [40, 46, 47, 48, 49, 57, 58, 96, 119, 126, 128, 135, 136, 137, 140, 146, 149, 155, 183, 210, 223, 225, 226, 230, 243, 253, 254, 256, 288, 306, 320, 394, 479, 481, 484, 486, 496, 510, 538, 557, 558, 559, 575, 607, 619, 641, 650, 671, 675, 677, 678, 686, 694, 703, 740, 770, 808, 829, 830, 847, 852, 853, 905, 922, 995, 1105, 1150, 1170, 1191, 1202, 1215, 1228, 1248, 1252, 1254, 1255, 1263, 1271, 1280, 1297, 1316, 1347], "the_aws_access_key_id": [39, 139, 150, 151, 320], "the_aws_region": [39, 320], "the_aws_secret_access_kei": [39, 139, 150, 151, 320], "thei": [37, 40, 46, 50, 58, 59, 89, 90, 125, 149, 174, 226, 228, 255, 320, 600, 681, 689, 690, 808, 829, 853, 922, 926, 928, 1258], "them": [58, 122, 124, 125, 126, 128, 137, 138, 140, 144, 145, 146, 147, 149, 152, 153, 154, 174, 198, 199, 211, 226, 237, 245, 252, 282, 290, 320, 357, 466, 496, 529, 592, 593, 600, 620, 738, 749, 750, 752, 753, 795, 796, 808, 830, 841, 848, 853, 863, 871, 922, 928, 959, 1078, 1083, 1141, 1179, 1180, 1316, 1334, 1344], "therebi": [149, 152, 153], "therefor": [197, 320, 559, 798, 808, 1076, 1316], "theta": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 65, 66, 67, 68, 69, 72, 82, 90, 97, 122, 124, 125, 126, 127, 128, 129, 131, 132, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 176, 178, 179, 180, 181, 184, 185, 187, 189, 190, 193, 194, 197, 199, 203, 204, 209, 210, 211, 212, 216, 218, 220, 221, 222, 223, 225, 226, 227, 228, 230, 231, 233, 235, 236, 237, 238, 240, 241, 243, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 263, 265, 267, 268, 269, 272, 274, 277, 278, 279, 282, 283, 284, 285, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 301, 306, 319, 320, 323, 324, 332, 335, 336, 345, 357, 363, 364, 365, 370, 389, 390, 393, 399, 409, 410, 412, 418, 419, 430, 436, 437, 439, 443, 444, 446, 449, 460, 464, 471, 481, 488, 490, 493, 494, 496, 500, 522, 523, 529, 538, 539, 540, 541, 542, 543, 545, 550, 551, 555, 556, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 577, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 600, 607, 610, 611, 612, 613, 614, 615, 616, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 643, 644, 645, 646, 651, 652, 653, 656, 658, 665, 668, 670, 672, 673, 677, 678, 681, 688, 689, 690, 691, 692, 697, 701, 703, 705, 708, 715, 716, 718, 719, 720, 721, 725, 729, 737, 738, 741, 743, 744, 757, 758, 760, 762, 763, 766, 767, 770, 773, 775, 778, 780, 784, 785, 786, 789, 793, 797, 798, 799, 804, 808, 820, 823, 824, 825, 828, 829, 830, 831, 832, 834, 835, 837, 838, 839, 840, 847, 848, 850, 852, 853, 854, 856, 858, 862, 863, 867, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 885, 886, 888, 889, 891, 892, 893, 894, 895, 896, 897, 900, 905, 919, 920, 921, 922, 926, 927, 928, 930, 937, 938, 947, 959, 965, 966, 967, 972, 990, 993, 998, 999, 1004, 1005, 1015, 1016, 1023, 1024, 1026, 1035, 1045, 1046, 1048, 1052, 1053, 1055, 1058, 1069, 1071, 1074, 1076, 1082, 1083, 1092, 1094, 1098, 1100, 1110, 1119, 1134, 1135, 1141, 1150, 1151, 1152, 1153, 1154, 1155, 1157, 1163, 1168, 1170, 1171, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1182, 1185, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1229, 1230, 1232, 1233, 1235, 1242, 1245, 1247, 1249, 1250, 1254, 1255, 1258, 1265, 1266, 1267, 1274, 1278, 1280, 1281, 1283, 1286, 1287, 1291, 1293, 1295, 1296, 1297, 1298, 1300, 1301, 1302, 1304, 1305, 1306, 1316, 1321, 1325, 1326, 1327, 1331, 1339, 1342, 1343, 1344, 1345, 1347], "thing": [149, 156], "think": [436, 437, 1045, 1046], "third": [558, 808], "thoma": [237, 320, 863, 922], "those": [5, 30, 40, 135, 255, 279, 289, 320, 479, 610, 665, 770, 808, 889, 922, 928, 1193, 1242, 1298, 1316], "though": [38, 137, 211, 320, 804, 848, 922], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 37, 46, 58, 131, 135, 136, 138, 171, 172, 266, 320, 522, 559, 653, 733, 808, 830, 880, 922, 967, 1134, 1157, 1230, 1316], "thread_loc": [559, 808], "thread_pool_s": 172, "threadpool": 57, "three": [40, 179, 252, 281, 320, 410, 607, 620, 642, 671, 679, 694, 808, 871, 922, 971, 1016, 1162, 1191, 1248, 1257, 1271, 1316], "threshold": [258, 320, 873, 922], "through": [123, 137, 804, 928, 1316, 1331], "throughout": 174, "throw": [39, 124, 125, 128, 191, 249, 320, 673, 674, 826, 836, 869, 922, 1250, 1251, 1316], "thu": [40, 199, 320, 323, 740, 1083, 1316], "thursdai": [211, 320, 417, 735, 848, 922, 1022], "ti": [610, 808, 1193, 1316], "time": [12, 37, 39, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 68, 106, 139, 145, 147, 149, 150, 152, 153, 154, 165, 166, 169, 189, 199, 211, 226, 227, 252, 290, 320, 352, 389, 390, 418, 419, 421, 422, 423, 426, 427, 436, 437, 439, 442, 443, 444, 446, 448, 449, 457, 460, 466, 517, 518, 550, 619, 620, 623, 625, 627, 629, 631, 634, 636, 638, 646, 693, 696, 700, 714, 715, 716, 738, 739, 749, 750, 751, 752, 753, 754, 760, 795, 796, 808, 829, 830, 834, 848, 853, 854, 867, 871, 922, 928, 954, 990, 1023, 1024, 1026, 1027, 1031, 1032, 1048, 1051, 1052, 1053, 1055, 1057, 1058, 1066, 1069, 1078, 1083, 1129, 1130, 1202, 1224, 1270, 1273, 1277, 1299, 1301, 1316, 1325, 1331, 1340, 1347], "time_column": [290, 320], "time_format": [37, 46, 320, 922], "time_unit": [66, 68, 419, 421, 427, 448, 460, 696, 751, 752, 753, 754, 760, 927, 928, 1024, 1026, 1032, 1057, 1069, 1273], "time_unit_m": [419, 1024], "time_unit_n": [419, 1024], "time_unit_u": 460, "time_zon": [66, 422, 424, 443, 696, 751, 752, 753, 927, 928, 1023, 1027, 1031, 1052, 1273], "timedelta": [211, 226, 252, 290, 320, 439, 444, 449, 457, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 749, 750, 752, 753, 795, 796, 808, 848, 853, 871, 922, 927, 928, 1036, 1042, 1048, 1053, 1066, 1078, 1179, 1180, 1232, 1306, 1316], "timeout": [58, 830, 922], "timestamp": [129, 139, 150, 211, 320, 443, 444, 457, 760, 848, 922, 1052, 1053, 1066, 1337], "timestamp_m": 448, "timestamp_n": 1057, "timestamp_u": [448, 1057], "timestep": 760, "timeunit": [37, 46, 66, 68, 320, 419, 421, 448, 460, 696, 751, 752, 753, 754, 922, 928, 1024, 1026, 1057, 1069, 1273], "timezon": [66, 139, 150, 424, 928, 1340], "tip": [559, 808], "titl": [40, 320, 323, 1316, 1321, 1325], "titlecas": [701, 1278], "tm": [421, 449, 928, 1340], "to_arrow": [224, 320, 1297, 1316, 1344], "to_batch": [224, 320], "to_dict": [182, 255, 320, 826, 922, 928], "to_dummi": [277, 282, 320, 1316], "to_fram": [393, 427, 444, 448, 457, 693, 927, 1016, 1191, 1216, 1218, 1262, 1263, 1270, 1316, 1321], "to_init_repr": [129, 320, 1316], "to_jax": [282, 320, 1316], "to_list": [129, 252, 320, 1234, 1246, 1316], "to_lowercas": 591, "to_numpi": [277, 282, 320, 558, 808, 1316], "to_panda": [320, 1316], "to_phys": [808, 998, 1316], "to_python": 927, "to_seri": [52, 206, 320, 693, 734, 783, 1270], "to_sql": [38, 320], "to_str": [446, 1055], "to_struct": [320, 666], "to_torch": [277, 320, 1316], "to_uppercas": [331, 590, 667, 808], "togeth": 1339, "token": [37, 41, 45, 46, 47, 48, 49, 145, 147, 149, 151, 152, 153, 154, 320, 922], "tokyo": [129, 928], "tokyo_tz": 928, "toler": [158, 159, 160, 161, 226, 320, 853, 922], "tone": [40, 320], "tonight": [658, 681, 1235, 1258], "too": [14, 245, 320, 377, 600, 808, 922, 978], "tooltip": [320, 323, 1316, 1321], "toomanyrowsreturnederror": [253, 320], "top": [40, 267, 283, 320, 323, 716, 808, 881, 885, 922, 1316, 1321, 1344], "top_col": [40, 320], "top_k": [181, 320, 389, 390, 716, 808, 824, 922, 990, 1316], "top_k_bi": [389, 390, 715, 808], "top_row": [40, 320], "tor_id": 129, "torch": [157, 282, 320, 1300, 1316], "torchexporttyp": [282, 320], "total": [40, 197, 301, 320, 450, 451, 452, 453, 454, 455, 456, 511, 531, 808, 900, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1076, 1123, 1143, 1316], "total_gross": 1325, "toward": [301, 511, 531, 808, 900, 1123, 1143, 1316], "tp": [1, 54], "tpu": [277, 320, 1295, 1316], "trace": 69, "traceback": [158, 159, 160, 161, 278, 320, 615, 808, 1198, 1297, 1316], "tracebacktyp": 1344, "track": [139, 150, 151, 230, 320, 550, 1344], "trail": [28, 209, 320, 688, 689, 1265, 1266], "train": [282, 320], "train_lf": [894, 922], "transfer": 138, "transferencod": [374, 375, 660, 661, 975, 976, 1237, 1238], "transform": [230, 267, 320, 558, 701, 787, 808, 881, 922, 1278], "transform_dens": [1316, 1321], "transit": [202, 320, 844, 922], "translat": 137, "transpar": [829, 922], "transpos": [245, 320], "travel": [139, 150], "travers": [622, 624, 626, 628, 630, 633, 635, 637, 808, 1204, 1205, 1207, 1210, 1211, 1212, 1316], "treat": [135, 136, 149, 176, 466, 657, 659, 669, 679, 680, 798, 808, 930, 1078, 1234, 1236, 1246, 1256, 1257, 1316], "tree": [575, 840, 922], "tree_format": [840, 922], "trend": [40, 320], "tri": [230, 320], "triangl": [306, 905], "trigger": [39, 228, 279, 320, 808, 926, 1298, 1316], "trigonometri": [1337, 1343], "trim": [129, 1339], "trim_decimal_zero": 28, "trip": 137, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 37, 38, 39, 40, 45, 46, 47, 48, 49, 57, 58, 59, 122, 123, 124, 125, 127, 128, 129, 131, 132, 135, 136, 137, 139, 140, 141, 143, 146, 147, 149, 150, 152, 154, 155, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 174, 178, 182, 183, 184, 189, 191, 196, 201, 202, 204, 206, 208, 209, 210, 211, 216, 218, 219, 220, 223, 225, 226, 227, 228, 233, 234, 240, 241, 243, 245, 246, 249, 253, 254, 255, 256, 258, 266, 267, 270, 273, 275, 277, 278, 279, 282, 284, 285, 286, 288, 289, 290, 294, 300, 302, 304, 307, 308, 309, 310, 311, 312, 313, 320, 323, 330, 331, 332, 333, 334, 335, 346, 348, 349, 352, 356, 357, 365, 369, 373, 374, 376, 379, 380, 385, 388, 390, 391, 392, 396, 404, 405, 406, 407, 408, 410, 417, 419, 422, 425, 427, 429, 436, 437, 439, 440, 443, 444, 445, 448, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 463, 464, 465, 467, 468, 475, 482, 484, 485, 486, 487, 490, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 513, 514, 518, 525, 527, 529, 545, 550, 557, 558, 559, 563, 564, 565, 566, 567, 568, 569, 570, 571, 574, 575, 576, 594, 595, 597, 599, 602, 603, 607, 612, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 645, 646, 650, 652, 653, 656, 657, 658, 659, 660, 662, 668, 669, 670, 672, 673, 674, 679, 680, 684, 685, 687, 693, 695, 696, 698, 700, 704, 706, 707, 716, 718, 721, 724, 725, 726, 727, 728, 730, 733, 734, 735, 740, 749, 752, 758, 764, 770, 774, 780, 783, 786, 787, 790, 792, 795, 798, 799, 808, 826, 827, 828, 829, 830, 834, 836, 840, 843, 844, 847, 848, 852, 853, 854, 856, 858, 862, 867, 869, 873, 878, 880, 881, 886, 887, 888, 889, 892, 897, 899, 901, 903, 906, 907, 908, 909, 910, 911, 912, 921, 922, 926, 927, 928, 935, 936, 948, 950, 951, 954, 958, 959, 967, 974, 975, 977, 980, 991, 992, 994, 997, 999, 1002, 1003, 1016, 1022, 1023, 1024, 1027, 1030, 1031, 1032, 1033, 1034, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1072, 1074, 1075, 1077, 1079, 1080, 1087, 1096, 1100, 1102, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1120, 1125, 1126, 1130, 1137, 1139, 1141, 1157, 1170, 1176, 1182, 1184, 1187, 1188, 1191, 1194, 1195, 1209, 1228, 1230, 1233, 1234, 1235, 1236, 1237, 1239, 1245, 1246, 1247, 1249, 1250, 1251, 1256, 1257, 1261, 1262, 1264, 1270, 1272, 1273, 1275, 1277, 1292, 1297, 1298, 1305, 1307, 1316, 1321, 1325, 1326, 1328, 1330, 1334, 1336, 1339, 1344, 1347], "truediv": [479, 808], "truncat": [20, 129, 135, 136, 149, 209, 211, 223, 254, 255, 274, 320, 848, 867, 922, 1343], "truncate_nod": [867, 922], "truncate_ragged_lin": [135, 136, 149], "truncate_str": 457, "truncate_td": 457, "trust": [412, 808, 835, 922], "try": [37, 41, 45, 46, 47, 48, 49, 57, 58, 116, 135, 136, 141, 145, 147, 149, 152, 153, 154, 320, 829, 830, 840, 867, 878, 922], "try_cast": 1337, "try_parse_d": [131, 135, 136, 149], "try_parse_hive_d": [147, 152, 154], "ts_local": [443, 1052], "tseri": [436, 437, 1045, 1046], "tstamp": 928, "tstamp_tokyo": 928, "tstamp_utc": 928, "tue": [320, 323], "tuesdai": [211, 320, 848, 922], "tupl": [40, 60, 138, 140, 146, 179, 223, 230, 243, 253, 254, 255, 262, 282, 298, 320, 574, 616, 808, 867, 878, 922, 927, 928, 1199, 1220, 1316], "turn": [8, 46, 47, 48, 49, 57, 58, 135, 136, 149, 225, 226, 320, 829, 830, 840, 852, 853, 858, 867, 922], "twice": [40, 320], "two": [40, 50, 89, 90, 124, 126, 128, 138, 179, 202, 204, 226, 227, 236, 237, 254, 281, 287, 300, 306, 320, 324, 330, 414, 421, 479, 482, 485, 550, 607, 652, 731, 732, 738, 740, 742, 749, 752, 784, 785, 787, 808, 844, 853, 854, 862, 863, 888, 899, 905, 922, 928, 971, 1019, 1026, 1162, 1191, 1316, 1331, 1332, 1333, 1336, 1345], "two_a": 1344, "tworld": [690, 1265, 1267], "txt": [1, 12, 149, 657, 669, 1246], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 46, 47, 48, 49, 52, 53, 54, 55, 57, 58, 60, 61, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 122, 124, 125, 126, 127, 128, 130, 135, 136, 137, 139, 140, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 169, 176, 179, 185, 195, 198, 204, 209, 211, 212, 224, 225, 230, 252, 257, 272, 277, 278, 281, 282, 285, 297, 320, 332, 334, 337, 338, 339, 340, 341, 342, 345, 350, 351, 352, 354, 357, 368, 369, 373, 374, 375, 376, 377, 378, 379, 391, 393, 394, 395, 399, 400, 401, 402, 403, 410, 411, 417, 418, 420, 422, 423, 424, 425, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 466, 469, 471, 482, 485, 488, 496, 497, 498, 499, 500, 501, 502, 511, 515, 516, 518, 523, 529, 531, 549, 550, 558, 559, 607, 609, 613, 614, 615, 616, 618, 619, 620, 623, 625, 627, 629, 631, 634, 636, 638, 647, 648, 649, 656, 659, 660, 661, 664, 665, 666, 667, 670, 671, 672, 674, 675, 676, 683, 684, 685, 686, 693, 694, 698, 712, 713, 714, 721, 730, 738, 741, 748, 749, 750, 751, 752, 753, 754, 756, 764, 765, 767, 768, 769, 770, 780, 783, 794, 795, 796, 799, 804, 808, 820, 829, 830, 839, 840, 841, 848, 852, 867, 871, 872, 878, 886, 896, 922, 927, 930, 935, 936, 948, 950, 951, 952, 953, 954, 956, 958, 959, 970, 971, 972, 974, 975, 976, 978, 979, 991, 993, 995, 996, 1004, 1016, 1017, 1022, 1023, 1025, 1027, 1028, 1029, 1030, 1031, 1033, 1034, 1035, 1039, 1040, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1056, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1075, 1078, 1082, 1098, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1125, 1126, 1127, 1128, 1130, 1135, 1141, 1143, 1161, 1162, 1184, 1191, 1197, 1198, 1199, 1201, 1202, 1223, 1225, 1233, 1234, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1247, 1248, 1249, 1251, 1252, 1253, 1260, 1261, 1262, 1263, 1270, 1271, 1275, 1296, 1297, 1299, 1307, 1316, 1325, 1332, 1337, 1339, 1343, 1344], "type_coercion": [46, 47, 48, 49, 57, 58, 829, 830, 840, 867, 878, 922], "typeerror": [39, 320], "typenam": [40, 320], "typic": [125, 137, 154, 230, 320, 426, 647, 808, 928, 1031, 1170, 1225, 1316], "tz": [696, 1273], "tzinfo": [139, 150, 928], "u": [40, 66, 68, 154, 167, 226, 320, 419, 421, 427, 448, 460, 693, 696, 726, 728, 751, 752, 753, 754, 760, 853, 922, 927, 928, 1024, 1026, 1032, 1057, 1069, 1270, 1273, 1329, 1340], "u1": [278, 320], "u16": [149, 1342, 1347], "u32": [12, 137, 180, 182, 188, 242, 296, 297, 301, 305, 311, 313, 320, 330, 336, 343, 344, 345, 346, 347, 350, 351, 353, 362, 378, 394, 395, 403, 404, 490, 492, 511, 515, 516, 519, 531, 536, 582, 598, 610, 618, 619, 623, 625, 627, 629, 631, 634, 636, 638, 642, 659, 669, 670, 675, 676, 714, 719, 721, 725, 729, 733, 734, 741, 743, 764, 767, 778, 808, 823, 826, 833, 865, 895, 896, 900, 904, 910, 912, 922, 928, 947, 948, 949, 952, 953, 955, 964, 991, 995, 996, 998, 1010, 1100, 1127, 1128, 1131, 1143, 1148, 1193, 1201, 1202, 1217, 1236, 1246, 1247, 1252, 1253, 1299, 1303, 1305, 1316, 1325, 1333, 1334, 1335, 1339, 1344], "u64": [212, 297, 320, 488, 612, 808, 867, 896, 922, 928, 1098, 1195, 1316], "u8": [182, 275, 276, 288, 320, 615, 724, 808, 826, 922, 928, 1198, 1292, 1316, 1347], "udf": [171, 230, 244, 306, 320, 412, 559, 604, 770, 808, 835, 866, 905, 922, 1170, 1316], "ufunc": 96, "uid": 137, "uint": 1347, "uint16": [149, 407, 408, 710, 808, 928, 1013, 1014, 1287, 1297, 1300, 1316], "uint2": 1342, "uint32": [130, 157, 182, 197, 252, 297, 320, 345, 350, 351, 378, 394, 395, 403, 466, 482, 485, 511, 515, 516, 531, 613, 618, 619, 620, 623, 625, 627, 629, 631, 634, 636, 638, 659, 670, 675, 676, 714, 741, 764, 767, 808, 826, 871, 896, 922, 928, 948, 952, 953, 979, 991, 995, 996, 1076, 1078, 1127, 1128, 1143, 1201, 1202, 1236, 1247, 1252, 1253, 1299, 1300, 1316], "uint4": 1344, "uint64": [130, 212, 252, 297, 320, 350, 351, 466, 488, 515, 516, 612, 620, 623, 625, 627, 629, 631, 634, 636, 638, 808, 871, 896, 922, 928, 952, 953, 1078, 1098, 1127, 1128, 1195, 1300, 1316], "uint8": [137, 182, 276, 277, 278, 288, 320, 407, 408, 615, 710, 724, 808, 826, 922, 927, 928, 1013, 1014, 1198, 1287, 1300, 1316, 1347], "uint8_pair": 1347, "uit": [683, 1260], "uk": [666, 1243], "unabl": [98, 140], "unalias": 565, "unari": [596, 808], "unbias": [467, 468, 808, 1079, 1080, 1316], "unchang": [197, 320, 614, 714, 808, 858, 905, 922, 1076, 1197, 1299, 1316], "uncompress": [35, 41, 42, 45, 49, 141, 152, 320, 922], "undefin": [717, 808], "under": [37, 41, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 89, 90, 145, 147, 149, 152, 153, 154, 245, 267, 320, 800, 801, 803, 804, 809, 810, 813, 815, 816, 817, 881, 922, 1308, 1310, 1312, 1317, 1322, 1323, 1324], "underli": [1, 50, 65, 66, 68, 82, 90, 95, 105, 122, 124, 125, 126, 128, 137, 138, 140, 144, 145, 146, 147, 153, 162, 165, 169, 198, 199, 223, 224, 254, 272, 278, 320, 374, 419, 420, 421, 425, 428, 429, 430, 431, 432, 433, 434, 435, 438, 440, 441, 443, 445, 449, 458, 459, 460, 461, 612, 639, 657, 660, 669, 808, 841, 922, 928, 975, 998, 1024, 1025, 1026, 1030, 1033, 1034, 1035, 1039, 1040, 1041, 1043, 1044, 1047, 1049, 1050, 1052, 1054, 1058, 1067, 1068, 1069, 1070, 1083, 1195, 1213, 1223, 1234, 1237, 1246, 1291, 1297, 1316, 1344], "understood": 770, "undo": [576, 583, 584, 586, 588, 590, 591], "unexpect": [105, 114, 137, 558, 559, 808, 1170, 1316], "unhelpfulli": [158, 160], "unicod": [20, 395, 671, 676, 683, 694, 928, 996, 1248, 1253, 1260, 1271], "unifi": [40, 277, 282, 320, 928], "uniform": [40, 320, 607, 808, 1191, 1316], "unimod": [650, 808, 1228, 1316], "unintend": [202, 320, 844, 922], "union": [57, 58, 59, 542, 829, 830, 840, 867, 878, 922, 928, 1154, 1343, 1344], "uniqu": [45, 49, 51, 69, 162, 163, 164, 167, 169, 180, 220, 225, 241, 245, 255, 311, 320, 336, 347, 362, 410, 507, 536, 582, 607, 693, 695, 696, 700, 719, 721, 729, 778, 808, 823, 852, 910, 922, 926, 938, 949, 964, 1016, 1118, 1148, 1177, 1191, 1270, 1272, 1273, 1277, 1303, 1305, 1316, 1332, 1334], "unique_column_valu": [245, 320], "unique_count": [808, 1316], "uniquekeepstrategi": [285, 320, 886, 922], "unit": [40, 66, 68, 158, 159, 160, 161, 165, 169, 197, 320, 378, 419, 421, 427, 442, 448, 460, 466, 472, 556, 571, 693, 696, 720, 737, 751, 752, 753, 754, 760, 808, 867, 922, 926, 928, 979, 1024, 1026, 1032, 1051, 1057, 1069, 1076, 1078, 1084, 1168, 1270, 1273, 1304, 1316, 1347], "univers": [176, 930], "unix": [65, 66, 427, 760, 1032], "unknown": [550, 665, 768, 1242], "unless": [40, 51, 124, 277, 282, 320, 688, 689, 783, 922, 1265, 1339], "unlik": [132, 211, 320, 848, 922], "unnam": [667, 1244], "unnest": [132, 320, 410, 607, 618, 666, 667, 685, 686, 706, 708, 721, 808, 922, 971, 1016, 1162, 1191, 1201, 1262, 1263, 1316, 1337, 1343], "unpivot": [236, 320, 862, 922], "unregist": [1327, 1328, 1329, 1344, 1346], "unsaf": [808, 926], "unset": [38, 147, 152, 164, 305, 320, 382, 383, 384, 386, 387, 443, 550, 808, 904, 983, 984, 985, 987, 988, 1052, 1316, 1325], "unsign": [83, 84, 85, 86, 612, 808, 928, 1195, 1316], "unsigned_integ": 928, "unstabl": [31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 72, 120, 132, 137, 145, 147, 149, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 267, 277, 282, 288, 289, 320, 323, 324, 409, 410, 444, 490, 559, 607, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 737, 784, 785, 808, 829, 830, 840, 881, 889, 922, 999, 1015, 1016, 1053, 1100, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1295, 1300, 1316, 1321], "unstack": 320, "unstackdirect": [288, 320], "unsuit": 121, "unsupport": [39, 320], "until": [89, 211, 228, 320, 677, 678, 703, 848, 922, 1254, 1255, 1280], "up": [10, 40, 81, 138, 223, 226, 245, 254, 255, 261, 274, 320, 398, 399, 559, 671, 679, 680, 694, 808, 852, 853, 858, 876, 922, 928, 1001, 1248, 1256, 1257, 1271, 1316], "upcast": [335, 808], "upcast_integer_typ": [1, 54], "updat": [39, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 174, 189, 320, 834, 922], "upgrad": 101, "upheld": [858, 922], "upon": 136, "upper": [135, 136, 137, 197, 211, 320, 399, 490, 496, 550, 585, 720, 730, 749, 750, 752, 753, 795, 796, 808, 848, 922, 1004, 1076, 1100, 1105, 1168, 1304, 1316, 1334, 1337], "upper_bound": [211, 320, 399, 496, 550, 808, 848, 922, 1004, 1105, 1168, 1316], "uppercas": [591, 702, 1279, 1339], "upsampl": [211, 320, 848, 922], "urandom": [378, 979], "uri": [38, 39, 137, 138, 139, 150, 151, 320], "url": [137, 138, 147, 152, 154, 665, 667, 1242, 1244], "urllib": 138, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 51, 57, 58, 59, 66, 81, 89, 90, 93, 97, 120, 123, 125, 126, 128, 130, 134, 135, 136, 137, 138, 139, 140, 141, 143, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 171, 180, 181, 182, 185, 189, 191, 193, 194, 200, 201, 202, 204, 210, 211, 218, 220, 222, 223, 224, 226, 230, 236, 240, 241, 243, 244, 245, 252, 253, 254, 255, 256, 258, 259, 261, 266, 267, 268, 272, 274, 275, 276, 277, 278, 279, 282, 283, 284, 285, 287, 288, 289, 290, 291, 294, 295, 296, 297, 299, 306, 320, 323, 330, 332, 334, 336, 345, 346, 369, 374, 375, 377, 390, 392, 394, 395, 396, 399, 409, 412, 415, 416, 424, 442, 443, 444, 446, 449, 457, 460, 462, 465, 466, 467, 468, 469, 473, 474, 475, 479, 490, 494, 495, 496, 508, 522, 538, 546, 550, 552, 558, 559, 562, 583, 586, 588, 590, 591, 600, 607, 610, 612, 614, 616, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 641, 643, 645, 646, 650, 652, 653, 655, 656, 657, 658, 660, 661, 662, 664, 665, 666, 668, 669, 670, 673, 674, 675, 676, 679, 680, 681, 683, 685, 687, 689, 690, 691, 692, 693, 695, 696, 700, 703, 704, 708, 716, 722, 723, 725, 726, 727, 728, 729, 732, 733, 739, 740, 741, 742, 743, 744, 746, 747, 748, 749, 750, 751, 752, 753, 754, 758, 760, 764, 765, 767, 768, 770, 771, 772, 774, 776, 777, 780, 783, 784, 785, 786, 787, 789, 790, 791, 792, 795, 796, 797, 798, 799, 804, 807, 808, 819, 820, 823, 824, 825, 826, 829, 830, 832, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 847, 848, 853, 856, 862, 871, 872, 873, 874, 876, 880, 881, 882, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 905, 922, 927, 928, 935, 936, 938, 967, 971, 975, 976, 978, 995, 996, 999, 1015, 1017, 1020, 1021, 1029, 1037, 1038, 1051, 1052, 1053, 1055, 1058, 1066, 1069, 1072, 1077, 1078, 1079, 1080, 1085, 1086, 1091, 1097, 1100, 1103, 1104, 1105, 1120, 1134, 1150, 1157, 1162, 1170, 1191, 1193, 1195, 1197, 1199, 1201, 1202, 1203, 1215, 1216, 1218, 1219, 1222, 1228, 1230, 1232, 1233, 1234, 1235, 1237, 1238, 1241, 1242, 1243, 1245, 1246, 1247, 1252, 1253, 1256, 1257, 1258, 1260, 1262, 1270, 1272, 1273, 1277, 1280, 1291, 1292, 1294, 1297, 1298, 1306, 1316, 1325, 1326, 1327, 1328, 1329, 1331, 1332, 1339, 1340, 1344, 1347], "usag": [165, 169, 264, 320, 928, 1223, 1316], "usd": [209, 320, 1347], "use_pyarrow": [45, 49, 135, 139, 141, 143, 147, 150, 278, 320, 922, 1297, 1316], "use_pyarrow_extension_arrai": [279, 320, 1298, 1316], "use_pyarrow_write_to_dataset": [45, 320], "use_statist": [147, 154], "user": [38, 137, 138, 176, 230, 244, 306, 320, 558, 559, 604, 643, 770, 808, 866, 905, 922, 926, 930, 1170, 1219, 1316], "user_conn": 137, "usernam": [135, 138, 141, 143], "userwarn": 1, "usr": 137, "usual": [97, 138, 174, 282, 320, 418, 1023], "utc": [139, 150, 418, 422, 424, 426, 443, 693, 696, 927, 928, 1023, 1027, 1031, 1052, 1270, 1273], "utc_tz": 928, "utf": [37, 46, 80, 320, 922], "utf8": [20, 135, 136, 149, 671, 683, 694, 1248, 1260, 1271], "utf8_borders_onli": 20, "utf8_ful": [20, 51, 129], "utf8_full_condens": [7, 20, 129], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [282, 320, 760, 922, 926], "uvw": [666, 1243], "v": [8, 9, 45, 197, 320, 642, 726, 728, 808, 1217, 1316, 1328, 1329], "v1": 32, "v2": [8, 141, 152], "val": [40, 251, 320, 559, 604, 714, 798, 808, 870, 922], "valid": [37, 40, 46, 66, 135, 137, 141, 143, 147, 149, 169, 174, 191, 197, 225, 249, 320, 409, 657, 659, 665, 666, 667, 669, 674, 679, 680, 798, 808, 836, 852, 869, 897, 922, 928, 1015, 1076, 1234, 1236, 1242, 1243, 1244, 1246, 1251, 1256, 1257, 1316, 1325, 1326], "validate_output_schema": [858, 922], "vals_phys": [714, 808], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 36, 37, 40, 45, 46, 49, 50, 51, 59, 60, 63, 69, 77, 78, 87, 90, 99, 124, 125, 127, 128, 135, 136, 137, 138, 147, 149, 152, 154, 155, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 174, 178, 180, 181, 182, 189, 193, 194, 196, 199, 200, 201, 202, 206, 209, 211, 212, 213, 217, 221, 223, 225, 226, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 241, 243, 245, 246, 247, 249, 252, 253, 254, 255, 256, 263, 266, 268, 269, 270, 271, 273, 274, 278, 279, 283, 284, 287, 288, 289, 290, 291, 298, 301, 302, 304, 307, 308, 310, 311, 320, 323, 324, 328, 329, 330, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 350, 351, 353, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 370, 371, 372, 374, 375, 376, 377, 378, 379, 389, 390, 391, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 408, 409, 410, 413, 415, 416, 421, 425, 435, 440, 449, 458, 463, 464, 465, 466, 467, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 513, 514, 515, 516, 519, 520, 521, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 543, 545, 546, 547, 548, 550, 551, 552, 554, 556, 557, 558, 559, 560, 561, 562, 567, 578, 579, 580, 581, 582, 592, 593, 594, 595, 598, 600, 601, 604, 605, 607, 608, 610, 613, 614, 615, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 641, 642, 643, 644, 647, 648, 649, 650, 652, 653, 654, 656, 657, 659, 660, 661, 662, 663, 665, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 685, 686, 687, 694, 703, 705, 709, 710, 712, 713, 715, 716, 717, 718, 719, 720, 721, 724, 725, 726, 727, 728, 729, 733, 736, 738, 739, 741, 743, 744, 745, 746, 747, 757, 758, 763, 764, 765, 766, 768, 771, 772, 773, 774, 775, 776, 777, 778, 782, 783, 784, 785, 791, 792, 798, 808, 823, 824, 834, 837, 838, 842, 843, 844, 848, 850, 851, 852, 853, 859, 860, 861, 862, 864, 865, 868, 869, 871, 877, 880, 882, 883, 885, 888, 889, 890, 900, 901, 903, 906, 907, 909, 910, 922, 928, 933, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 950, 951, 952, 953, 955, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 972, 973, 975, 976, 977, 978, 979, 980, 991, 992, 995, 996, 997, 1001, 1004, 1006, 1007, 1008, 1010, 1015, 1016, 1017, 1018, 1020, 1021, 1026, 1030, 1044, 1049, 1058, 1067, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1085, 1086, 1090, 1091, 1092, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1133, 1136, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1155, 1157, 1158, 1159, 1160, 1163, 1164, 1170, 1171, 1172, 1174, 1175, 1177, 1179, 1180, 1182, 1183, 1185, 1186, 1190, 1191, 1192, 1193, 1197, 1198, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1218, 1221, 1225, 1226, 1227, 1228, 1230, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1271, 1280, 1283, 1287, 1288, 1289, 1290, 1297, 1298, 1299, 1303, 1305, 1307, 1316, 1325, 1330, 1332, 1333, 1334, 1335, 1336, 1338, 1339, 1340, 1342, 1344, 1346, 1347], "value1": [653, 808], "value2": [653, 808], "value_a": 1344, "value_b": 1344, "value_count": [719, 808, 1316], "value_cum_sum": [408, 808], "value_cum_sum_all_fil": [408, 808], "value_nam": [236, 287, 320, 862, 888, 922], "value_var": [236, 287, 320, 862, 888, 922], "valueerror": [15, 20], "valueexcept": 768, "var": [40, 170, 320, 637, 638, 808, 922, 1316, 1333], "var_samp": 1333, "vari": [140, 146, 418, 1023, 1347], "variabl": [30, 37, 41, 45, 46, 47, 48, 49, 77, 145, 147, 149, 152, 153, 154, 168, 171, 236, 275, 287, 320, 862, 888, 922, 1292, 1316, 1326, 1328, 1344], "variable_nam": [236, 287, 320, 862, 888, 922], "variad": 137, "varianc": [291, 320, 468, 508, 637, 638, 722, 797, 808, 890, 922, 1080, 1120, 1212, 1306, 1316, 1337], "variou": [137, 179, 185, 320, 808, 831, 922, 927, 928, 1316], "vector": [622, 624, 626, 628, 630, 633, 635, 637, 808, 1204, 1205, 1207, 1210, 1211, 1212, 1316], "vectoris": [436, 437, 1045, 1046], "vein": 174, "verbos": [29, 158, 160, 174, 666, 1243], "veri": [137, 223, 284, 320, 559, 808, 905, 1338], "verifi": [226, 320, 853, 922], "versicolor": [320, 323], "version": [38, 39, 56, 135, 136, 139, 140, 150, 157, 162, 163, 164, 165, 169, 172, 178, 180, 190, 212, 225, 236, 260, 267, 277, 278, 282, 296, 301, 320, 323, 412, 424, 436, 437, 449, 460, 481, 488, 566, 567, 573, 577, 614, 656, 664, 708, 723, 732, 740, 782, 787, 808, 823, 835, 840, 852, 862, 875, 881, 894, 895, 900, 922, 928, 1029, 1037, 1038, 1045, 1046, 1058, 1069, 1097, 1098, 1197, 1233, 1241, 1295, 1297, 1300, 1316, 1321], "versu": [189, 320, 834, 922], "vertic": [59, 199, 288, 292, 320, 656, 672, 1233, 1249], "vertical_relax": 59, "via": [30, 135, 136, 137, 147, 149, 152, 153, 154, 177, 179, 190, 223, 254, 320, 412, 559, 667, 808, 835, 922, 931, 1244], "view": [559, 808], "visibl": [17, 197, 320, 1076, 1316], "visit": [409, 808, 1015, 1316], "visual": [218, 220, 320, 574, 878, 922], "volk": 132, "vote": [665, 667, 1242, 1244], "vowel": [679, 680, 1256, 1257], "vstack": [59, 199, 320], "w": [40, 137, 211, 255, 320, 659, 663, 665, 667, 726, 728, 848, 922, 928, 1236, 1240, 1242, 1244, 1266, 1328, 1329, 1332], "w_i": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "wa": [38, 56, 97, 140, 190, 277, 278, 320, 323, 412, 615, 681, 754, 808, 835, 922, 928, 1198, 1258, 1297, 1316, 1321], "wai": [89, 90, 122, 124, 125, 126, 128, 144, 145, 153, 210, 224, 244, 266, 299, 320, 444, 604, 653, 665, 741, 804, 808, 832, 839, 847, 866, 872, 880, 891, 898, 905, 922, 1053, 1242], "walk": 739, "want": [58, 125, 127, 135, 140, 149, 174, 199, 230, 241, 252, 267, 320, 394, 417, 475, 558, 559, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 646, 658, 675, 679, 680, 681, 735, 744, 749, 752, 758, 780, 783, 799, 808, 830, 881, 897, 922, 928, 995, 1022, 1083, 1170, 1235, 1252, 1256, 1257, 1258, 1316, 1331], "warehous": 138, "warn": [92, 93, 96, 97, 100, 107, 109, 110, 120, 600, 808, 1316], "watermark": [45, 320], "wb": [40, 320], "we": [45, 133, 135, 136, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 179, 189, 190, 211, 226, 245, 252, 290, 320, 323, 412, 439, 444, 457, 490, 522, 550, 558, 559, 620, 623, 625, 627, 629, 631, 634, 636, 638, 667, 679, 680, 698, 748, 749, 750, 751, 752, 753, 768, 795, 796, 798, 808, 834, 835, 848, 853, 858, 871, 922, 1048, 1053, 1066, 1100, 1134, 1170, 1244, 1257, 1275, 1316, 1321, 1328], "weather": [679, 680, 1256, 1257], "wed": [320, 323], "wednesdai": [211, 320, 446, 449, 848, 922, 1055, 1058], "week": [211, 226, 252, 290, 320, 417, 439, 444, 457, 459, 466, 620, 623, 625, 627, 629, 631, 634, 636, 638, 735, 749, 750, 752, 753, 754, 795, 796, 808, 848, 853, 871, 922, 928, 1022, 1048, 1053, 1066, 1068, 1078, 1316, 1340], "week_mask": [417, 735, 1022], "weekdai": [425, 440], "weekend": [417, 735, 1022], "weekli": [211, 320, 457, 848, 922, 1066], "weghorst": [667, 1244], "weight": [132, 465, 466, 467, 468, 621, 622, 624, 626, 628, 630, 633, 635, 637, 650, 808, 1077, 1078, 1079, 1080, 1203, 1204, 1205, 1206, 1207, 1208, 1210, 1211, 1212, 1228, 1316], "wei\u00df": 1339, "well": [40, 135, 136, 137, 149, 320, 496, 787, 808, 1105, 1316, 1344], "were": [174, 614, 615, 804, 808, 1197, 1198, 1316], "west": [69, 227, 320, 854, 922], "what": [179, 241, 320, 417, 558, 658, 681, 808, 1022, 1235, 1258], "whatev": 174, "when": [10, 14, 17, 19, 23, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 66, 81, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 132, 135, 136, 137, 138, 140, 141, 143, 145, 146, 147, 149, 150, 152, 153, 154, 155, 158, 159, 160, 161, 165, 169, 174, 181, 189, 195, 197, 199, 201, 204, 211, 225, 227, 230, 244, 249, 253, 255, 258, 259, 263, 266, 272, 275, 277, 278, 282, 283, 285, 289, 295, 320, 364, 377, 394, 395, 399, 417, 465, 467, 468, 474, 543, 550, 571, 604, 614, 615, 644, 652, 653, 658, 664, 668, 670, 671, 675, 676, 681, 683, 688, 689, 690, 693, 694, 733, 735, 744, 758, 808, 824, 834, 843, 848, 852, 854, 858, 869, 873, 874, 877, 880, 885, 886, 889, 893, 919, 922, 966, 978, 995, 996, 1004, 1017, 1022, 1076, 1077, 1079, 1080, 1083, 1086, 1155, 1197, 1198, 1216, 1218, 1221, 1235, 1241, 1245, 1247, 1248, 1252, 1253, 1258, 1260, 1265, 1266, 1267, 1270, 1271, 1291, 1292, 1297, 1316, 1331, 1344], "when_matched_update_al": [39, 320], "when_not_matched_insert_al": [39, 320], "where": [40, 51, 97, 137, 138, 140, 193, 194, 199, 202, 211, 223, 227, 236, 245, 254, 267, 268, 277, 282, 287, 289, 291, 320, 346, 449, 459, 462, 464, 466, 475, 546, 552, 558, 595, 613, 642, 650, 653, 655, 681, 701, 722, 734, 740, 742, 784, 785, 787, 789, 797, 798, 808, 837, 838, 844, 848, 854, 862, 881, 882, 888, 889, 890, 922, 948, 1058, 1068, 1072, 1074, 1078, 1083, 1087, 1182, 1217, 1228, 1232, 1258, 1278, 1306, 1307, 1316, 1325, 1333, 1343, 1344, 1346], "wherea": [135, 149, 252, 320, 392, 396, 444, 457, 592, 593, 620, 808, 871, 922, 1053, 1066, 1179, 1180, 1316], "wherev": [40, 230, 306, 320, 559, 808, 1170, 1316], "whether": [37, 46, 126, 128, 132, 140, 146, 147, 152, 154, 169, 173, 196, 222, 226, 261, 266, 320, 332, 334, 348, 349, 429, 445, 487, 513, 514, 643, 653, 668, 670, 733, 808, 853, 858, 876, 880, 922, 928, 935, 936, 950, 951, 994, 999, 1034, 1054, 1075, 1096, 1097, 1125, 1126, 1245, 1247, 1316, 1328, 1344], "which": [1, 6, 10, 20, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 125, 127, 135, 136, 137, 138, 139, 140, 145, 146, 147, 149, 150, 151, 152, 153, 154, 165, 168, 170, 174, 181, 182, 189, 190, 193, 194, 199, 200, 210, 211, 216, 225, 226, 245, 252, 260, 277, 278, 283, 285, 290, 320, 332, 369, 377, 412, 417, 439, 444, 446, 457, 466, 472, 496, 498, 501, 503, 504, 505, 506, 550, 558, 559, 571, 573, 620, 623, 625, 627, 629, 631, 634, 636, 638, 680, 698, 735, 749, 750, 752, 753, 754, 795, 796, 798, 808, 824, 826, 829, 832, 834, 835, 837, 838, 839, 840, 848, 852, 853, 871, 875, 885, 886, 891, 922, 928, 971, 978, 1022, 1048, 1053, 1055, 1066, 1078, 1083, 1084, 1105, 1108, 1111, 1113, 1114, 1115, 1116, 1162, 1218, 1275, 1295, 1297, 1316, 1326, 1332, 1344, 1347], "while": [39, 58, 136, 139, 140, 150, 154, 165, 169, 174, 223, 236, 284, 287, 289, 320, 395, 614, 676, 808, 830, 862, 888, 889, 922, 996, 1197, 1253, 1316], "white": [40, 320], "whitespac": [129, 688, 689, 690, 1265, 1266, 1267, 1339], "whole": [558, 652, 653, 665, 808, 905, 922, 1242], "whose": [51, 226, 245, 320, 469, 756, 808, 853, 922, 928], "why": [829, 922], "wide": [137, 209, 236, 245, 287, 288, 320, 862, 888, 922], "width": [26, 40, 60, 135, 136, 149, 320, 323, 549, 737, 922, 1161, 1316, 1321], "wiki": 20, "wikipedia": 20, "wildcard": [469, 704, 744, 745, 758, 782, 804, 808, 926], "win_loss": [40, 320], "window": [135, 136, 149, 211, 252, 320, 409, 465, 467, 468, 559, 600, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 738, 784, 785, 808, 848, 871, 922, 1015, 1077, 1079, 1080, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1316], "window_s": [621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 784, 785, 808, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1316], "windowmappingstrategi": [600, 808], "winter": [668, 670, 679, 680, 1245, 1247], "wise": [40, 51, 137, 204, 320, 337, 338, 339, 340, 341, 342, 400, 401, 402, 470, 554, 647, 648, 649, 712, 713, 758, 782, 808, 939, 940, 941, 942, 943, 944, 1006, 1007, 1008, 1081, 1166, 1167, 1225, 1226, 1227, 1289, 1290, 1316], "wish": [181, 283, 320, 389, 390, 715, 716, 808, 824, 885, 922, 990, 1301, 1316], "with_column": [1, 12, 54, 57, 58, 211, 244, 252, 282, 288, 295, 320, 329, 331, 346, 348, 349, 350, 351, 352, 353, 355, 356, 357, 358, 362, 363, 364, 365, 369, 374, 375, 377, 378, 391, 392, 394, 395, 396, 399, 404, 405, 406, 407, 408, 410, 413, 417, 418, 420, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 459, 461, 463, 464, 466, 473, 474, 479, 484, 486, 488, 494, 495, 496, 499, 500, 502, 503, 504, 505, 506, 510, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 557, 558, 559, 579, 581, 583, 584, 586, 588, 590, 591, 594, 595, 596, 600, 601, 604, 605, 607, 610, 614, 615, 619, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 640, 644, 657, 658, 659, 660, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 697, 698, 699, 701, 702, 703, 705, 708, 709, 714, 717, 724, 726, 728, 731, 735, 736, 737, 738, 739, 744, 745, 747, 748, 750, 751, 755, 765, 769, 772, 774, 777, 788, 792, 794, 796, 798, 804, 808, 829, 830, 840, 848, 850, 866, 867, 871, 878, 893, 922, 928, 1016, 1052, 1191, 1247, 1316, 1344], "with_column_nam": 149, "with_columns_seq": [320, 922], "with_context": 922, "with_field": [559, 808], "with_replac": [256, 320, 538, 641, 808, 1150, 1215, 1316], "with_row_count": [320, 922], "with_row_index": [1, 252, 296, 320, 623, 625, 627, 629, 631, 634, 636, 638, 808, 895, 922, 1216, 1316, 1321], "within": [45, 60, 77, 158, 159, 160, 161, 210, 211, 212, 226, 252, 290, 320, 488, 610, 653, 808, 848, 853, 871, 922, 1098, 1316, 1344], "without": [1, 31, 32, 33, 34, 37, 41, 45, 46, 47, 48, 49, 56, 57, 58, 67, 69, 72, 97, 100, 129, 132, 139, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 162, 163, 165, 166, 167, 168, 169, 170, 225, 227, 267, 277, 278, 282, 288, 289, 320, 323, 324, 409, 410, 444, 490, 559, 607, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 658, 668, 670, 681, 737, 741, 784, 785, 786, 808, 829, 830, 840, 852, 854, 881, 889, 922, 994, 999, 1015, 1016, 1053, 1100, 1191, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1235, 1245, 1247, 1258, 1295, 1297, 1300, 1316, 1321, 1346], "without_fil": [139, 150, 151], "wod": [690, 1267], "womp": [286, 320, 887, 922], "word": [138, 679, 680, 689, 690, 701, 1278], "work": [40, 67, 69, 72, 136, 155, 259, 295, 320, 332, 334, 370, 394, 395, 398, 399, 469, 478, 522, 551, 558, 559, 583, 584, 586, 588, 590, 591, 600, 671, 675, 676, 683, 694, 718, 808, 874, 893, 922, 928, 935, 936, 972, 995, 996, 1001, 1004, 1090, 1134, 1163, 1248, 1252, 1253, 1260, 1271, 1302, 1316], "workaround": 320, "workbook": [40, 140, 146, 320], "working_with_conditional_format": [40, 320], "working_with_sparklin": [40, 320], "worksheet": [40, 140, 146, 320], "world": [1, 20, 658, 681, 688, 689, 690, 928, 1141, 1235, 1258, 1265, 1266, 1267, 1327, 1330], "wors": [880, 922], "worth": [522, 1134], "worthwhil": [158, 160], "would": [96, 135, 136, 149, 179, 278, 282, 320, 323, 345, 356, 417, 527, 558, 559, 570, 600, 610, 733, 735, 808, 947, 958, 1022, 1139, 1193, 1297, 1316, 1321, 1342], "wrap": [79, 129, 391, 496, 558, 808, 991, 1316], "wrap_numer": [391, 808, 991, 1316], "wrapper": [58, 830, 922], "writabl": [35, 37, 41, 42, 43, 44, 45, 260, 278, 320, 1297, 1316], "write": [35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 134, 136, 141, 174, 185, 320, 399, 574, 577, 808, 856, 878, 922, 928, 1004, 1316], "write_avro": 320, "write_clipboard": [134, 320], "write_csv": [36, 136, 149, 320], "write_databas": 320, "write_delta": 320, "write_excel": 320, "write_ipc": [141, 320], "write_ipc_stream": 320, "write_json": 320, "write_markdown_frame_to_stdout": 174, "write_ndjson": [43, 320], "write_parquet": 320, "write_t": [45, 320], "write_to_dataset": [45, 320], "writeabl": [278, 320, 1297, 1316], "written": [6, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 260, 320, 573, 875, 922], "ww": [1339, 1346], "www": 706, "x": [27, 51, 59, 81, 99, 123, 129, 135, 136, 138, 140, 146, 149, 162, 163, 165, 178, 197, 215, 218, 220, 225, 245, 254, 255, 260, 284, 287, 288, 320, 323, 329, 331, 333, 352, 357, 378, 404, 411, 463, 464, 479, 484, 486, 488, 510, 517, 529, 555, 557, 558, 559, 573, 579, 581, 582, 584, 585, 586, 587, 588, 589, 590, 591, 594, 595, 599, 605, 613, 614, 615, 619, 647, 650, 685, 708, 709, 714, 717, 724, 726, 728, 731, 732, 738, 744, 745, 747, 758, 768, 769, 772, 774, 777, 782, 787, 792, 798, 808, 852, 858, 879, 881, 888, 922, 927, 928, 959, 998, 1010, 1086, 1170, 1197, 1198, 1225, 1228, 1262, 1295, 1299, 1300, 1316, 1321, 1328, 1329, 1332, 1338, 1344, 1346], "x00": [373, 374, 375, 376, 377, 379, 660, 974, 975, 976, 977, 978, 980, 1237], "x01": [377, 573, 978], "x01bb": [260, 320], "x02l": 573, "x05": [377, 978], "x07": 378, "x1": 378, "x10": [377, 978], "x15": [260, 320], "x80": [260, 320, 378, 573], "x81": 573, "x83": 378, "x88": 378, "x8e": 378, "x99": 378, "x_": [466, 808, 1078, 1316], "x_0": [288, 320, 465, 466, 467, 468, 808, 1077, 1078, 1079, 1080, 1316], "x_1": [288, 320, 466, 808, 1078, 1316], "x_2": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "x_i": [466, 808, 1078, 1316], "x_invers": [605, 808], "x_pow_8": 1338, "x_round": 1338, "x_round_1": 1338, "x_squar": [605, 808], "x_t": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "x_uniqu": [582, 808], "x_y": [357, 529], "xb": 378, "xb9neq": 378, "xbd": 378, "xc14": 378, "xd3": 378, "xdist": 1347, "xee": 378, "xf4v": 378, "xf9": 378, "xfb": 378, "xff": [373, 374, 375, 376, 379, 660, 974, 975, 976, 977, 980, 1237], "xi": [666, 1243], "xl": 140, "xlog2": [581, 605, 808], "xlsb": 140, "xlsx": [40, 140, 320], "xlsx2csv": [140, 157], "xlsxwriter": [40, 157, 320], "xor": [388, 808, 989, 1316, 1335], "xor_xi": [724, 808], "xx": [10, 52, 54, 169, 189, 267, 320, 834, 922, 928, 1332, 1339, 1346], "xxx": [193, 320, 706, 837, 922], "xy": [52, 54], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 329, 659, 666, 808, 1236, 1243, 1293, 1316], "y": [27, 51, 59, 81, 99, 123, 129, 162, 163, 165, 178, 197, 218, 220, 225, 245, 254, 255, 284, 287, 288, 320, 323, 329, 331, 333, 352, 357, 378, 446, 449, 463, 464, 484, 486, 510, 517, 529, 557, 559, 582, 584, 586, 588, 590, 591, 594, 595, 599, 613, 614, 615, 619, 693, 695, 696, 708, 717, 724, 726, 728, 731, 732, 747, 754, 768, 772, 774, 777, 787, 792, 808, 852, 879, 881, 888, 922, 927, 928, 959, 998, 1055, 1058, 1197, 1198, 1270, 1272, 1273, 1316, 1321, 1332, 1339, 1340, 1346], "y_": [465, 466, 467, 468, 808, 1077, 1078, 1079, 1080, 1316], "y_0": [288, 320, 465, 466, 467, 468, 808, 1077, 1078, 1079, 1080, 1316], "y_1": [288, 320], "y_i": [466, 808, 1078, 1316], "y_mul": 708, "y_t": [465, 467, 468, 808, 1077, 1079, 1080, 1316], "y_uniqu": [582, 808], "ya": [683, 1260], "ya29": 151, "year": [211, 226, 252, 267, 290, 320, 417, 429, 430, 439, 440, 442, 444, 457, 458, 620, 623, 625, 627, 629, 631, 634, 636, 638, 735, 748, 749, 750, 751, 752, 753, 795, 796, 808, 848, 853, 871, 922, 928, 1022, 1034, 1035, 1048, 1049, 1051, 1053, 1066, 1067, 1340], "yellow": [320, 324, 373, 374, 375, 376, 379], "yield": [126, 128, 135, 136, 137, 149, 197, 199, 222, 284, 320, 479, 558, 600, 808, 922, 1076, 1083, 1316], "you": [1, 10, 14, 40, 45, 49, 51, 58, 59, 122, 124, 125, 126, 127, 128, 135, 136, 137, 138, 140, 141, 144, 145, 149, 153, 155, 174, 181, 199, 202, 211, 222, 223, 226, 230, 241, 245, 252, 253, 254, 255, 267, 274, 277, 283, 284, 285, 287, 306, 320, 323, 389, 390, 394, 417, 436, 437, 439, 443, 446, 449, 469, 475, 496, 522, 550, 558, 559, 574, 600, 605, 612, 620, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 633, 634, 635, 636, 637, 638, 646, 658, 675, 679, 680, 681, 701, 704, 715, 716, 735, 744, 749, 752, 754, 758, 770, 780, 783, 787, 799, 808, 824, 830, 844, 848, 853, 871, 878, 881, 885, 886, 888, 897, 905, 922, 926, 928, 990, 995, 1022, 1045, 1046, 1052, 1055, 1058, 1083, 1105, 1134, 1170, 1189, 1195, 1235, 1252, 1256, 1257, 1258, 1278, 1295, 1301, 1316, 1321, 1326, 1331, 1347], "your": [38, 40, 50, 51, 90, 135, 136, 137, 138, 140, 155, 174, 223, 225, 230, 254, 255, 258, 274, 294, 299, 306, 320, 323, 422, 466, 481, 559, 667, 693, 695, 696, 703, 770, 808, 852, 858, 873, 892, 898, 905, 922, 1027, 1078, 1170, 1244, 1270, 1272, 1273, 1280, 1316, 1321, 1347], "yy": [10, 52, 54, 169, 189, 267, 320, 834, 922, 928, 1332, 1339, 1346], "yyi": [193, 320, 706, 837, 922], "yyyi": [40, 320], "yz": [52, 54], "z": [40, 59, 81, 129, 163, 197, 218, 220, 225, 254, 255, 284, 287, 288, 320, 329, 331, 333, 488, 517, 559, 584, 586, 588, 590, 591, 599, 613, 614, 615, 658, 666, 668, 670, 681, 693, 696, 726, 728, 747, 772, 774, 777, 783, 787, 792, 808, 852, 879, 881, 888, 922, 927, 928, 1086, 1197, 1198, 1235, 1243, 1245, 1247, 1258, 1270, 1273, 1316, 1328, 1332, 1344, 1346], "z_0": [288, 320], "z_1": [288, 320], "zap": 928, "zero": [28, 40, 122, 123, 133, 135, 136, 141, 143, 147, 164, 167, 178, 201, 211, 223, 253, 267, 272, 278, 279, 320, 474, 550, 555, 642, 650, 703, 717, 808, 827, 843, 848, 922, 1003, 1086, 1162, 1228, 1280, 1291, 1297, 1298, 1316, 1338, 1344], "zero_copy_onli": [1297, 1316], "zfill": [678, 724, 808, 1255], "zip": 1347, "zip_with": [204, 320, 1316], "zone": [66, 165, 166, 169, 418, 422, 443, 466, 696, 751, 752, 753, 808, 928, 1023, 1027, 1052, 1078, 1273, 1316], "zoneinfo": [66, 928], "zoom": [40, 320], "zstd": [41, 42, 45, 47, 49, 320, 922], "zz": [169, 189, 267, 320, 834, 922, 1332, 1339, 1346], "zzz": 706, "\u03bc": [129, 182, 211, 223, 252, 254, 255, 274, 290, 320, 418, 419, 421, 422, 423, 424, 426, 428, 431, 433, 434, 436, 437, 438, 439, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 454, 455, 456, 457, 460, 620, 623, 625, 627, 629, 631, 634, 636, 638, 693, 696, 751, 752, 753, 754, 760, 808, 826, 848, 871, 922, 928, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1038, 1039, 1043, 1045, 1046, 1047, 1048, 1052, 1053, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1069, 1270, 1273, 1339], "\u0441\u0438\u043d\u0438\u0439": 1339, "\u0967\u096f\u096f\u096f": 928, "\u0968\u0966\u096d\u096d": 928, "\u4eac\u90fd": 928, "\u5927\u962a": 928, "\u6771\u4eac": [394, 395, 675, 676, 928, 995, 996, 1252, 1253], "\u90fd\u5e02": 928, "\ud835\udf0b": 1338}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1332, 1345], "IF": 1336, "__array__": [176, 930], "__arrow_c_stream__": [177, 931], "__dataframe__": 178, "__getitem__": [179, 932], "__iter__": 298, "ab": [328, 933, 1338], "aco": 1341, "acosd": 1341, "add": 329, "add_business_dai": [417, 1022], "agg": [299, 898], "agg_group": 330, "aggreg": [175, 327, 822, 929, 1333], "alia": [331, 934], "alias": [1333, 1338, 1339], "align_fram": 51, "all": [300, 332, 348, 513, 725, 899, 935, 950, 1125, 1345], "all_horizont": 726, "and_": 333, "ani": [334, 349, 514, 727, 936, 951, 1126], "any_horizont": 728, "api": [1, 52, 53, 54, 55, 820, 1344], "append": [335, 937], "approx_n_uniqu": [180, 336, 729, 823, 938], "arang": 730, "arcco": [337, 939], "arccosh": [338, 940], "arcsin": [339, 941], "arcsinh": [340, 942], "arctan": [341, 943], "arctan2": 731, "arctan2d": 732, "arctanh": [342, 944], "arg_max": [343, 350, 515, 945, 952, 1127], "arg_min": [344, 351, 516, 946, 953, 1128], "arg_sort": [345, 947], "arg_sort_bi": 733, "arg_tru": [346, 948], "arg_uniqu": [347, 949], "arg_wher": 734, "arr": [348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973], "arrai": [60, 800, 1308, 1334], "array_agg": 1334, "array_contain": 1334, "array_get": 1334, "array_length": 1334, "array_low": 1334, "array_mean": 1334, "array_revers": 1334, "array_sum": 1334, "array_to_str": 1334, "array_uniqu": 1334, "array_upp": 1334, "asin": 1341, "asind": 1341, "assert": 1347, "assert_frame_equ": 158, "assert_frame_not_equ": 159, "assert_series_equ": 160, "assert_series_not_equ": 161, "atan": 1341, "atan2": 1341, "atan2d": 1341, "atand": 1341, "attribut": [315, 917, 1309], "avail": 1, "avg": 1333, "avro": 821, "backward_fil": 372, "base_utc_offset": [418, 1023], "batched_read": 131, "batchedcsvread": 131, "bin": [373, 374, 375, 376, 377, 378, 379, 974, 975, 976, 977, 978, 979, 980], "binari": [61, 801, 814, 1310], "bit_and": 1335, "bit_count": 1335, "bit_length": 1339, "bit_or": 1335, "bit_xor": 1335, "bitwise_and": [380, 981], "bitwise_count_on": [381, 982], "bitwise_count_zero": [382, 983], "bitwise_leading_on": [383, 984], "bitwise_leading_zero": [384, 985], "bitwise_or": [385, 986], "bitwise_trailing_on": [386, 987], "bitwise_trailing_zero": [387, 988], "bitwise_xor": [388, 989], "boolean": [62, 802, 1311], "bottom_k": [181, 389, 824, 990], "bottom_k_bi": 390, "build_info": 56, "business_day_count": 735, "cach": 825, "cancel": 914, "cast": [182, 391, 826, 991, 1342], "cast_time_unit": [419, 1024], "cat": [392, 393, 394, 395, 396, 992, 993, 994, 995, 996, 997, 998, 999], "categor": 63, "categori": [803, 1312], "categoricalremappingwarn": 92, "cbrt": [397, 1000, 1338], "ceil": [398, 1001, 1338], "centuri": [420, 1025], "chronoformatwarn": 93, "chunk_length": 1002, "claus": 1332, "clear": [183, 827, 1003], "clip": [399, 1004], "clipboard": 821, "clone": [184, 828, 1005], "cloud": 821, "co": [400, 1006, 1341], "coalesc": [736, 1336], "col": 804, "collect": 829, "collect_al": 57, "collect_all_async": 58, "collect_async": 830, "collect_schema": [185, 831], "column": [162, 163, 186, 805, 832], "columnnotfounderror": 94, "combin": [421, 1026], "comparison": [814, 1320], "comput": [316, 806, 1313], "computeerror": 95, "concat": [59, 517, 656, 1129, 1233, 1339], "concat_arr": 737, "concat_list": 738, "concat_str": 739, "concat_w": 1339, "condit": 1336, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 174], "conjunct": 814, "contain": [352, 373, 518, 657, 954, 974, 1130, 1234], "contains_ani": [658, 1235], "context": 174, "convers": 819, "convert_time_zon": [422, 1027], "corr": [187, 740], "cosd": 1341, "cosh": [401, 1007], "cot": [402, 1008, 1341], "cotd": 1341, "count": [188, 301, 403, 741, 833, 900, 1009, 1333], "count_match": [353, 519, 659, 955, 1131, 1236], "cov": 742, "creat": 1346, "create_list_strategi": 164, "credenti": 821, "credentialprovid": 31, "credentialprovideraw": 32, "credentialproviderazur": 33, "credentialprovidergcp": 34, "csv": [131, 821], "cum_count": [404, 743, 1010], "cum_fold": 744, "cum_max": [405, 1011], "cum_min": [406, 1012], "cum_prod": [407, 1013], "cum_reduc": 745, "cum_sum": [408, 746, 1014], "cum_sum_horizont": 747, "cumulative_ev": [409, 1015], "customufuncwarn": 96, "cut": [410, 1016], "dai": [425, 1030], "data": 325, "databas": 821, "datafram": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 320], "dataorientationwarn": 97, "dataset": 821, "datatyp": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 325], "date": [65, 423, 748, 1028, 1339], "date_part": 1340, "date_rang": [749, 750], "datetim": [66, 424, 751, 1029], "datetime_rang": [752, 753], "decim": 67, "decod": [374, 660, 975, 1237], "decor": 174, "degre": [411, 1341], "delta": 821, "describ": [189, 834, 1017], "descript": [317, 918, 1314], "deseri": [190, 412, 835], "diff": [413, 520, 1018, 1132], "disable_string_cach": 89, "distinct": 1332, "div": 1338, "document": 1344, "dot": [414, 1019], "drop": [191, 836, 1346], "drop_in_plac": 192, "drop_nan": [193, 415, 837, 1020], "drop_nul": [194, 416, 521, 838, 1021, 1133], "dst_offset": [426, 1031], "dt": [417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070], "dtype": [166, 195, 839, 1071], "duplicateerror": 98, "durat": [68, 754], "element": 755, "enable_string_cach": 90, "encod": [375, 661, 976, 1238], "ends_with": [376, 392, 662, 977, 992, 1239, 1339], "engine_config": 897, "entropi": [462, 1072], "enum": 69, "epoch": [427, 1032], "eq": [463, 563, 1073], "eq_miss": [464, 1074], "equal": [196, 1075], "error": 326, "escape_regex": [91, 663, 1240], "estimated_s": [197, 1076], "eval": [522, 1134], "ewm_mean": [465, 1077], "ewm_mean_bi": [466, 1078], "ewm_std": [467, 1079], "ewm_var": [468, 1080], "exampl": [1, 928, 1347], "excel": 821, "except": [92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 326, 1345], "exclud": [469, 756], "execut": 1325, "execute_glob": 1326, "exp": [470, 1081, 1338], "explain": [840, 1346], "explod": [198, 354, 471, 523, 664, 841, 956, 1082, 1135, 1241], "export": [318, 1315], "expr": [328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724], "express": [808, 1344], "extend": [1, 199, 1083], "extend_const": [472, 1084], "extract": [665, 1242, 1340], "extract_al": [666, 1243], "extract_group": [667, 1244], "extract_mani": [668, 1245], "feather": 821, "fetch": 915, "fetch_block": 916, "field": [704, 1281, 1282], "fill_nan": [200, 473, 842, 1085], "fill_nul": [201, 474, 843, 1086], "filter": [202, 475, 844, 1087], "find": [669, 1246], "find_mani": [670, 1247], "first": [302, 355, 476, 524, 757, 845, 901, 957, 1088, 1136, 1333], "flag": [203, 1089], "flatten": 477, "float32": 70, "float64": 71, "floor": [478, 1090, 1338], "floordiv": 479, "fold": [204, 758], "format": 759, "forward_fil": 480, "frame": 1344, "from": 1332, "from_arrow": 122, "from_datafram": 123, "from_dict": [124, 125], "from_epoch": 760, "from_json": 481, "from_numpi": 126, "from_panda": 127, "from_record": 128, "from_repr": 129, "function": [1, 807, 819, 928, 1337], "gather": [482, 525, 1091, 1137], "gather_everi": [205, 483, 526, 846, 1092, 1138], "ge": [484, 1093], "get": [356, 485, 527, 958, 1139], "get_categori": [393, 993], "get_chunk": 1094, "get_column": [206, 208], "get_column_index": 207, "get_index_typ": 130, "glimps": 209, "global": 1344, "gpuengin": [897, 919], "greatest": 1336, "group": [761, 1332], "group_bi": [210, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 847, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913], "group_by_dynam": [211, 848], "groupbi": [298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 319, 920], "gt": [486, 1095], "has_multiple_output": 564, "has_nul": [487, 1096], "has_valid": 1097, "hash": [488, 1098], "hash_row": 212, "have": 1332, "head": [213, 303, 489, 528, 671, 762, 849, 902, 1099, 1140, 1248], "height": 214, "helper": 1347, "hist": [490, 1100], "hour": [428, 1033], "hstack": 215, "iceberg": 821, "ifnul": 1336, "implod": [491, 763, 1101], "import": 928, "in_process": [914, 915, 916], "index": 0, "index_of": [492, 1102], "initcap": 1339, "inprocessqueri": [914, 915, 916, 921], "input": 821, "insert_column": 216, "inspect": [493, 850], "instanc": 174, "int128": 72, "int16": 73, "int32": 74, "int64": 75, "int8": 76, "int_rang": [764, 765], "interfac": 1343, "interpol": [217, 494, 851, 1103], "interpolate_bi": [495, 1104], "intersect": 1345, "introduct": 1344, "invalidoperationerror": 99, "io": 131, "ipc": 821, "is_between": [496, 1105], "is_column": 565, "is_column_select": 566, "is_dupl": [218, 497, 1106], "is_empti": [219, 1107], "is_finit": [498, 1108], "is_first_distinct": [499, 1109], "is_in": [500, 1110], "is_infinit": [501, 1111], "is_last_distinct": [502, 1112], "is_leap_year": [429, 1034], "is_liter": 567, "is_loc": 994, "is_nan": [503, 1113], "is_not_nan": [504, 1114], "is_not_nul": [505, 1115], "is_nul": [506, 1116], "is_regex_project": 568, "is_sort": 1117, "is_uniqu": [220, 507, 1118], "iso_year": [430, 1035], "item": [221, 1119], "iter_column": 222, "iter_row": 223, "iter_slic": 224, "join": [225, 357, 529, 672, 852, 959, 1141, 1249, 1332], "join_asof": [226, 853], "join_wher": [227, 854], "json": 821, "json_decod": [673, 1250], "json_encod": [705, 1283], "json_norm": 132, "json_path_match": [674, 1251], "keep": 583, "kurtosi": [508, 1120], "lake": 821, "last": [304, 358, 509, 530, 766, 855, 903, 960, 1121, 1142, 1333], "lazi": [228, 856], "lazyfram": [46, 47, 48, 49, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 922], "lazygroupbi": [898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913], "le": [510, 1122], "least": 1336, "left": 1339, "len": [305, 511, 531, 767, 904, 1123, 1143], "len_byt": [394, 675, 995, 1252], "len_char": [395, 676, 996, 1253], "length": 1339, "limit": [229, 512, 857, 1124, 1332], "list": [77, 167, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 809, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1317], "lit": 768, "ln": 1338, "load": [2, 174], "load_from_fil": 3, "load_profil": 168, "log": [553, 1165, 1338], "log10": [554, 1166, 1338], "log1p": [555, 1167, 1338], "log2": 1338, "lower": 1339, "lower_bound": [556, 1168], "lt": [557, 1169], "ltrim": 1339, "manag": 174, "manipul": [322, 812, 924, 1319], "map": 584, "map_batch": [558, 769, 858], "map_el": [559, 1170], "map_field": 585, "map_group": [306, 770, 905], "map_row": 230, "mapwithoutreturndtypewarn": 100, "math": 1338, "max": [231, 307, 359, 532, 560, 771, 859, 906, 961, 1036, 1144, 1171, 1333], "max_horizont": [232, 772], "mean": [233, 308, 533, 561, 773, 860, 907, 1037, 1145, 1172], "mean_horizont": [234, 774], "median": [235, 309, 360, 534, 562, 775, 861, 908, 962, 1038, 1146, 1173, 1333], "melt": [236, 862], "merge_sort": [237, 863], "meta": [563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 810], "metadata": 925, "method": 1344, "microsecond": [431, 1039], "millennium": [432, 1040], "millisecond": [433, 1041], "min": [238, 310, 361, 535, 578, 776, 864, 909, 963, 1042, 1147, 1174, 1333], "min_horizont": [239, 777], "minut": [434, 1043], "miscellan": [321, 811, 819, 923, 1318], "mod": [579, 1338], "mode": [580, 1175], "moduleupgraderequirederror": 101, "month": [435, 1044], "month_end": [436, 1045], "month_start": [437, 1046], "mul": 581, "multipl": 174, "n_chunk": [240, 1176], "n_uniqu": [241, 311, 362, 536, 582, 778, 910, 964, 1148, 1177], "name": [583, 584, 585, 586, 587, 588, 589, 590, 591, 805, 813, 1178, 1345], "nan_max": [592, 1179], "nan_min": [593, 1180], "nanosecond": [438, 1047], "ne": [569, 594, 1181], "ne_miss": [595, 1182], "neg": 596, "nest": 325, "new": 1, "new_from_index": 1183, "next_batch": 131, "nodataerror": 102, "norowsreturnederror": 103, "not_": [597, 1184], "nth": 779, "null": 78, "null_count": [242, 598, 865, 1185], "nullif": 1336, "numer": [325, 814, 1320], "object": 79, "octet_length": 1339, "od": 821, "offset": 1332, "offset_bi": [439, 1048], "ones": 780, "oper": [814, 928, 1320, 1345, 1346], "option": 174, "or_": 599, "order": 1332, "ordinal_dai": [440, 1049], "other": 325, "outofboundserror": 104, "output": 821, "output_nam": 570, "over": 600, "pad_end": [677, 1254], "pad_start": [678, 1255], "panic": 326, "panicexcept": 105, "parallel": 819, "parametercollisionerror": 106, "parametr": [162, 163, 164, 165, 166, 167, 168, 169, 170, 1347], "parquet": 821, "partition_bi": 243, "pct_chang": [601, 1186], "peak_max": [602, 1187], "peak_min": [603, 1188], "performancewarn": 107, "pi": 1338, "pipe": [244, 604, 866], "pivot": 245, "plot": [323, 1321], "plugin": 926, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 804, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1347], "polarserror": 108, "polarsinefficientmapwarn": 109, "polarswarn": 110, "pop": 571, "pow": [605, 1189, 1338], "prefix": 586, "prefix_field": 587, "product": [246, 606, 1190], "profil": [867, 1347], "provid": 1, "pyarrow": 821, "python": [820, 1344], "qcut": [607, 1191], "quantil": [247, 312, 608, 781, 868, 911, 1192], "quantile_cont": 1333, "quantile_disc": 1333, "quarter": [441, 1050], "queri": 1344, "radian": [609, 1341], "random": 819, "rank": [610, 1193], "read_avro": 133, "read_clipboard": 134, "read_csv": 135, "read_csv_batch": 136, "read_databas": 137, "read_database_uri": 138, "read_delta": 139, "read_excel": 140, "read_ipc": 141, "read_ipc_schema": 142, "read_ipc_stream": 143, "read_json": 144, "read_ndjson": 145, "read_od": 146, "read_parquet": 147, "read_parquet_schema": 148, "rechunk": [248, 611, 1194], "reduc": 782, "refer": 820, "regexp_lik": 1339, "regist": 1327, "register_dataframe_namespac": 52, "register_expr_namespac": 53, "register_glob": 1328, "register_lazyframe_namespac": 54, "register_mani": 1329, "register_series_namespac": 55, "registr": 1, "reinterpret": [377, 612, 978, 1195], "renam": [249, 869, 1196], "rename_field": [706, 1284], "repeat": 783, "repeat_bi": 613, "replac": [442, 614, 679, 1051, 1197, 1256, 1339], "replace_al": [680, 1257], "replace_column": 250, "replace_mani": [681, 1258], "replace_strict": [615, 1198], "replace_time_zon": [443, 1052], "reshap": [616, 1199], "restore_default": 4, "revers": [251, 363, 537, 617, 682, 870, 965, 1149, 1200, 1259, 1339], "right": 1339, "rle": [618, 1201], "rle_id": [619, 1202], "roll": [252, 620, 871], "rolling_corr": 784, "rolling_cov": 785, "rolling_map": [621, 1203], "rolling_max": [622, 1204], "rolling_max_bi": 623, "rolling_mean": [624, 1205], "rolling_mean_bi": 625, "rolling_median": [626, 1206], "rolling_median_bi": 627, "rolling_min": [628, 1207], "rolling_min_bi": 629, "rolling_quantil": [630, 1208], "rolling_quantile_bi": 631, "rolling_skew": [632, 1209], "rolling_std": [633, 1210], "rolling_std_bi": 634, "rolling_sum": [635, 1211], "rolling_sum_bi": 636, "rolling_var": [637, 1212], "rolling_var_bi": 638, "root_nam": 572, "round": [444, 639, 1053, 1213, 1338], "round_sig_fig": [640, 1214], "row": [253, 254], "rows_by_kei": 255, "rowserror": 111, "rtrim": 1339, "sampl": [256, 538, 641, 1150, 1215], "save": [5, 174], "save_to_fil": 6, "scan_csv": 149, "scan_delta": 150, "scan_iceberg": 151, "scan_ipc": 152, "scan_ndjson": 153, "scan_parquet": 154, "scan_pyarrow_dataset": 155, "scatter": 1216, "schema": [257, 872, 927, 1285], "schemaerror": 114, "schemafieldnotfounderror": 115, "search_sort": [642, 1217], "second": [445, 1054], "select": [258, 322, 786, 812, 873, 924, 1319, 1332], "select_seq": [259, 874], "selector": 928, "seri": [169, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1316], "serial": [260, 321, 573, 875, 923], "set": [928, 1218, 1345], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [539, 1151], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [540, 1152], "set_profil": 170, "set_random_se": 156, "set_sort": [261, 643, 876, 1219], "set_streaming_chunk_s": 14, "set_symmetric_differ": [541, 1153], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [542, 1154], "set_verbos": 29, "shape": [262, 1220], "shapeerror": 116, "shift": [263, 364, 543, 644, 877, 966, 1155, 1221], "show": 1346, "show_graph": [574, 878], "show_vers": 157, "shrink_dtyp": [645, 1222], "shrink_to_fit": [264, 1223], "shuffl": [646, 1224], "sign": [647, 1225, 1338], "sin": [648, 1226, 1341], "sind": 1341, "sinh": [649, 1227], "sink_csv": 46, "sink_ipc": 47, "sink_ndjson": 48, "sink_parquet": 49, "size": [378, 979], "skew": [650, 1228], "slice": [265, 544, 651, 683, 879, 1156, 1229, 1260], "sort": [266, 365, 545, 652, 880, 967, 1157, 1230], "sort_bi": 653, "split": [684, 1261], "split_exact": [685, 1262], "splitn": [686, 1263], "sql": [267, 787, 881, 1332, 1337, 1343, 1344], "sql_expr": 788, "sqlcontext": [1325, 1326, 1327, 1328, 1329, 1330, 1331, 1344], "sqlinterfaceerror": 112, "sqlsyntaxerror": 113, "sqrt": [654, 1231, 1338], "starts_with": [379, 396, 687, 980, 997, 1264, 1339], "state": [30, 174], "std": [268, 366, 546, 655, 789, 882, 968, 1158, 1232], "stddev": 1333, "str": [656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280], "strategi": 1347, "strftime": [446, 1055, 1340], "string": [80, 325, 815, 1322, 1339], "stringcach": [50, 819], "stringcachemismatcherror": 117, "strip_char": [688, 1265], "strip_chars_end": [689, 1266], "strip_chars_start": [690, 1267], "strip_prefix": [691, 1268], "strip_suffix": [692, 1269], "strpo": 1339, "strptime": [693, 1270, 1339], "struct": [81, 704, 705, 706, 707, 708, 790, 816, 1281, 1282, 1283, 1284, 1285, 1286, 1323], "structfieldnotfounderror": 118, "style": 324, "sub": 709, "substr": 1339, "suffix": 588, "suffix_field": 589, "sum": [269, 313, 367, 547, 710, 791, 883, 912, 969, 1159, 1287, 1333], "sum_horizont": [270, 792], "tabl": [1330, 1346], "tail": [271, 314, 548, 694, 711, 793, 884, 913, 1160, 1271, 1288], "tan": [712, 1289, 1341], "tand": 1341, "tanh": [713, 1290], "tempor": [325, 817, 1324, 1335, 1340], "test": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 1347], "thread_pool_s": 171, "threadpool_s": 172, "time": [82, 447, 794, 1056], "time_rang": [795, 796], "timestamp": [448, 1057, 1339], "to_arrai": [549, 1161], "to_arrow": [272, 1291], "to_dat": [695, 1272], "to_datetim": [696, 1273], "to_decim": [697, 1274], "to_dict": [273, 274], "to_dummi": [275, 1292], "to_fram": 1293, "to_init_repr": [276, 1294], "to_integ": [698, 1275], "to_jax": [277, 1295], "to_list": [368, 970, 1296], "to_loc": 998, "to_lowercas": [590, 699, 1276], "to_numpi": [278, 1297], "to_panda": [279, 1298], "to_phys": [714, 1299], "to_seri": 280, "to_str": [449, 1058], "to_struct": [281, 369, 550, 971, 1162], "to_tim": [700, 1277], "to_titlecas": [701, 1278], "to_torch": [282, 1300], "to_uppercas": [591, 702, 1279], "toomanyrowsreturnederror": 119, "top_k": [283, 715, 885, 1301], "top_k_bi": 716, "total_dai": [450, 1059], "total_hour": [451, 1060], "total_microsecond": [452, 1061], "total_millisecond": [453, 1062], "total_minut": [454, 1063], "total_nanosecond": [455, 1064], "total_second": [456, 1065], "transpos": 284, "tree_format": 575, "trigonometri": 1341, "truediv": 717, "truncat": [457, 1066, 1346], "try_cast": 1342, "type": [325, 1342], "uint16": 83, "uint32": 84, "uint64": 85, "uint8": 86, "undo_alias": 576, "union": 1345, "uniqu": [285, 370, 551, 718, 886, 972, 1163, 1302], "unique_count": [719, 1303], "unknown": 87, "unnest": [286, 707, 887, 1286, 1334, 1346], "unpivot": [287, 888], "unregist": 1331, "unstablewarn": 120, "unstack": 288, "unsuitablesqlerror": 121, "updat": [289, 889], "upper": 1339, "upper_bound": [720, 1304], "upsampl": 290, "us": 174, "uses_lexical_ord": 999, "using_string_cach": 173, "utf8": 88, "value_count": [721, 1305], "var": [291, 371, 552, 722, 797, 890, 973, 1164, 1306], "varianc": 1333, "vstack": 292, "warn": 326, "week": [458, 1067], "weekdai": [459, 1068], "when": 798, "where": [723, 1332], "width": [293, 891], "window": 818, "with_column": [294, 892], "with_columns_seq": [295, 893], "with_context": 894, "with_field": 708, "with_row_count": [296, 895], "with_row_index": [297, 896], "with_time_unit": [460, 1069], "write_avro": 35, "write_clipboard": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 577], "write_ndjson": 44, "write_parquet": 45, "xor": 724, "year": [461, 1070], "zero": 799, "zfill": [703, 1280], "zip_with": 1307}})